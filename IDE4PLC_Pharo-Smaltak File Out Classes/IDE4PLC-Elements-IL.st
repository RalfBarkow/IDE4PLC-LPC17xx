"Copyright © 2012-2014 Eric Nicolás Pernia.This file is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>."Object subclass: #PLC_TextualPOUCall	instanceVariableNames: 'declaration instanceOperand inputAssignments outputAssignments inOutAssignments'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_TextualPOUCall commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_TextualPOUCall is xxxxxxxxx.Instance Variables	declaration:		<Object>	inOutAssignments:		<Object>	inputAssignments:		<Object>	instanceOperand:		<Object>	outputAssignments:		<Object>declaration	- xxxxxinOutAssignments	- xxxxxinputAssignments	- xxxxxinstanceOperand	- xxxxxoutputAssignments	- xxxxx!!PLC_TextualPOUCall methodsFor: 'compilation' stamp: 'EricPernia 6/22/2013 03:44'!cPOUName	"Devuelve el nombre en C de la POU"		"Ejemplo: 		PLC_F_ADD_INT"		^ self declaration cPOUName.! !!PLC_TextualPOUCall methodsFor: 'compilation' stamp: 'EricPernia 11/7/2013 12:50'!instanceName	"Devuelve el nombre de la Instancia de la POU"		^ self instanceOperand identifier.! !!PLC_TextualPOUCall methodsFor: 'compilation' stamp: 'EricPernia 6/22/2013 03:41'!pouName	"Devuelve el identificador de la POU"		^ self declaration identifier.! !!PLC_TextualPOUCall methodsFor: 'initialize-release' stamp: 'EricPernia 6/11/2013 01:47'!initialize	"Inicializaciones"	self inputAssignments: OrderedCollection new.	self inOutAssignments: OrderedCollection new.	self outputAssignments: OrderedCollection new.! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 6/11/2013 01:50'!declaration		^ declaration! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 6/11/2013 01:50'!declaration: anObject		declaration := anObject! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 6/11/2013 01:50'!inOutAssignments		^ inOutAssignments! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 6/11/2013 01:50'!inOutAssignments: anObject		inOutAssignments := anObject! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 6/11/2013 01:50'!inputAssignments		^ inputAssignments! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 6/11/2013 01:50'!inputAssignments: anObject		inputAssignments := anObject! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 11/7/2013 11:44'!instanceOperand		^ instanceOperand! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 11/7/2013 11:44'!instanceOperand: anObject		instanceOperand := anObject! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 6/11/2013 01:50'!outputAssignments		^ outputAssignments! !!PLC_TextualPOUCall methodsFor: 'accessing' stamp: 'EricPernia 6/11/2013 01:50'!outputAssignments: anObject		outputAssignments := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_TextualPOUCall class	instanceVariableNames: ''!!PLC_TextualPOUCall class methodsFor: 'instance creation' stamp: 'EricPernia 11/7/2013 14:04'!newFromDeclaration: pouDeclaration andInstanceOperand: inst	"Crea un nuevo llamado IL a partir de la declaración pouDeclaration."	| pouCall |		pouCall := self new.		pouCall declaration: pouDeclaration.	pouCall instanceOperand: inst.	pouDeclaration inputVarDecls do: [ :each | 		pouCall inputAssignments add: 			( PLC_InputAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOpenad new				andPouCall: pouCall			).		].	pouDeclaration inOutVarDecls do: [ :each | 		pouCall inOutAssignments add: 			( PLC_InOutAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOpenad new				andPouCall: pouCall			).		].	pouDeclaration outputVarDecls do: [ :each | 		pouCall outputAssignments add: 			( PLC_OutputAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOpenad new				andPouCall: pouCall			).		].		^ pouCall.! !PLC_TextualPOUCall subclass: #PLC_ProgramConfiguration	instanceVariableNames: 'task'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_ProgramConfiguration commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_ProgramConfiguration is xxxxxxxxx.Instance Variables	task:		<Object>task	- xxxxx!!PLC_ProgramConfiguration methodsFor: 'compilation' stamp: 'EricPernia 11/16/2013 17:05'!cCompile	"Compila el elemento IL llamado a función a lenguaje C.	Devuelve:			inputAssignment;		inOutAssignment;		cPOUName( &instanceName ); 					outputAssignment; 		Por ejemplo:			// Cargo los parametros VAR_INPUT y VAR_IN_OUT del 		// CTU_INT contador1 con sus variables conectadas		// en su estructura.				contador1.CU = varBool1 ;		contador1.R = varBool2 ;		contador1.PV = varInt1 ;								// Llamo a la función pasandole la estructura por referencia				PLC_FB_CTU_INT( &contador1 );									// Cargo las variables conectadas con los parametros VAR_OUTPUT del CTU_INT contador1		// de en su estructura.			varBool3 = contador1.Q;			varInt2 = contador1.CV;		"		| cCode |		cCode := '			'.	self inputAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].				self inOutAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].		cCode := cCode , '			' , self cPOUName , 		'( &',		 self instanceName ,		 ' );				'.				self outputAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].					cCode := cCode , ''.				^ cCode.			! !!PLC_ProgramConfiguration methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 02:01'!ilCompile	"Compila el elemento IL Configuración de Programa a IL.	Este elemento IL es una instanciación y llamado a la vez de 	una POU Programa.	Devuelve (sin asociación con Tarea. Es la Tarea FreeRTOS de menor prioridad):			PROGRAM ProgramInstanceName : ProgramName ( 			inputAssignment , 			inOutAssignment , 			outputAssignment 			) ;		Por ejemplo:			PROGRAM G : GRAVEL ( 			IN :=  ENT1 , 			PT := T#300ms ,			ENO => ERR , 			Q => OUT , 			ET => ELAPSED 			) ;							Devuelve (con asociación con Tarea):			PROGRAM ProgramInstanceName WITH TaskName : ProgramName ( 			inputAssignment , 			outputAssignment , 			inOutAssignment 			) ;		Por ejemplo:			PROGRAM G WITH TAREA1 : GRAVEL ( 			IN :=  ENT1 , 			PT := T#300ms ,			ENO => ERR , 			Q => OUT , 			ET => ELAPSED 			) ;				"		| pouCall |	pouCall := '			PROGRAM ' , 		self pouName , ' ' ,		self withTaskName , 		' : ' , 		self instanceName , ' ( '.		self inputAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].						self inOutAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].						self outputAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].					"Borro la última coma de más"		pouCall := pouCall copyFrom: 1 to: ( pouCall size ) - 1.		pouCall := pouCall , '				) ;'.		^ pouCall.			! !!PLC_ProgramConfiguration methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 22:26'!withTaskName	"Devuelve el nombre de la Tarea anteponiendo WITH"		self task 		ifNil: [ 			^ ''.			 ] 		ifNotNil: [			^ 'WITH ' , self taskName.			].! !!PLC_ProgramConfiguration methodsFor: 'accessing' stamp: 'EricPernia 11/6/2013 10:51'!task		^ task! !!PLC_ProgramConfiguration methodsFor: 'accessing' stamp: 'EricPernia 11/6/2013 10:51'!task: anObject		task := anObject! !!PLC_ProgramConfiguration methodsFor: 'accessing' stamp: 'EricPernia 11/6/2013 10:52'!taskName		^ self task taskName! !Object subclass: #PLC_IL_Modifiers	instanceVariableNames: ''	classVariableNames: 'Instances InstancesCreated'	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_IL_Modifiers commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_IL_Modifiers is xxxxxxxxx.Instance Variables!!PLC_IL_Modifiers methodsFor: 'testing' stamp: 'EricPernia 5/1/2013 18:37'!isNullModifier	"Devuelve True si es un modificador Nulo "	^ false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_IL_Modifiers class	instanceVariableNames: ''!!PLC_IL_Modifiers class methodsFor: 'class initialization' stamp: 'EricPernia 7/15/2013 02:19'!initialize	super initialize.	InstancesCreated ifNil: [		InstancesCreated := false		].! !!PLC_IL_Modifiers class methodsFor: 'instance creation' stamp: 'EricPernia 9/1/2012 20:34'!CModifier	"Devuelve la única instancia de CModifier"		InstancesCreated ifFalse: [self createInstances].		^ Instances at: #CModifier! !!PLC_IL_Modifiers class methodsFor: 'instance creation' stamp: 'EricPernia 9/1/2012 20:34'!NModifier	"Devuelve la única instancia de NModifier"		InstancesCreated ifFalse: [self createInstances].		^ Instances at: #NModifier! !!PLC_IL_Modifiers class methodsFor: 'instance creation' stamp: 'EricPernia 9/1/2012 20:32'!NullModifier	"Devuelve la única instancia de NullModifier"		InstancesCreated ifFalse: [self createInstances].		^ Instances at: #NullModifier! !!PLC_IL_Modifiers class methodsFor: 'instance creation' stamp: 'EricPernia 9/1/2012 20:34'!ParenthesisModifier	"Devuelve la única instancia de ParenthesisModifier"		InstancesCreated ifFalse: [self createInstances].		^ Instances at: #ParenthesisModifier! !!PLC_IL_Modifiers class methodsFor: 'instance creation' stamp: 'EricPernia 9/1/2012 20:31'!clearInstances	"Borra las instancias únicas creadas."	Instances := Dictionary new.	InstancesCreated := false.	! !!PLC_IL_Modifiers class methodsFor: 'instance creation' stamp: 'EricPernia 9/1/2012 20:33'!createInstances	"Crea las instancias únicas."	Instances := Dictionary new.		Instances at: #NullModifier put: PLC_IL_NullModifier new.	Instances at: #NModifier put: PLC_IL_NModifier new.	Instances at: #CModifier put: PLC_IL_CModifier new.	Instances at: #ParenthesisModifier put: PLC_IL_ParenthesisModifier new.	InstancesCreated := true.! !PLC_IL_Modifiers subclass: #PLC_IL_CModifier	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_IL_CModifier commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_IL_CModifier is xxxxxxxxx.Instance Variables!!PLC_IL_CModifier methodsFor: 'as yet unclassified' stamp: 'EricPernia 9/18/2013 02:44'!cCompile	"Devuelve el string del código C del modificador"	^ 'C'.! !!PLC_IL_CModifier methodsFor: 'as yet unclassified' stamp: 'EricPernia 9/1/2012 17:58'!ilCompile	"Devuelve el string del código IL del modificador"	^ 'C'.! !Object subclass: #PLC_IL_Instruction	instanceVariableNames: 'label modifiers operands'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_IL_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_IL_Instruction is xxxxxxxxx.Instance Variables	label:		<Object>	modifiers:		<Object>	operands:		<Object>label	- xxxxxmodifiers	- xxxxxoperands	- xxxxx!!PLC_IL_Instruction methodsFor: 'initialize-release' stamp: 'EricPernia 7/28/2012 01:29'!initialize	"Inicializaciones"		self label: ''.	self modifiers: OrderedCollection new.	self operands: OrderedCollection new.	! !!PLC_IL_Instruction methodsFor: 'compilation' stamp: 'EricPernia 11/7/2013 23:18'!ilCompile	"Devuelve el string del código IL de la instrucción"		| ilCode |		self label = '' 		ifTrue:[			ilCode := '			' , self operator.			"Ej: 		 LD"			]		ifFalse: [			 ilCode := '		' , self label , ' ' , self operator.	"Ej: 		LABEL: LD"			]. 		self modifiers do: [ :each|		ilCode := ilCode , each ilCompile.		].									"Ej: 		LABEL: LDN"		self operands ifNotEmpty: [		ilCode := ilCode , ' ' , (self operands first ilCompile).				(2 to: operands size) do: [ :each|			ilCode := ilCode , ', ' , (self operands at: each) ilCompile.			].		]..									"Ej: 		LABEL: LDN %I0.0"		"ilCode := ilCode , ' ' , self comment."		"Ej: 		LABEL: LDN %I0.0    (* Comentario *)"		ilCode := ilCode , ''.		^ ilCode.! !!PLC_IL_Instruction methodsFor: 'simulation' stamp: 'EricPernia 7/28/2012 02:43'!executeOn: aPLC_CPU	"Ejecuta la instruccion en la CPU aPLC_CPU"		! !!PLC_IL_Instruction methodsFor: 'accessing' stamp: 'EricPernia 3/14/2012 18:20'!label	^ label! !!PLC_IL_Instruction methodsFor: 'accessing' stamp: 'EricPernia 3/14/2012 18:20'!label: anObject	label := anObject! !!PLC_IL_Instruction methodsFor: 'accessing' stamp: 'EricPernia 3/14/2012 18:20'!modifiers	^ modifiers! !!PLC_IL_Instruction methodsFor: 'accessing' stamp: 'EricPernia 3/14/2012 18:20'!modifiers: anObject	modifiers := anObject! !!PLC_IL_Instruction methodsFor: 'accessing' stamp: 'EricPernia 3/14/2012 18:20'!operands	^ operands! !!PLC_IL_Instruction methodsFor: 'accessing' stamp: 'EricPernia 3/14/2012 18:20'!operands: anObject	operands := anObject! !PLC_IL_Instruction subclass: #PLC_NOT_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_NOT_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_NOT_Instruction is xxxxxxxxx.Instance Variables!!PLC_NOT_Instruction methodsFor: 'simulation' stamp: 'EricPernia 6/13/2013 00:58'!executeOn: aPLC_CPU	"Ejecuta la instruccion en la CPU aPLC_CPU"		aPLC_CPU currentResult: self operator. ! !!PLC_NOT_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 11/5/2013 16:53'!cCompile	"Devuelve el string del código C de la instrucción"		| cCode operandDataType |		self operands ifNotEmpty: [		operandDataType := (self operands first dataType ilCompileDataType).		].	cCode := '		PLC_IL_' ,		self operator ,		 '( ' , 		operandDataType , 		');		// ', 		self ilCompile.	^ cCode.! !!PLC_NOT_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:00'!operator	"Operador de la instrucción"		^ 'NOT'.! !!PLC_NOT_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:00'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación de negacion bit a bit: 	currentResult := NOT currentResult'.! !PLC_IL_Instruction subclass: #PLC_ArithmeticAndComparisonInstructions	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_ArithmeticAndComparisonInstructions commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_ArithmeticAndComparisonInstructions is xxxxxxxxx.Instance Variables!!PLC_ArithmeticAndComparisonInstructions methodsFor: 'simulation' stamp: 'EricPernia 6/13/2013 00:41'!executeOn: aPLC_CPU	"Ejecuta la instruccion en la CPU aPLC_CPU"		aPLC_CPU currentResult: self operator. ! !!PLC_ArithmeticAndComparisonInstructions methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 16:52'!cCompile	"Devuelve el string del código C de la instrucción"		| cCode operand operandDataType |		self operands ifNotEmpty: [		operand := (self operands first cCompile).		operandDataType := (self operands first dataType cCompileDataType).		].		cCode := '		PLC_IL_' ,		self operator ,		 '( &(' , 		operand , 		'), ', 		operandDataType , 		');		// ', 		self ilCompile.	^ cCode.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_LE_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_LE_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LE_Instruction is xxxxxxxxx.Instance Variables!!PLC_LE_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:04'!operator	"Operador de la instrucción"		^ 'LE'.! !!PLC_LE_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:04'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación de comparación: 	currentResult := currentResult <= operand'.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_ADD_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_ADD_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_ADD_Instruction is xxxxxxxxx.Instance Variables!!PLC_ADD_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:05'!operator	"Operador de la instrucción"		^ 'ADD'.! !!PLC_ADD_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:05'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación aritmética: 	currentResult := currentResult + operand'.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_MUL_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_MUL_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_MUL_Instruction is xxxxxxxxx.Instance Variables!!PLC_MUL_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:06'!operator	"Operador de la instrucción"		^ 'MUL'.! !!PLC_MUL_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:06'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación aritmética: 	currentResult := currentResult * operand'.! !PLC_IL_Instruction subclass: #PLC_CAL_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_CAL_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_CAL_Instruction is xxxxxxxxx.Instance Variables!!PLC_CAL_Instruction methodsFor: 'compilation' stamp: 'EricPernia 6/13/2013 15:52'!ilCompile	"Compila el elemento IL Instruccion CAL (llamado a Bloque de Función) a IL	Devuelve:			CAL FB_InstanceName ( 			inputAssignment , 			inOutAssignment , 			outputAssignment , 			) 		Por ejemplo:			CAL CMD_TMR ( 			IN :=  ENT1 , 			PT := T#300ms ,			ENO => ERR , 			Q => OUT , 			ET => ELAPSED , 			) 	"		| pouCall |	pouCall := 'CAL	' , self instanceName , ' ( '.		self inputAssignments do: [ :each |		pouCall := pouCall , '		' , each ilCompile , ','.		].					self inOutAssignments do: [ :each |		pouCall := pouCall , '		' , each ilCompile , ','.		].					self outputAssignments do: [ :each |		pouCall := pouCall , '		' , each ilCompile , ','.		].		pouCall := pouCall , '		)'.		^ pouCall.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_LT_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_LT_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LT_Instruction is xxxxxxxxx.Instance Variables!!PLC_LT_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:03'!operator	"Operador de la instrucción"		^ 'LT'.! !!PLC_LT_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:03'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación de comparación: 	currentResult := currentResult < operand'.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_NE_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_NE_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_NE_Instruction is xxxxxxxxx.Instance Variables!!PLC_NE_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:01'!operator	"Operador de la instrucción"		^ 'NE'.! !!PLC_NE_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:01'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación de comparación: 	currentResult := currentResult <> operand'.! !PLC_IL_Instruction subclass: #PLC_ST_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_ST_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_ST_Instruction is xxxxxxxxx.Instance Variables!!PLC_ST_Instruction methodsFor: 'simulation' stamp: 'EricPernia 11/5/2013 16:53'!cCompile	"Devuelve el string del código C de la instrucción"		| cCode operand compiledModifiers |		compiledModifiers := ''.	self modifiers do: [ :each|		compiledModifiers := compiledModifiers , each cCompile.		].		self operands ifNotEmpty: [		operand := (self operands first cCompile).		].		cCode := '		PLC_IL_' ,		self operator ,		 '( &(' , 		operand , 		'), sizeof(', 		operand , 		'), ' , 		compiledModifiers , 		');		// ', 		self ilCompile.	^ cCode.! !!PLC_ST_Instruction methodsFor: 'simulation' stamp: 'EricPernia 7/28/2012 03:07'!executeOn: aPLC_CPU	"Ejecuta la instruccion en la CPU aPLC_CPU"		self operator: aPLC_CPU currentResult.! !!PLC_ST_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 7/28/2012 01:30'!operator	"Operador de la instrucción"		^ 'ST'.! !!PLC_ST_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 7/28/2012 02:30'!semantics	"Semantica de la instrucción"		^ 'Almacena el resultado actual en la ubicación operando: 			operand := currentResult'.! !PLC_IL_Instruction subclass: #PLC_StandarBody_Instruction	instanceVariableNames: 'cCode'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_StandarBody_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_StandarBody_Instruction is xxxxxxxxx.Instance Variables	cCode:		<Object>cCode	- xxxxx!!PLC_StandarBody_Instruction methodsFor: 'compilation' stamp: 'EricPernia 11/14/2013 14:45'!cCompile	"Devuelve el string del código C de la instrucción"		^ self cCode.	! !!PLC_StandarBody_Instruction methodsFor: 'compilation' stamp: 'EricPernia 11/14/2013 14:43'!operator	"Operador de la instrucción"		^ 'POU estandar, no se muestra su código.'.! !!PLC_StandarBody_Instruction methodsFor: 'compilation' stamp: 'EricPernia 11/14/2013 14:42'!semantics	"Semantica de la instrucción"		^ 'Instrucción que indica que es una POU estándar y por eso no se muestra su código.'.! !!PLC_StandarBody_Instruction methodsFor: 'accessing' stamp: 'EricPernia 11/14/2013 14:44'!cCode		^ cCode! !!PLC_StandarBody_Instruction methodsFor: 'accessing' stamp: 'EricPernia 11/14/2013 14:44'!cCode: anObject		cCode := anObject! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_DIV_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_DIV_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_DIV_Instruction is xxxxxxxxx.Instance Variables!!PLC_DIV_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:06'!operator	"Operador de la instrucción"		^ 'DIV'.! !!PLC_DIV_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:07'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación aritmética: 	currentResult := currentResult / operand'.! !PLC_IL_Modifiers subclass: #PLC_IL_ParenthesisModifier	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_IL_ParenthesisModifier commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_IL_ParenthesisModifier is xxxxxxxxx.Instance Variables!PLC_TextualPOUCall subclass: #PLC_TextualFunctionCall	instanceVariableNames: 'returnAssignment'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_TextualFunctionCall commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_TextualFunctionCall is xxxxxxxxx.Instance Variables	returnAssignment:		<Object>returnAssignment	- xxxxx!!PLC_TextualFunctionCall methodsFor: 'compilation' stamp: 'EricPernia 11/17/2013 13:44'!cCompile	"Compila el elemento IL llamado a función a lenguaje C.	Devuelve:			inputAssignment;		inOutAssignment;		cPOUName( &instanceName ); 					outputAssignment; 		Por ejemplo:			// Cargo los parametros VAR_INPUT y VAR_IN_OUT del 		// CTU_INT contador1 con sus variables conectadas		// en su estructura.				contador1.CU = varBool1 ;		contador1.R = varBool2 ;		contador1.PV = varInt1 ;								// Llamo a la función pasandole la estructura por referencia				PLC_FB_CTU_INT( &contador1 );									// Cargo las variables conectadas con los parametros VAR_OUTPUT del CTU_INT contador1		// de en su estructura.			varBool3 = contador1.Q;			varInt2 = contador1.CV;		"		| cCode |		cCode := '			'.	self inputAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].				self inOutAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].		cCode := cCode , '			' , self cPOUName , 		'( &pxPOU->',		 self instanceName ,		 ' );				'.				self outputAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].		( self returnAssignment cCompile ~= '' )		ifTrue: [ 			cCode := cCode , '		' , self returnAssignment cCompile , ';'.			].				cCode := cCode , ''.				^ cCode.			! !!PLC_TextualFunctionCall methodsFor: 'compilation' stamp: 'EricPernia 11/15/2013 13:18'!ilCompile	"Compila el elemento IL llamado a función a lenguaje C.		Devuelve:			functionName ( 			inputAssignment , 			inOutAssignment , 			outputAssignment , 			) 		Por ejemplo:			ADD_INT ( 			EN := CR , 			IN1 := 10 ,			IN2 := 2 , 			ENO => FLUX , 			) 		Nota: el RetVal se asigna al Current Result de la forma		RetVal => CR.tipoDeRetValDeLaF			"		| pouCall |	pouCall := '	' , self pouName , '( '.		self inputAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].				self inOutAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].				self outputAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].			pouCall := pouCall , '		)'.		^ pouCall.			! !!PLC_TextualFunctionCall methodsFor: 'accessing' stamp: 'EricPernia 11/16/2013 15:46'!returnAssignment		^ returnAssignment! !!PLC_TextualFunctionCall methodsFor: 'accessing' stamp: 'EricPernia 11/16/2013 15:46'!returnAssignment: anObject		returnAssignment := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_TextualFunctionCall class	instanceVariableNames: ''!!PLC_TextualFunctionCall class methodsFor: 'instance creation' stamp: 'EricPernia 11/16/2013 16:25'!newFromDeclaration: pouDeclaration andInstanceOperand: inst	"Crea un nuevo llamado IL a partir de la declaración pouDeclaration."	| pouCall |		pouCall := self new.		pouCall declaration: pouDeclaration.	pouCall instanceOperand: inst.	pouDeclaration inputVarDecls do: [ :each | 		pouCall inputAssignments add: 			( PLC_InputAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOpenad new				andPouCall: pouCall			).		].	pouDeclaration inOutVarDecls do: [ :each | 		pouCall inOutAssignments add: 			( PLC_InOutAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOpenad new				andPouCall: pouCall			).		].	pouDeclaration outputVarDecls do: [ :each | 		pouCall outputAssignments add: 			( PLC_OutputAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOpenad new				andPouCall: pouCall			).		].	pouCall returnAssignment: ( 		PLC_OutputAssignment			newWithFormalParameter: pouDeclaration return			andActtualArgument: PLC_VoidOpenad new			andPouCall: pouCall		).		^ pouCall.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_GE_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_GE_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_GE_Instruction is xxxxxxxxx.Instance Variables!!PLC_GE_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:03'!operator	"Operador de la instrucción"		^ 'GE'.! !!PLC_GE_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:03'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación de comparación: 	currentResult := currentResult >= operand'.! !PLC_TextualPOUCall subclass: #PLC_TextualFunctionBlockCall	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_TextualFunctionBlockCall commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_TextualFunctionBlockCall is xxxxxxxxx.Instance Variables!!PLC_TextualFunctionBlockCall methodsFor: 'compilation' stamp: 'EricPernia 11/18/2013 17:20'!cCompile	"Compila el elemento IL llamado a función a lenguaje C.	Devuelve:			inputAssignment;		inOutAssignment;		cPOUName( &instanceName ); 					outputAssignment; 		Por ejemplo:			// Cargo los parametros VAR_INPUT y VAR_IN_OUT del 		// CTU_INT contador1 con sus variables conectadas		// en su estructura.				contador1.CU = varBool1 ;		contador1.R = varBool2 ;		contador1.PV = varInt1 ;								// Llamo a la función pasandole la estructura por referencia				PLC_FB_CTU_INT( &contador1 );									// Cargo las variables conectadas con los parametros VAR_OUTPUT del CTU_INT contador1		// de en su estructura.			varBool3 = contador1.Q;			varInt2 = contador1.CV;		"		| cCode |		cCode := '			'.	self inputAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].				self inOutAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].		cCode := cCode , '			' , self cPOUName , 		'( &pxPOU->',		 self instanceName ,		 ' );				'.				self outputAssignments do: [ :each |		( each cCompile ~= '' )			ifTrue: [ 				cCode := cCode , '		' , each cCompile , ';'.				].		].				cCode := cCode , ''.				^ cCode.			! !!PLC_TextualFunctionBlockCall methodsFor: 'compilation' stamp: 'EricPernia 11/18/2013 17:19'!ilCompile	"Compila el elemento IL Instruccion CAL (llamado a Bloque de Función) a IL	Devuelve:			CAL FB_InstanceName ( 			inputAssignment , 			inOutAssignment , 			outputAssignment , 			) 		Por ejemplo:			CAL CMD_TMR ( 			IN :=  ENT1 , 			PT := T#300ms ,			ENO => ERR , 			Q => OUT , 			ET => ELAPSED , 			) 	"		| pouCall |	pouCall := '		CAL ' , self instanceName , ' ( '.			self inputAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].				self inOutAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].				self outputAssignments do: [ :each |		( each ilCompile ~= '' )			ifTrue: [ 				pouCall := pouCall , '				' , each ilCompile , ','.				].		].			pouCall := pouCall , '		)'.		^ pouCall.			! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_SUB_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_SUB_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_SUB_Instruction is xxxxxxxxx.Instance Variables!!PLC_SUB_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:05'!operator	"Operador de la instrucción"		^ 'SUB'.! !!PLC_SUB_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:05'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación aritmética: 	currentResult := currentResult - operand'.! !PLC_IL_Instruction subclass: #PLC_SetAndReset	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_SetAndReset commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_SetAndReset is xxxxxxxxx.Instance Variables!!PLC_SetAndReset methodsFor: 'simulation' stamp: 'EricPernia 6/13/2013 01:09'!executeOn: aPLC_CPU	"Ejecuta la instruccion en la CPU aPLC_CPU"		aPLC_CPU currentResult: self operator. ! !!PLC_SetAndReset methodsFor: 'as yet unclassified' stamp: 'EricPernia 11/5/2013 16:53'!cCompile	"Devuelve el string del código C de la instrucción"		| cCode operand |		self operands ifNotEmpty: [		operand := (self operands first cCompile).		].		cCode := '		PLC_IL_' ,		self operator ,		 '( &(' , 		operand , 		') );		// ', 		self ilCompile.	^ cCode.! !PLC_SetAndReset subclass: #PLC_R_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_R_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_R_Instruction is xxxxxxxxx.Instance Variables!!PLC_R_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:11'!operator	"Operador de la instrucción"		^ 'R'.! !!PLC_R_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:11'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación RESET: 	currentResult := FALSE'.! !PLC_SetAndReset subclass: #PLC_S_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_S_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_S_Instruction is xxxxxxxxx.Instance Variables!!PLC_S_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:10'!operator	"Operador de la instrucción"		^ 'S'.! !!PLC_S_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:10'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación SET: 	currentResult := TRUE'.! !PLC_IL_Instruction subclass: #PLC_LD_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_LD_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LD_Instruction is xxxxxxxxx.Instance Variables!!PLC_LD_Instruction methodsFor: 'simulation' stamp: 'EricPernia 7/28/2012 02:45'!executeOn: aPLC_CPU	"Ejecuta la instruccion en la CPU aPLC_CPU"		aPLC_CPU currentResult: self operator. ! !!PLC_LD_Instruction methodsFor: 'compilation' stamp: 'EricPernia 11/17/2013 07:28'!cCompile	"Devuelve el string del código C de la instrucción"		| cCode operand operandDataType compiledModifiers |		compiledModifiers := ''.	self modifiers do: [ :each|		compiledModifiers := compiledModifiers , each cCompile.		].		self operands ifNotEmpty: [		operand := (self operands first cCompile).				operandDataType := (self operands first dataType ilCompileDataType). "ACA VA ilCompileDataType SI NO COMPILA MAL POR LO QUE REQUIERE LA INSTRUCCION"		].		"Compila en C segun si es literal u otra cosa"	self operands first isPLCLiteral 		ifTrue: [ 			"void PLC_IL_LD_BOOL_Literal( PLC_BOOL, PLC_EnumModifiers);			void PLC_IL_LD_INT_Literal( PLC_INT, PLC_EnumModifiers);"			cCode := '		PLC_IL_' ,				self operator ,				'_' ,				operandDataType, 				'_Literal( ', 				operand , 				', ', 				compiledModifiers , 				');		// ', 				self ilCompile.			]		ifFalse: [			"PLC_IL_LD( &varName, sizeof(varName), varType, modifier);			Ejemplo:			PLC_IL_LD( &sint1, sizeof(sint1), SINT, NullModifier);			"						cCode := '		PLC_IL_' ,				self operator ,				 '( &(' , 				operand , 				'), sizeof(', 				operand , 				'), ' , 				operandDataType , 				', ' , 				compiledModifiers , 				');		// ', 				self ilCompile.			].	^ cCode.! !!PLC_LD_Instruction methodsFor: 'compilation' stamp: 'EricPernia 7/28/2012 02:29'!operator	"Operador de la instrucción"		^ 'LD'.! !!PLC_LD_Instruction methodsFor: 'compilation' stamp: 'EricPernia 7/28/2012 02:34'!semantics	"Semantica de la instrucción"		^ 'Almacena el operando en el acumulador resultado actual: 			currentResult := operand'.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_EQ_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_EQ_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_EQ_Instruction is xxxxxxxxx.Instance Variables!!PLC_EQ_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 00:56'!operator	"Operador de la instrucción"		^ 'EQ'.! !!PLC_EQ_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 00:56'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación de comparación: 	currentResult := currentResult == operand'.! !PLC_IL_Modifiers subclass: #PLC_IL_NModifier	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_IL_NModifier commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_IL_NModifier is xxxxxxxxx.Instance Variables!!PLC_IL_NModifier methodsFor: 'compile' stamp: 'EricPernia 9/10/2012 00:27'!cCompile	"Devuelve el string del código IL del modificador"	^ 'N'.! !!PLC_IL_NModifier methodsFor: 'compile' stamp: 'EricPernia 9/1/2012 17:58'!ilCompile	"Devuelve el string del código IL del modificador"	^ 'N'.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_GT_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_GT_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_GT_Instruction is xxxxxxxxx.Instance Variables!!PLC_GT_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:02'!operator	"Operador de la instrucción"		^ 'GT'.! !!PLC_GT_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:02'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación de comparación: 	currentResult := currentResult > operand'.! !PLC_ArithmeticAndComparisonInstructions subclass: #PLC_MOD_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_MOD_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_MOD_Instruction is xxxxxxxxx.Instance Variables!!PLC_MOD_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:07'!operator	"Operador de la instrucción"		^ 'MOD'.! !!PLC_MOD_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 01:08'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación aritmética: 	currentResult := resto de la division entera ( currentResult / operand )'.! !PLC_IL_Modifiers subclass: #PLC_IL_NullModifier	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_IL_NullModifier commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_IL_NullModifier is xxxxxxxxx.Instance Variables!!PLC_IL_NullModifier methodsFor: 'compile' stamp: 'EricPernia 11/4/2012 01:05'!cCompile	"Devuelve el string del código IL del modificador"	^ 'NullModifier'.! !!PLC_IL_NullModifier methodsFor: 'compile' stamp: 'EricPernia 9/1/2012 20:23'!ilCompile	"Devuelve el string del código IL del modificador"	^ ''.! !!PLC_IL_NullModifier methodsFor: 'testing' stamp: 'EricPernia 5/1/2013 18:45'!isNullModifier	"Devuelve True si es un modificador Nulo "	^ true.! !PLC_IL_Instruction subclass: #PLC_LogicalInstructions	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_LogicalInstructions commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LogicalInstructions is xxxxxxxxx.Instance Variables!!PLC_LogicalInstructions methodsFor: 'simulation' stamp: 'EricPernia 2/19/2014 00:04'!executeOn: aPLC_CPU	"Ejecuta la instruccion en la CPU aPLC_CPU"		aPLC_CPU currentResult: ( aPLC_CPU currentResult operateWith: self operator). ! !!PLC_LogicalInstructions methodsFor: 'as yet unclassified' stamp: 'EricPernia 11/5/2013 16:52'!cCompile	"Devuelve el string del código C de la instrucción"		| cCode operand operandDataType compiledModifiers |		compiledModifiers := ''.	self modifiers do: [ :each|		compiledModifiers := compiledModifiers , each cCompile.		].		self operands ifNotEmpty: [		operand := (self operands first cCompile).		operandDataType := (self operands first dataType ilCompileDataType).		].	cCode := '		PLC_IL_' ,		self operator ,		 '( &(' , 		operand , 		'), ', 		operandDataType , 		', ' , 		compiledModifiers , 		');		// ', 		self ilCompile.	^ cCode.! !PLC_LogicalInstructions subclass: #PLC_AND_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_AND_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AND_Instruction is xxxxxxxxx.Instance Variables!!PLC_AND_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/7/2012 15:33'!operator	"Operador de la instrucción"		^ 'AND'.! !!PLC_AND_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 00:52'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación Y (AND) lógica: 	currentResult := currentResult AND operand'.! !PLC_LogicalInstructions subclass: #PLC_XOR_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_XOR_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_XOR_Instruction is xxxxxxxxx.Instance Variables!!PLC_XOR_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 00:57'!operator	"Operador de la instrucción"		^ 'XOR'.! !!PLC_XOR_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 00:57'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación O exclusiva (XOR) lógica: 	currentResult := currentResult XOR operand'.! !PLC_LogicalInstructions subclass: #PLC_OR_Instruction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-IL'!!PLC_OR_Instruction commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_OR_Instruction is xxxxxxxxx.Instance Variables!!PLC_OR_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/7/2012 16:24'!operator	"Operador de la instrucción"		^ 'OR'.! !!PLC_OR_Instruction methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/13/2013 00:52'!semantics	"Semantica de la instrucción"		^ 'Realiza la operación O (OR) lógica: 	currentResult := currentResult OR operand'.! !PLC_IL_Modifiers initialize!