"Copyright © 2012-2014 Eric Nicolás Pernia.This file is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>."Object subclass: #PLC_GraphicElementProperties	instanceVariableNames: 'scale drawLayoutRectangle drawBounds drawGrid drawTextLineBorder'	classVariableNames: 'Instance'	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_GraphicElementProperties commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_GraphicElementProperties is xxxxxxxxx.Instance Variables	drawBounds:		<Object>	drawGrid:		<Object>	drawLayoutRectangle:		<Object>	drawTextLineBorder:		<Object>	scale:		<Object>drawBounds	- xxxxxdrawGrid	- xxxxxdrawLayoutRectangle	- xxxxxdrawTextLineBorder	- xxxxxscale	- xxxxx!!PLC_GraphicElementProperties methodsFor: 'informativeBlockColors' stamp: 'EricPernia 4/18/2012 09:40'!informativeBlockBorderColor	"Color de borde de cuadro informativo "	^Color r: 1 g: 248/255 b:161 /255. "Color r: 1.0 g: 0.973 b: 0.631"! !!PLC_GraphicElementProperties methodsFor: 'informativeBlockColors' stamp: 'EricPernia 4/22/2012 03:28'!informativeBlockColor	"Color del cuadro informativo. " 	^Color r: 224/255 g: 219/255 b: 80/255. "Color r: 0.879 g: 0.859 b: 0.314"! !!PLC_GraphicElementProperties methodsFor: 'EditableGridColors' stamp: 'EricPernia 11/17/2013 04:19'!rowColorEven	 "Es color de fondo de fila par en la EditableGrid."	^ Color r: 243/255 g: 243/255 b: 244/255! !!PLC_GraphicElementProperties methodsFor: 'EditableGridColors' stamp: 'EricPernia 11/17/2013 04:27'!rowColorHeader	 "Es color verde claro de la cabecera de la caja de funcion."	^ Color r: 96/255 g: 96/255 b: 98/255! !!PLC_GraphicElementProperties methodsFor: 'EditableGridColors' stamp: 'EricPernia 11/17/2013 04:19'!rowColorOdd	 "Es color de fondo de fila impar en la EditableGrid."	^ Color white! !!PLC_GraphicElementProperties methodsFor: 'EditableGridColors' stamp: 'EricPernia 11/17/2013 04:17'!rowColorSelected	 "Es color de fondo de fila cuando esta seleccionada en la EditableGrid."	^ Color r: 175/255 g: 213/255 b: 250/255! !!PLC_GraphicElementProperties methodsFor: 'Project colors' stamp: 'EricPernia 1/30/2014 00:22'!hardConfigColor	 "Es color Azul claro de la barra de titulo de Configuracion	 de Hardware la ventada de proyecto."	^ Color r: 89/255 g: 131/255 b: 219/255! !!PLC_GraphicElementProperties methodsFor: 'Project colors' stamp: 'EricPernia 1/30/2014 00:24'!projectColor	 "Es color Azul oscuro de la barra de titulo de Proyecto de 	Automatizacion de la ventada de proyecto."	^ Color r: 51/255 g: 102/255 b: 211/255! !!PLC_GraphicElementProperties methodsFor: 'POU colors' stamp: 'EricPernia 11/17/2013 04:09'!functionBlockColor	 "Es color cian de la caja de bloque de funcion."	^ Color r: 0 g: 175/255 b: 239/255! !!PLC_GraphicElementProperties methodsFor: 'POU colors' stamp: 'EricPernia 11/17/2013 04:09'!functionBlockHeaderColor	 "Es color cian claro de la cabecera de la caja de bloque de funcion."	^ Color r: 82/255 g: 201/255 b: 244/255! !!PLC_GraphicElementProperties methodsFor: 'POU colors' stamp: 'EricPernia 11/17/2013 04:09'!functionColor	 "Es color verde oscuro de la caja de funcion."	^ Color r: 0 g: 168/255 b: 89/255! !!PLC_GraphicElementProperties methodsFor: 'POU colors' stamp: 'EricPernia 11/17/2013 04:09'!functionHeaderColor	 "Es color verde claro de la cabecera de la caja de funcion."	^ Color r: 121/255 g: 193/255 b: 78/255! !!PLC_GraphicElementProperties methodsFor: 'POU colors' stamp: 'EricPernia 11/17/2013 04:10'!programColor	 "Es color dorado oscuro de la caja de funcion."	^ Color r: 210/255 g: 174/255 b: 109/255! !!PLC_GraphicElementProperties methodsFor: 'POU colors' stamp: 'EricPernia 11/17/2013 04:10'!programHeaderColor	 "Es color dorado claro de la cabecera de la caja de bloque de funcion."	^ Color r: 223/255 g: 190/255 b: 98/255! !!PLC_GraphicElementProperties methodsFor: 'unselectedColors' stamp: 'EricPernia 4/22/2012 02:41'!unselectedBackgroundColor	"Color de fondo de contactos, bobinas y de variables (actual value).	Se aplica cuando está deseleccionado. Es el color por defecto del elemento."			^Color white.! !!PLC_GraphicElementProperties methodsFor: 'unselectedColors' stamp: 'EricPernia 4/22/2012 02:41'!unselectedBlockBodyColor	"Color de cuerpo del bloque.	Se aplica cuando está deseleccionado. Es el color por defecto del elemento."		^Color r: 223/255 g: 224/255 b: 232/255. "Color r: 0.875 g: 0.879 b: 0.91"! !!PLC_GraphicElementProperties methodsFor: 'unselectedColors' stamp: 'EricPernia 4/22/2012 02:40'!unselectedBlockFootAndHeaderColor	"Color de cabecera y pie del bloque.		Se aplica cuando está deseleccionado. Es el color por defecto del elemento."		^Color r: 202/255 g: 204/255 b: 217/255. "Color r: 0.792 g: 0.8 b: 0.851" "Color de bloque gris oscuro"! !!PLC_GraphicElementProperties methodsFor: 'unselectedColors' stamp: 'EricPernia 5/15/2012 14:31'!unselectedElementColor	"Color de los contactos, bobinas y del texto (actual value).	Se aplica cuando está deseleccionado. Es el color por defecto del elemento."		^Color black.! !!PLC_GraphicElementProperties methodsFor: 'styles' stamp: 'EricPernia 6/14/2012 05:14'!centerUnderlineStyleWithColor: aColor andOrigin: anOrigin andDirection: aDirection	"Estilo del Morph subrrayado de la etiqueta. Tiene un color degradado."		^ (GradientFillStyle 	ramp: { 		0.0 -> aColor.		0.5 -> Color white.		1.0 -> aColor. })			origin: anOrigin;			direction: aDirection;			normal: 0@400;			radial: false.	! !!PLC_GraphicElementProperties methodsFor: 'styles' stamp: 'EricPernia 4/18/2012 09:33'!dashBorderSize	"Espesor del borde de linea guionada"		^ 1.! !!PLC_GraphicElementProperties methodsFor: 'styles' stamp: 'EricPernia 4/20/2012 00:52'!dashColors	"Colores de la linea guionada"		^ {	self dashBorderColor1. 		self dashBorderColor2.}! !!PLC_GraphicElementProperties methodsFor: 'styles' stamp: 'EricPernia 4/18/2012 09:32'!dashLengths	"Longitudes de los guiones de la linea guionada"		^ #(1 1). ! !!PLC_GraphicElementProperties methodsFor: 'styles' stamp: 'EricPernia 6/14/2012 05:06'!leftUnderlineStyleWithColor: aColor andOrigin: anOrigin andDirection: aDirection	"Estilo del Morph subrrayado de la etiqueta. Tiene un color degradado."		^ (GradientFillStyle 	ramp: { 		0.0 -> Color white.		1.0 -> aColor})			origin: anOrigin;			direction: aDirection;			normal: 0@1300;			radial: false.	! !!PLC_GraphicElementProperties methodsFor: 'styles' stamp: 'EricPernia 6/14/2012 05:11'!rightUnderlineStyleWithColor: aColor andOrigin: anOrigin andDirection: aDirection	"Estilo del Morph subrrayado de la etiqueta. Tiene un color degradado."		^ (GradientFillStyle 	ramp: { 		0.0 -> aColor.		1.0 -> Color white})			origin: anOrigin;			direction: aDirection;			normal: 0@400;			radial: false.	! !!PLC_GraphicElementProperties methodsFor: 'draggingSelfColors' stamp: 'EricPernia 5/22/2012 01:38'!draggingSelfBackgroundColor	"Color de fondo de contactos, bobinas y de variables (actual value).	Se aplica cuando el mouse está arrastrando al elemento.	Idem unselected pero agrega transparencia del 50% (alpha:0.5)"				^ self unselectedBackgroundColor alpha: 0.5.! !!PLC_GraphicElementProperties methodsFor: 'draggingSelfColors' stamp: 'EricPernia 5/22/2012 01:40'!draggingSelfBlockBodyColor	"Color de cuerpo del bloque.	Se aplica cuando el mouse está arrastrando al elemento.	Idem unselected pero agrega transparencia del 50% (alpha:0.5)"			^ self unselectedBlockBodyColor alpha: 0.5.! !!PLC_GraphicElementProperties methodsFor: 'draggingSelfColors' stamp: 'EricPernia 5/22/2012 01:40'!draggingSelfBlockFootAndHeaderColor	"Color de cabecera y pie del bloque.	Se aplica cuando el mouse está arrastrando al elemento.	Idem unselected pero agrega transparencia del 50% (alpha:0.5)"				^ self unselectedBlockFootAndHeaderColor alpha: 0.5.! !!PLC_GraphicElementProperties methodsFor: 'draggingSelfColors' stamp: 'EricPernia 5/22/2012 01:40'!draggingSelfElementColor	"Color de los contactos, bobinas y del texto (actual value).	Se aplica cuando el mouse está arrastrando al elemento.	Idem unselected pero agrega transparencia del 50% (alpha:0.5)"		^ self unselectedElementColor alpha: 0.5.! !!PLC_GraphicElementProperties methodsFor: 'textColors' stamp: 'EricPernia 4/22/2012 04:37'!actualValueAddressColor	"Color de la dirección de memoria de las variables no simbólicas."	^Color r: 0 g: 153/255 b: 153/255. " (Color r: 0.0 g: 0.6 b: 0.6)"! !!PLC_GraphicElementProperties methodsFor: 'textColors' stamp: 'EricPernia 4/22/2012 02:59'!actualValueErrorColor	"Color de variable (actual value) con error."	^Color red.! !!PLC_GraphicElementProperties methodsFor: 'textColors' stamp: 'EricPernia 4/22/2012 04:44'!actualValueLiteralColor	"Color de variable (actual value) cuando se le ingresa un literal"	^Color r: 51/255 g: 102/255 b: 211/255. " (Color r: 0.2 g: 0.4 b: 0.827)"! !!PLC_GraphicElementProperties methodsFor: 'textColors' stamp: 'EricPernia 4/22/2012 02:57'!actualValueNotDefinedColor	"Color de variable (actual value) no definida"	^Color r: 1 g: 37/255 b: 87/255. " (Color r: 1.0 g: 0.145 b: 0.341)"! !!PLC_GraphicElementProperties methodsFor: 'textColors' stamp: 'EricPernia 4/22/2012 03:07'!formalArgumentBackgroundColor	"Color de fondo de la variable (formal argument). Color transparente."	^Color white alpha: 1.0.! !!PLC_GraphicElementProperties methodsFor: 'draggingAnotherColors' stamp: 'EricPernia 4/21/2012 19:07'!draggingAnotherBackgroundColor	"Color de fondo de contactos, bobinas y de variables (actual value).	Se aplica cuando estaba seleccionado y el mouse está arrastrando a otro elemento."	^Color r: 136/255 g: 143/255 b: 158/255. "Color r: 0.534 g: 0.561 b: 0.62"! !!PLC_GraphicElementProperties methodsFor: 'draggingAnotherColors' stamp: 'EricPernia 4/21/2012 19:09'!draggingAnotherBlockBodyColor	"Color de cuerpo del bloque.	Se aplica cuando estaba seleccionado y el mouse está arrastrando a otro elemento."		^Color r: 136/255 g: 143/255 b: 158/255. "Color r: 0.534 g: 0.561 b: 0.62"! !!PLC_GraphicElementProperties methodsFor: 'draggingAnotherColors' stamp: 'EricPernia 4/21/2012 19:10'!draggingAnotherBlockFootAndHeaderColor	"Color de cabecera y pie del bloque.		Se aplica cuando estaba seleccionado y el mouse está arrastrando a otro elemento."			^Color r: 202/255 g: 204/255 b: 217/255. "(Color r: 0.792 g: 0.8 b: 0.851)"! !!PLC_GraphicElementProperties methodsFor: 'draggingAnotherColors' stamp: 'EricPernia 5/15/2012 14:30'!draggingAnotherElementColor	"Color de los contactos, bobinas y del texto (actual value).	Se aplica cuando estaba seleccionado y el mouse está arrastrando a otro elemento."		^Color white.! !!PLC_GraphicElementProperties methodsFor: 'otherColors' stamp: 'EricPernia 7/15/2012 03:45'!booleanVariablePinColor	 "Es el pin que solo acepta variables booleanas."	^Color black.! !!PLC_GraphicElementProperties methodsFor: 'otherColors' stamp: 'EricPernia 4/21/2012 19:26'!changeFunctionColor	"Color del triangulito para cambiar la funcion o tipo de dato."	^Color yellow. ! !!PLC_GraphicElementProperties methodsFor: 'otherColors' stamp: 'EricPernia 4/18/2012 09:26'!dashBorderColor1	 "Color dash oscuro"	^Color r: 128/255 g: 128/255 b: 128/255. "Color r: 0.502 g: 0.502 b: 0.502"! !!PLC_GraphicElementProperties methodsFor: 'otherColors' stamp: 'EricPernia 4/18/2012 09:27'!dashBorderColor2	 "Color dash claro"	^Color r: 61/255 g: 69/255 b: 89/255. "Color r: 0.239 g: 0.271 b: 0.349)"! !!PLC_GraphicElementProperties methodsFor: 'otherColors' stamp: 'EricPernia 4/21/2012 19:27'!mouseOverColor	  "Color que se aplica cuando el mouse se posa sobre el elemento"	^Color r: 195/255 g: 215/255 b: 235/255 alpha: 0.5. "TranslucentColor r: 0.764 g: 0.844 b: 0.922 alpha: 0.498"! !!PLC_GraphicElementProperties methodsFor: 'otherColors' stamp: 'EricPernia 7/15/2012 03:45'!nonBooleanVariablePinColor	 "Es el pin que solo acepta variables no booleanas."	^Color r: 1 g: 164/255 b: 0.  "Color dorado  (Color r: 1.0 g: 0.643 b: 0.0)"! !!PLC_GraphicElementProperties methodsFor: 'otherColors' stamp: 'EricPernia 5/16/2012 00:25'!voidStateColor	  "Color que se aplica en el estado vacio. Color transparente"	^Color r: 1 g: 1 b: 1 alpha: 0.! !!PLC_GraphicElementProperties methodsFor: 'initialize-release' stamp: 'EricPernia 4/22/2013 01:02'!initialize	"Inicializa las propiedades"	self scale: (1@1).	self drawBounds: false.	self drawGrid: false.	self drawTextLineBorder: false.	self drawLayoutRectangle: false.! !!PLC_GraphicElementProperties methodsFor: 'grid' stamp: 'EricPernia 4/21/2013 11:47'!gridExtent	"Devuelve el tamaño en pixeles de una celda de la grilla gris."		^ ( 96 @ 18 ).! !!PLC_GraphicElementProperties methodsFor: 'grid' stamp: 'EricPernia 4/21/2013 11:47'!gridOrigin	"Devuelve la posicion 0@0 de la grilla"	^ ( 20 @ 20 ).! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 4/22/2013 00:55'!drawBounds	^ drawBounds! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 4/22/2013 00:55'!drawBounds: anObject	drawBounds := anObject! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 9/2/2012 19:24'!drawGrid	^ drawGrid! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 9/2/2012 19:24'!drawGrid: anObject	drawGrid := anObject! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 4/22/2013 01:00'!drawLayoutRectangle	^ drawLayoutRectangle! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 4/22/2013 01:01'!drawLayoutRectangle: anObject	drawLayoutRectangle := anObject! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 7/10/2012 00:18'!drawTextLineBorder	^ drawTextLineBorder! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 7/10/2012 00:18'!drawTextLineBorder: anObject	drawTextLineBorder := anObject! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 4/11/2012 21:46'!scale	^ scale! !!PLC_GraphicElementProperties methodsFor: 'accessing' stamp: 'EricPernia 4/11/2012 21:46'!scale: anObject	scale := anObject! !!PLC_GraphicElementProperties methodsFor: 'insertionPointColors' stamp: 'EricPernia 5/16/2012 00:32'!overDropAreaInsertionPointBackgroundColor	 "Color de fondo del area de drop que se encuentra tras el cuadradito 	que representa el punto de inserción."	^Color red alpha: 0.5.! !!PLC_GraphicElementProperties methodsFor: 'insertionPointColors' stamp: 'EricPernia 5/15/2012 16:08'!overDropAreaInsertionPointBorderColor	 "Color de borde del cuadradito que representa el punto de inserción. Se aplica cuando el 	mouse viene arrastrando un elemento y pasa sobre el área de drop, que es un área 	alrededor del cuadradito que simboliza el punto de inserción."	^Color black.! !!PLC_GraphicElementProperties methodsFor: 'insertionPointColors' stamp: 'EricPernia 5/15/2012 16:09'!overDropAreaInsertionPointColor	 "Color del cuadradito que representa el punto de inserción. Se aplica cuando el mouse 	viene arrastrando un elemento y pasa sobre el área de drop, que es un área al rededor 	del cuadradito que simboliza el punto de inserción."	^Color green.! !!PLC_GraphicElementProperties methodsFor: 'insertionPointColors' stamp: 'EricPernia 5/16/2012 00:33'!underDragAreaInsertionPointBackgroundColor	 "Color de fondo del area de drop que se encuentra tras el cuadradito 	que representa el punto de inserción."	^Color green alpha: 0.5.! !!PLC_GraphicElementProperties methodsFor: 'insertionPointColors' stamp: 'EricPernia 5/22/2012 20:44'!underDragAreaInsertionPointBorderColor	"Color de borde del cuadradito que representa el punto de inserción. Se aplica cuando está bajo 	el área de Dragg al rededor del mouse mientras el mouse viene arrastrando un elemento"	^Color r: 119/255 g: 136/255 b: 153/255." (Color r: 0.466 g: 0.534 b: 0.6)"! !!PLC_GraphicElementProperties methodsFor: 'insertionPointColors' stamp: 'EricPernia 5/22/2012 20:44'!underDragAreaInsertionPointColor	"Color del cuadradito que representa el punto de inserción. Se aplica cuando está bajo 	el área de Dragg al rededor del mouse mientras el mouse viene arrastrando un elemento"	^ Color r: 218/255 g: 233/255 b: 254/255." (Color r: 0.855 g: 0.534 b: 0.996)"! !!PLC_GraphicElementProperties methodsFor: 'selectedColors' stamp: 'EricPernia 4/21/2012 19:06'!selectedBackgroundColor	"Color de fondo de contactos, bobinas y de variables (actual value).	Se aplica cuando está seleccionado."		^Color r: 51/255 g: 102/255 b: 211/255.  " (Color r: 0.2 g: 0.4 b: 0.827)"! !!PLC_GraphicElementProperties methodsFor: 'selectedColors' stamp: 'EricPernia 4/21/2012 19:05'!selectedBlockBodyColor	"Color de cuerpo del bloque.	Se aplica cuando está seleccionado."	^Color r: 51/255 g: 102/255 b: 211/255.  " (Color r: 0.2 g: 0.4 b: 0.827)"! !!PLC_GraphicElementProperties methodsFor: 'selectedColors' stamp: 'EricPernia 4/21/2012 19:06'!selectedBlockFootAndHeaderColor	"Color de cabecera y pie del bloque.	Se aplica cuando está seleccionado."	^Color r: 134/255 g: 164/255 b: 229/255. " (Color r: 0.526 g: 0.643 b: 0.898)" ! !!PLC_GraphicElementProperties methodsFor: 'selectedColors' stamp: 'EricPernia 5/15/2012 14:30'!selectedElementColor	"Color de los contactos, bobinas y del texto (actual value).	Se aplica cuando está seleccionado."		^Color white.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_GraphicElementProperties class	instanceVariableNames: ''!!PLC_GraphicElementProperties class methodsFor: 'instance creation' stamp: 'EricPernia 4/21/2012 03:31'!clearInstance 	"Devuelve la unica instancia de esta clase."	Instance ifNotNil: 		[		Instance := nil.		].! !!PLC_GraphicElementProperties class methodsFor: 'instance creation' stamp: 'EricPernia 4/11/2012 21:55'!uniqueInstance 	"Devuelve la unica instancia de esta clase."	Instance ifNil: 		[		Instance := PLC_GraphicElementProperties new.		].		^ Instance.! !Object subclass: #PLC_GraphicElementGroup	instanceVariableNames: 'elements'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_GraphicElementGroup commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_GraphicElementGroup is xxxxxxxxx.Instance Variables	elements:		<Object>elements	- xxxxx!!PLC_GraphicElementGroup methodsFor: 'elements' stamp: 'EricPernia 4/21/2013 13:36'!add: anElementOrGroup	"Añade un elemento o grupo al grupo. 	Si el grupo  a añadir es el mismo produce un error.	Si se intenta agregar repetidos produce error."		( ( anElementOrGroup == self ) or: [ self includes: anElementOrGroup ] )		ifTrue: [			self error: 'No se puede añadir un grupo a si mismo, ni se permiten repetidos dentro del grupo'.			] 		ifFalse: [			self elements add: anElementOrGroup.			].! !!PLC_GraphicElementGroup methodsFor: 'elements' stamp: 'EricPernia 7/13/2013 03:50'!elementsDependentsUnderGroupLayoutRectangle	"Devuelve una Ordered Collection con los elementos dependientes 	de cada uno de los elementos del grupo  que estén dentro del 	layoutRectangle de cada elemento. Esto se utiliza para poder 	borrar elementos bajo 	el layout Rectangle del grupo cuando hago 	el alyout Vertical."	| collection |		collection := OrderedCollection new.	self elements do: [ :each |		collection addAll: each dependentsUnderLayoutRectangle.		].		^collection.! !!PLC_GraphicElementGroup methodsFor: 'elements' stamp: 'EricPernia 4/4/2013 01:37'!includes: anElementOrGroup	"Devuelve True si el Grupo incluye al elemento grafico."	^ self elements includes: anElementOrGroup.! !!PLC_GraphicElementGroup methodsFor: 'elements' stamp: 'EricPernia 4/14/2013 07:53'!last	^ self elements last. ! !!PLC_GraphicElementGroup methodsFor: 'elements' stamp: 'EricPernia 4/28/2013 17:13'!layoutFirstPinsYDistance	"Devuelve la distancia minima en pantalla en Y del primer pin de entrada 	y salida relativa a la posicion vertical de self .	Es la distancia vertical entre la parte de arriba del elemento y sus sub elementos y el primer pin."	^ self maxFirstPinYDistance.! !!PLC_GraphicElementGroup methodsFor: 'elements' stamp: 'EricPernia 4/1/2013 06:32'!left: aDistanceX	"Cambia la posicion horizontal de sus elementos internos."		self elements do: [ :aGraphicElement | 		aGraphicElement left: aDistanceX.		].! !!PLC_GraphicElementGroup methodsFor: 'elements' stamp: 'EricPernia 4/28/2013 17:12'!maxFirstPinYDistance	"Devuelve la maxima distancia minima de sus subelementos."	"Busco la mayor altura del primer pin"	^ self elements 		inject: 0 		into: [:maxY :aGraphicElement | maxY max: aGraphicElement layoutFirstPinsYDistance ].! !!PLC_GraphicElementGroup methodsFor: 'elements' stamp: 'EricPernia 4/2/2013 02:21'!topLeft	"Posiciondel primer elemento del grupo."	^ self elements first topLeft.! !!PLC_GraphicElementGroup methodsFor: 'position' stamp: 'EricPernia 7/7/2013 19:58'!bottom	"Devuelve su posicion inferior en Y."	^ self layoutRectangle bottom.! !!PLC_GraphicElementGroup methodsFor: 'position' stamp: 'EricPernia 3/31/2013 05:23'!bottom: aDistance	"Setea su posicion inferior en Y."	self elements do: [ :elem |		elem bottom: aDistance.		].! !!PLC_GraphicElementGroup methodsFor: 'position' stamp: 'EricPernia 3/31/2013 02:13'!layoutRectanglePosition	"Devuelve la posicion del layoutRectangle.	Este mensaje es para tener polimorfismo con los elementos graficos."	^ self layoutRectangle position.! !!PLC_GraphicElementGroup methodsFor: 'position' stamp: 'EricPernia 3/31/2013 05:43'!left	"Devuelve su posicion izquierda en X."	^ self layoutRectangle left.! !!PLC_GraphicElementGroup methodsFor: 'position' stamp: 'EricPernia 3/31/2013 05:43'!right	"Devuelve su posicion derecha en X."	^ self layoutRectangle right.! !!PLC_GraphicElementGroup methodsFor: 'position' stamp: 'EricPernia 3/31/2013 06:35'!right: aDistance	"Setea su posicion derecha en X."	self elements do: [ :elem |		elem right: aDistance.		].! !!PLC_GraphicElementGroup methodsFor: 'position' stamp: 'EricPernia 3/31/2013 05:43'!top	"Devuelve su posicion superior en Y."	^ self layoutRectangle top.! !!PLC_GraphicElementGroup methodsFor: 'initialize-release' stamp: 'EricPernia 3/31/2013 00:53'!initialize	"Inicializa la Ordered Collection elements que contiene elementos graficos"	self elements: OrderedCollection new.			! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 20:35'!layoutHorizontallyLeft: aDistanceX	"Dispone en pantalla todos los elementos internos del grupo de elementos Horizontalmente.	Este junto con el metodo del mismo nombre en Elemento hace que se pueda crear un composite. 	Es decir, Grupos que contengan Elementos u oros Grupos."                        	self elements first xPositioned 		ifFalse: [ 			self elements first layoutHorizontallyLeft: aDistanceX.			].					(2 to: self elements size) do: [ :ind |		( self  elements at: ind ) xPositioned 			ifFalse: [ 				( self  elements at: ind ) layoutHorizontallyLeft: ( self  elements at: ind - 1 ) layoutRectangle right.				].		]. ! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 4/27/2013 00:56'!layoutPosition: aPoint	"Dispone en pantalla todos los elementos internos del grupo de elementos."	"Layout horizontal de los elementos interiores."	self layoutHorizontallyLeft: aPoint x.		"Layout vertical de los elementos interiores"	self layoutVerticallyTop: aPoint y.! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 7/7/2013 20:09'!layoutRectangle	"Devuelve el layoutRectangle mayor de la coleccion elements	que contiene una rama serie de elementos."	^ self layoutRectangleForGroup.! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 21:29'!layoutRectangleForGroup	"Devuelve el layoutRectangle mayor de la coleccion elements	que contiene una rama serie de elementos."	| layoutRectangle elementConnectedToGroup |	layoutRectangle := self elements inject: self elements first layoutRectangleForGroup		into: [ :layoutRectangleForGroup :element | 			layoutRectangleForGroup merge: element layoutRectangleForGroup			].		"Extiendo layoutRectangle del grupo a derecha. Esto es para que el layoutRectangle del 	grupo sea el máximo posible a derecha para que acomode bien Contactos y Bloques."		"Chequeo si el ultimo del grupo es un RightPowerRail. Si no es modifico el layoutRectangle	del grupo. "	self elements last isRightPowerRail		ifFalse: [ 			"Busco el elemento conectado al ultimo elementos del grupo"			elementConnectedToGroup := self elements last blockConnectedToOutput: 1.			"Extiendo el layoutRectangle del grupo a derecha hasta la izquierda del elemento hallado."			layoutRectangle := 	Rectangle 				origin: layoutRectangle origin 				corner: ( elementConnectedToGroup layoutRectangle left @ layoutRectangle bottom).			].			"Extiendo layoutRectangle del grupo a izquierda. Esto es para que el layoutRectangle del 	grupo sea el máximo posible a izquierda para que acomode bien bobinas."				"Busco el elemento conectado al primer elemento del grupo"	elementConnectedToGroup := self elements first blockConnectedToInput: 1.	"Extiendo el layoutRectangle del grupo a izquierda hasta la derecha del elemento hallado."	layoutRectangle := 	Rectangle 		origin: ( elementConnectedToGroup layoutRectangle right @ layoutRectangle top)		corner: layoutRectangle corner.					^ layoutRectangle.! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 4/2/2013 01:17'!layoutRectangleRelativePosition	"Posicion relativa entre el layoutRectangle y el position del elemento"	^ self elements first topLeft - self layoutRectangle topLeft.! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 4/28/2013 19:36'!layoutVerticallyTop: aDistanceY	"Dispone en pantalla todos los elementos internos del grupo de elementos Verticalmente."	| firstPinsYPosition top |	"Busco la mayor altura del primer pin"	firstPinsYPosition := self maxFirstPinYDistance.				"Asigno la altura hallada a todos los morphs de la misma linea"			self elements do: [ :aGraphicElement | 		aGraphicElement layoutVerticallyTop: aDistanceY + firstPinsYPosition - ( aGraphicElement layoutFirstPinsYDistance ).		].! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 4/14/2013 20:16'!xPositioned	"Devuelve true si el flag de xPositioned de cada uno de sus elementos es true."		^ self elements allSatisfy: [ :elem |		elem xPositioned.		].! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 4/14/2013 20:17'!xPositioned: aBoolean	"Setea a aBoolean el flag de xPositioned de cada uno de sus elementos."		self elements do: [ :elem |		elem xPositioned: aBoolean.		].! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 4/14/2013 20:17'!yPositioned	"Devuelve true si el flag de yPositioned de cada uno de sus elementos es true."		^ self elements allSatisfy: [ :elem |		elem yPositioned.		].! !!PLC_GraphicElementGroup methodsFor: 'layout' stamp: 'EricPernia 4/14/2013 20:17'!yPositioned: aBoolean	"Setea a aBoolean el flag de yPositioned de cada uno de sus elementos."		self elements do: [ :elem |		elem yPositioned: aBoolean.		].! !!PLC_GraphicElementGroup methodsFor: 'accessing' stamp: 'EricPernia 3/31/2013 00:53'!elements	^ elements! !!PLC_GraphicElementGroup methodsFor: 'accessing' stamp: 'EricPernia 3/31/2013 00:53'!elements: anObject	elements := anObject! !Morph subclass: #PLC_InsertionPointMorph	instanceVariableNames: 'drawingLayer properties'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_InsertionPointMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_InsertionPointMorph is xxxxxxxxx.Instance Variables	drawingLayer:		<Object>	properties:		<Object>drawingLayer	- xxxxxproperties	- xxxxx!!PLC_InsertionPointMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2012 17:35'!defaultExtent	"Tamaño del area de drop del insertion point."	(self owner isKindOf: PLC_GraphicElementMorph )		ifTrue: [			^ self owner insertionPointDropAreaExtent.			] 		ifFalse: [			^ 96 @ 24.			].		 ! !!PLC_InsertionPointMorph methodsFor: 'drawing' stamp: 'EricPernia 5/21/2012 18:17'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		aCanvas fillRectangle: self bounds color: self drawingLayer insertionPointBackgroundColor.		! !!PLC_InsertionPointMorph methodsFor: 'drawing' stamp: 'EricPernia 5/21/2012 18:18'!drawElementOn: aCanvas	"Dibuja el elemento"		aCanvas 		frameAndFillRectangle: self insertionPointRectangle		fillColor: self drawingLayer insertionPointColor		borderWidth: self properties scale x 		borderColor: self drawingLayer insertionPointBorderColor.! !!PLC_InsertionPointMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 03:32'!drawOn: aCanvas	"Dibujo el elemento grafico"		self drawingLayer drawOn: aCanvas for: self.! !!PLC_InsertionPointMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2012 17:32'!dropAreaDefaultHeight	"Altura por defecto. Todos los Insertion Point tienen esta altura de su fondo o area de drop"	^ 24.! !!PLC_InsertionPointMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2012 15:00'!insertionPointCenter	"Devuelve el punto del centro del rectangulo del punto de inserción 	que no coincide siempre con el centro del area de drop."	^ self owner insertionPointCenter.! !!PLC_InsertionPointMorph methodsFor: 'drawing' stamp: 'EricPernia 5/13/2012 06:19'!insertionPointRectangle	"Rectangulito que representa el punto de inserción"		| width height origin corner|	width := self properties scale x * 6.	height := self properties scale y * 8.		origin := self center - ((width /2.0) rounded @ (height /2.0) rounded).	corner := origin + (width @ height).	^ Rectangle origin: origin corner: corner.! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 9/22/2012 05:47'!draggingAnother	"Implementado solo por compatibilidad para polimorfismo."! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 9/22/2012 05:46'!draggingSelf 	"Implementado solo por compatibilidad para polimorfismo."! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 9/22/2012 05:46'!mouseOut	"Implementado solo por compatibilidad para polimorfismo."! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 9/22/2012 05:46'!mouseOver	"Implementado solo por compatibilidad para polimorfismo."! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 5/23/2012 18:05'!notDragging	"Estado Not Dragiing."		self visible: false.	self drawingLayer: PLC_GraphicElementState voidState.	self changed.! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 5/23/2012 18:04'!overDropArea	"Estado Over Drop Area."		self visible: true.	self drawingLayer: PLC_GraphicElementState overDropArea.	self changed.! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 9/22/2012 05:45'!selected	"Implementado solo por compatibilidad para polimorfismo."! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 5/23/2012 18:05'!underDragArea	"Estado Under Drag Area."		self visible: true.	self drawingLayer: PLC_GraphicElementState underDragArea.	self changed.! !!PLC_InsertionPointMorph methodsFor: 'states' stamp: 'EricPernia 9/22/2012 05:45'!unselected	"Implementado solo por compatibilidad para polimorfismo."! !!PLC_InsertionPointMorph methodsFor: 'initialize-release' stamp: 'EricPernia 5/15/2012 22:46'!initialize	"Inicializo el elemento grafico"	super initialize.		self properties: PLC_GraphicElementProperties uniqueInstance.			PLC_GraphicElementState initialize.	self notDragging.			"drawingLayer"	self openInWorld. 	self extent: self defaultExtent.	! !!PLC_InsertionPointMorph methodsFor: 'accessing' stamp: 'EricPernia 5/15/2012 22:40'!drawingLayer	^ drawingLayer! !!PLC_InsertionPointMorph methodsFor: 'accessing' stamp: 'EricPernia 5/15/2012 22:40'!drawingLayer: anObject	drawingLayer := anObject! !!PLC_InsertionPointMorph methodsFor: 'accessing' stamp: 'EricPernia 5/21/2012 18:04'!properties	^ properties! !!PLC_InsertionPointMorph methodsFor: 'accessing' stamp: 'EricPernia 5/21/2012 18:04'!properties: anObject	properties := anObject! !Morph subclass: #PLC_GraphicElementMorph	instanceVariableNames: 'userInteractionStateLayer1 userInteractionStateLayer2 userInteractionStateLayer3 connectionStateLayer1 connectionStateLayer2 xPositioned yPositioned'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_GraphicElementMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_GraphicElementMorph is xxxxxxxxx.Instance Variables	connectionStateLayer1:		<Object>	connectionStateLayer2:		<Object>	userInteractionStateLayer1:		<Object>	userInteractionStateLayer2:		<Object>	userInteractionStateLayer3:		<Object>	xPositioned:		<Object>	yPositioned:		<Object>connectionStateLayer1	- xxxxxconnectionStateLayer2	- xxxxxuserInteractionStateLayer1	- xxxxxuserInteractionStateLayer2	- xxxxxuserInteractionStateLayer3	- xxxxxxPositioned	- xxxxxyPositioned	- xxxxx!!PLC_GraphicElementMorph methodsFor: 'grid' stamp: 'EricPernia 4/22/2013 01:08'!gridExtent	"Devuelve el tamaño en pixeles de una celda de la grilla gris."		^ self properties gridExtent.! !!PLC_GraphicElementMorph methodsFor: 'grid' stamp: 'EricPernia 4/22/2013 01:09'!gridOrigin	"Devuelve la posicion 0@0 de la grilla"	^ self owner gridOrigin.! !!PLC_GraphicElementMorph methodsFor: 'initialize-release' stamp: 'EricPernia 7/14/2013 05:21'!initialize	"Inicializo el elemento grafico"		"Siempre debe hacer esto al inicializarse un Morph"	super initialize.								"Inicializo el morph a su tamaño por defecto"	self extent: self defaultExtent.		"Inicializo sus estados de Interfaz de Usuario"	PLC_GraphicElementState initialize.	self unselected;		mouseOut;		notKeyboardFocus;		notConnectedToLeftPowerRailTroughFirstOutputPin;		voidCSL1.		"Indican si el elemento esta terminado deposicionarse en X e Y. Inicializan en false"	self xPositioned: false;		yPositioned: false.								"Muestro en pantalla"	self openInWorld.! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 2' stamp: 'EricPernia 7/6/2013 16:11'!connectedToLeftPowerRailTroughFirstOutputPin 	"Define algoritmo de layout que cambia si 	esta conectado a primer rama o bobina.	En el caso de la Barra Izquierda cambia el dibujo si es pirmer pin u otro."	self connectionStateLayer2: PLC_GraphicElementState connectedToLeftPowerRailTroughFirstOutputPin.	self changed.! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 2' stamp: 'EricPernia 7/6/2013 16:11'!notConnectedToLeftPowerRailTroughFirstOutputPin	"Define algoritmo de layout que cambia si 	esta conectado a primer rama o bobina.	En el caso de la Barra Izquierda cambia el dibujo si es pirmer pin u otro."	self connectionStateLayer2: PLC_GraphicElementState notConnectedToLeftPowerRailTroughFirstOutputPin.	self changed.! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 4/22/2013 15:56'!backgroundRectangle	"Devuelve el rectángulo que se sombrea al pasar el mouse por el elemento."		| rectangle |		rectangle := Rectangle 		origin: self backgroundRectanglePosition 		corner: self backgroundRectanglePosition + self backgroundRectangleExtent.			^ rectangle translateBy: self position.! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 10/18/2012 15:10'!diagonalLine1Rectangle	"Linea diagonal que forma parte de la flecha del Riel Derecho cuando esta conectado a Contacto."	| width height diagonalLine |	width := self properties scale x * 4.	height := self properties scale y * 4.		diagonalLine := Rectangle origin: (0@0) corner: ( width @ height ).		^ diagonalLine align: diagonalLine topRight with: self bounds topRight + (self properties scale * (-2 @ 4)).! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 10/18/2012 15:10'!diagonalLine2Rectangle	"Linea diagonal que forma parte de la flecha del Riel Derecho cuando esta conectado a Contacto."	| width height diagonalLine |	width := self properties scale x * 4.	height := self properties scale y * 4.		diagonalLine := Rectangle origin: (0@0) corner: ( width @ height ).		^ diagonalLine align: diagonalLine topRight with: self bounds topRight + (self properties scale * (-8 @ 4)).! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 10/18/2012 15:10'!diagonalLine3Rectangle	"Linea diagonal que forma parte de la flecha del Riel Derecho cuando esta conectado a Contacto."	| width height diagonalLine |	width := self properties scale x * 4.	height := self properties scale y * 4.		diagonalLine := Rectangle origin: (0@0) corner: ( width @ height ).		^ diagonalLine align: diagonalLine bottomRight with: self bounds bottomRight - (self properties scale * (2 @ 4)).! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 10/18/2012 15:10'!diagonalLine4Rectangle	"Linea diagonal que forma parte de la flecha del Riel Derecho cuando esta conectado a Contacto."	| width height diagonalLine |	width := self properties scale x * 4.	height := self properties scale y * 4.		diagonalLine := Rectangle origin: (0@0) corner: ( width @ height ).		^ diagonalLine align: diagonalLine bottomRight with: self bounds bottomRight - (self properties scale * (8 @ 4)).! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 02:05'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		aCanvas 		fillRectangle: self backgroundRectangle 		color: self userInteractionStateLayer1 backgroundColor.! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 4/22/2013 00:50'!drawBoundsOn: aCanvas	"Dibujo el borde del margen del elemento. Tamaño total"		aCanvas		frameRectangle: self bounds		width: 1		colors: {Color blue. Color white alpha: 0}		dashes: {2. 1}..! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 02:09'!drawDoubleArrowOn: aCanvas.	"Dibuja la flecha doble del Riel Derecho conectado a contacto."	aCanvas line: self diagonalLine1Rectangle origin		to: self diagonalLine1Rectangle corner		width: self properties scale x * 2		color: self userInteractionStateLayer1 elementColor.	"Parche blanco sobre la linea diagonal"	aCanvas line: self diagonalLine1Rectangle origin - (1@0)		to: self diagonalLine1Rectangle origin - (1@1)		width: self properties scale x * 1		color: Color white.	aCanvas line: self diagonalLine2Rectangle origin		to: self diagonalLine2Rectangle corner		width: self properties scale x * 2		color: self userInteractionStateLayer1 elementColor.	"Parche blanco sobre la linea diagonal"	aCanvas line: self diagonalLine2Rectangle origin - (1@0)		to: self diagonalLine2Rectangle origin - (1@1)		width: self properties scale x * 1		color: Color white.	aCanvas line: self diagonalLine3Rectangle bottomLeft		to: self diagonalLine3Rectangle topRight		width: self properties scale x * 2		color: self userInteractionStateLayer1 elementColor.	"Parche blanco sobre la linea diagonal"	aCanvas line: self diagonalLine3Rectangle bottomLeft - (1@0 negated)		to: self diagonalLine3Rectangle bottomLeft - (1@1)		width: self properties scale x * 1		color: Color white.	aCanvas line: self diagonalLine4Rectangle bottomLeft		to: self diagonalLine4Rectangle topRight		width: self properties scale x * 2		color: self userInteractionStateLayer1 elementColor.	"Parche blanco sobre la linea diagonal"	aCanvas line: self diagonalLine4Rectangle bottomLeft - (1@0 negated)		to: self diagonalLine4Rectangle bottomLeft - (1@1)		width: self properties scale x * 1		color: Color white.! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 4/22/2013 16:21'!drawElementOn: aCanvas	"Dibujo el elemento grafico"		aCanvas 		fillRectangle: self defaultExtent 		color: Color red.! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 4/22/2013 01:04'!drawLayoutRectangleOn: aCanvas	"Dibujo el borde del LayoutRectangle del elemento."		aCanvas		frameRectangle: self layoutRectangle		width: 1		color: Color green.! !!PLC_GraphicElementMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 03:33'!drawOn: aCanvas	"Dibujo el elemento grafico"		self userInteractionStateLayer1 drawOn: aCanvas for: self.	self userInteractionStateLayer2 drawOn: aCanvas for: self.	self userInteractionStateLayer3 drawOn: aCanvas for: self.		self properties drawBounds ifTrue: [		self drawBoundsOn: aCanvas		].		self properties drawLayoutRectangle ifTrue: [		self drawLayoutRectangleOn: aCanvas		].! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 15:38'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self defaultExtent.! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 01:08'!defaultExtent	"Tamaño por defecto del elemento."		^ self gridExtent.! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 02:08'!doubleWidth	"Cambia el ancho del elemento al doble"	self extent: ( self elementDoubleWidth @ self extent y ).	self extentChanged.	self submorphs do: [ :each |		each doubleWidth.		].! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:52'!elementDoubleWidth	"Doble ancho del elemento"	^ self defaultExtent x.! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:52'!elementWidth	"Ancho estandar del elemento"	^ self defaultExtent x.! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 01:08'!extentChanged	"Cambia el tamaño del elemento"		self extent: self totalExtent.! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 7/6/2013 01:53'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self connectionStateLayer1 layoutRectangleExtentFor: self.! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 02:07'!standardWidth	"Cambia el ancho del elemento a ancho estandar."	self extent: ( self elementWidth @ self extent y ).	self extentChanged.	self submorphs do: [ :each |		each standardWidth.		].! !!PLC_GraphicElementMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 15:38'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self defaultExtent.! !!PLC_GraphicElementMorph methodsFor: 'position' stamp: 'EricPernia 4/25/2013 01:27'!backgroundRectanglePosition	"Devuelve la posición en pantalla del backgroundRectangle relativa a position del elemento [px]."		^ self properties scale * ( 0 @ 2 ).! !!PLC_GraphicElementMorph methodsFor: 'position' stamp: 'EricPernia 7/7/2013 20:59'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self connectionStateLayer1 layoutRectanglePositionFor: self.! !!PLC_GraphicElementMorph methodsFor: 'position' stamp: 'EricPernia 4/22/2013 01:12'!layoutRectangleRelativePosition	"Posicion relativa entre el layoutRectangle y el position del elemento"	^ self topLeft - self layoutRectangle topLeft.! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 7/13/2013 03:54'!dependentsUnderLayoutRectangle	"Devuelve una Ordered Collection con los elementos dependientes 	de este elemento que se encuentren bajo su layoutRectangle. 	Esto se utiliza para poder borrar elementos bajo el layout Rectangle 	del grupo cuando hago el layout Vertical."	| collection |		collection := OrderedCollection new.	self elementDependents do: [ :each | 		( each layoutRectangle intersects: self layoutRectangle )			ifTrue: [ collection add: each.]		].			^collection.! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 20:39'!layoutFirstPinsYDistance	"Devuelve la distancia minima en pantalla en Y del primer pin de entrada 	y salida relativa a layoutRectangle top de self .	Es la distancia vertical entre la parte de arriba del elemento y sus sub elementos y el primer pin."		^ self layoutRectangleRelativePosition y + self firstPinYDistance.! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 06:44'!layoutGroupVerticallyOn: aLadderView from: aGraphicElement output: anOutputNumber	"Alineo Verticalmnete su grupo de primer pin."	| previousOutputElement group groupPrev |		"Si ya se encontraba posicionado en Y no lo posiciono."	( self yPositioned )		ifFalse: [			"Obtengo el grupo del elemento"			group := aLadderView groupFor: self.							"Chequea si esta conectado a la primer salida del elemento anterior. 			En base a esto se acomoda de una manera u otra."			( anOutputNumber = 1 )				ifTrue: [					"Posiciono su group a partir del topRight del layoutRectangle del elemento 					conectado a su entrada"							group layoutVerticallyTop: aGraphicElement layoutRectangle top.					] 				ifFalse: [										"ACA DEBE CHEQUEAR QUE ADEMAS YA LO HAYA ACOMODADO EN X					AL ELEMENTO DEL PIN ANTERIOR PARA QUE NO SE ARME BARDO CON					LOS BLOQUES, VER 2 PRIMA EN LAS HOJAS "										"Obtengo el elemento conectado a la salida anterior de la que esta 					conectado self en el elemento  inputGraphicElement."					previousOutputElement := aGraphicElement blockConnectedToOutput: anOutputNumber - 1.					"Obtengo el grupo azul en el que se encuentra el previousOutputElement"					groupPrev := aLadderView groupFor: previousOutputElement.								"Posiciono su firstPinGroup Verticalmente a partir del bottom del layoutRectangle de groupPrev."					group layoutVerticallyTop: groupPrev layoutRectangle bottom.					].			"Chequeo si su grupo pisa otro elemento previamente posicionado. Si pisa lo muevo otra vez. 			Así en un loop hasta que no pise a nadie verticalmente."			[ aLadderView gotAnElementVerticallyUnderGroup: group ] 				whileTrue: [					group layoutVerticallyTop: 						( aLadderView maxBottomElementUnderGroup: group ) layoutRectangle bottom.					].						"Seteo a true el flag de que se encuentra posicionado en Y en cada elemento de grupo serie."			group yPositioned: true						].! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 4/27/2013 01:08'!layoutHorizontallyLeft: aDistanceX	"Este metodo usa el metodo layoutLeft: y le pasa aDistanceX y otro valor	segun ciertas consideraciones de conexiones y demas."	"Mensaje para compatibilidad con grupos. Para que funcione el composite Gupos - Elementos."		"Alineo el elemento a aDistanceX"	self layoutLeft: aDistanceX.! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 04:44'!layoutHorizontallyOn: aLadderView from: aGraphicElement output: anOutputNumber	"Alineo Horizontalmente su grupo serie."		| group |		"Si ya se encontraba posicionado en X no lo posiciono."	( self xPositioned )		ifFalse: [					"Posiciono el elemento grafico Horizontalmente a la derecha del 			layoutRectangle del elemento conectado a su entrada"			"self layoutHorizontallyLeft: aGraphicElement layoutRectangle right."						"Obtengo el grupo del elemento"			group := aLadderView groupFor: self.						"Posiciono su grupo Horizontalmente a la derecha del layoutRectangle 			del elemento conectado a su entrada"			group layoutHorizontallyLeft: aGraphicElement layoutRectangle right.									"Seteo a true el flag de que se encuentra posicionado en X el grupo."			group xPositioned: true.			].! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 4/22/2013 01:11'!layoutLeft: aNumber	"self posiciona horizontalmente su layoutRectangle en aNumber."		self layoutPosition: ( aNumber @ (self position y - self layoutRectangleRelativePosition y ) ).! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 7/9/2013 17:01'!layoutOutputsOn: aLadderView from: aGraphicElement output: anOutputNumber	"Alineo el elemento conectado a la salida de su grupo serie."		| nextGraphicElement |		"Obtengo el elemento conectado a su única salida"	nextGraphicElement := self blockConnectedToOutput: 1.				"Posiciona en pantalla el elemento obtenido."	nextGraphicElement layoutOn: aLadderView from: self output: 1.! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 4/22/2013 01:12'!layoutPosition: aPoint	"self posiciona su layoutRectangle en el punto aPoint."		self position: aPoint + self layoutRectangleRelativePosition.! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 7/7/2013 19:54'!layoutRectangle	"Devuelve el rectángulo para acomodar en pantalla los elementos entre si."	| rectangle |		rectangle := Rectangle 		origin: self layoutRectanglePosition 		corner: self layoutRectanglePosition + self layoutRectangleExtent.			^ rectangle translateBy: self position.! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 7/7/2013 19:55'!layoutRectangleForGroup	"Devuelve el rectángulo para acomodar en pantalla los elementos 	entre si que usan los grupos azules."	^ self layoutRectangle.! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 4/27/2013 00:52'!layoutTop: aDistanceY	"self posiciona verticalmente su layoutRectangle en aNumber."		self layoutPosition: ( (self position x - self layoutRectangleRelativePosition x ) @ aDistanceY ).! !!PLC_GraphicElementMorph methodsFor: 'layout' stamp: 'EricPernia 4/26/2013 15:46'!layoutVerticallyTop: aDistanceY	"self se posiciona a partir de la distancia vertical aDistanceY. 	Self solo se mueve verticalmente, anElement queda fijo."		self layoutTop: aDistanceY! !!PLC_GraphicElementMorph methodsFor: 'event handling' stamp: 'EricPernia 5/22/2012 19:32'!containsPoint: aPoint	"Para setear el area sensitiva del mouse dentro de la caja delimitadora del Morph"	^ (self backgroundRectangle containsPoint: aPoint).! !!PLC_GraphicElementMorph methodsFor: 'event handling' stamp: 'EricPernia 4/22/2013 02:54'!handlesMouseOver: anEvent	"Permite manejar el evento de que el puntero pasa sobre el morph."	^true.	"^false. "! !!PLC_GraphicElementMorph methodsFor: 'event handling' stamp: 'EricPernia 4/12/2012 16:38'!mouseEnter: anEvent	"Manejador del evento mouse enter. Este mensaje se le envia al 	morph cuando el puntero del mouse empieza a pasar por el."	self mouseOver.	! !!PLC_GraphicElementMorph methodsFor: 'event handling' stamp: 'EricPernia 4/12/2012 16:38'!mouseLeave: anEvent	"Manejador del evento mouse leave. Este mensaje se le envia al 	morph cuando el puntero del mouse deja de pasarpor el."	self mouseOut.! !!PLC_GraphicElementMorph methodsFor: 'properties' stamp: 'EricPernia 6/18/2012 12:58'!properties	"Devuelve la unica instancia de la clase PLC_GraphicElementProperties"	^ PLC_GraphicElementProperties uniqueInstance.! !!PLC_GraphicElementMorph methodsFor: 'align strates' stamp: 'EricPernia 7/9/2013 18:09'!centerAlign	"Estado s de alineación. Los implementan los Tag Morph"! !!PLC_GraphicElementMorph methodsFor: 'align strates' stamp: 'EricPernia 7/9/2013 18:09'!leftAlign	"Estado s de alineación. Los implementan los Tag Morph"! !!PLC_GraphicElementMorph methodsFor: 'align strates' stamp: 'EricPernia 7/9/2013 18:09'!rightAlign	"Estado s de alineación. Los implementan los Tag Morph"! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:52'!aboveAndToTheLeft: aMorphOrRectangle	"Se posiciona por la izquierda de aMorphOrRectangle y alinea su borde inferior al borde superior de aMorphOrRectangle.	Self is positioned as shown below:	        ---------        |  self  |        --------- -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------	     "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.		self position: rectangle topLeft - self extent.		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:52'!aboveAndToTheRight: aMorphOrRectangle	"Se posiciona por la izquierda de aMorphOrRectangle y alineado al borde inferior de aMorphOrRectangle.	Self is positioned as shown below:	    					       ---------					       |  self  |		     ------------------- --------- 		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------	  	      "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self position: rectangle topLeft + ( rectangle extent x @ self extent y negated ).		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 4/22/2013 00:32'!alignAbove: aMorphOrRectangle	"Se posiciona arriba de aMorphOrRectangle. Solo mueve a self verticalmente.NUEVOOOOOOOOOO	Self is positioned as shown below:			   	    ---------			    	    |  self  |		     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------				"	self bottom: ( aMorphOrRectangle bottom - aMorphOrRectangle extent y ).! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 4/22/2013 00:32'!alignBeneath: aMorphOrRectangle	"Se posiciona por debajo de aMorphOrRectangle. Solo mueve a self verticalmente.NUEVOOOOOOOOOO	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------						    	    |  self  |		   	    ---------			    "	self top: ( aMorphOrRectangle top + aMorphOrRectangle extent y ).! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 4/22/2013 00:32'!alignCenteredAbove: aMorphOrRectangle	"Se posiciona debajo y centrado de aMorphOrRectangle.NUEVOOOOOOOOOO	Self is positioned as shown below:		   	    ---------		    	    |  self  |			     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------							    "	self center: aMorphOrRectangle center.	self alignAbove: aMorphOrRectangle.! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 4/22/2013 00:33'!alignCenteredBeneath: aMorphOrRectangle	"Se posiciona debajo y centrado de aMorphOrRectangle.NUEVOOOOOOOOOO	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------						    	    |  self  |		   	    ---------			    "	self center: aMorphOrRectangle center.	self alignBeneath: aMorphOrRectangle.! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 4/22/2013 00:33'!alignToTheLeft: aMorphOrRectangle	"self se posiciona a la izquierda de aMorphOrRectangle. No se cambia la posicion vertical de self.NUEVOOOOOOOOOO	Self is positioned as shown below:					     -------------------				     |      aMorph    |		        --------- |      (fixed       |		        |  self  | |    position)    |		        --------- -------------------	    "	self right: ( aMorphOrRectangle right - aMorphOrRectangle extent x ).! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 4/22/2013 00:33'!alignToTheRight: aMorphOrRectangle	"self se posiciona a la derecha de aMorphOrRectangle. No se cambia la posicion vertical de self.NUEVOOOOOOOOOO	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       | ---------		     |    position)    | |  self  |		     -------------------	---------	     "	self left: ( aMorphOrRectangle left + aMorphOrRectangle extent x ).! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:52'!alignedAtBottomLeft: aMorphOrRectangle	"Se posiciona por la izquierda de aMorphOrRectangle y alineado al borde inferior de aMorphOrRectangle.	Self is positioned as shown below:			     -------------------		     |      aMorph    |	--------- |      (fixed       |	|  self  | |    position)    |	--------- -------------------		      "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self bottom: rectangle bottom. 	self position: (rectangle topLeft - self extent) x @ self position y.		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:52'!alignedAtBottomRight: aMorphOrRectangle	"Se posiciona a la derecha de aMorphOrRectangle y alineado al borde inferior de aMorphOrRectangle.	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       | ---------		     |    position)    | |  self  |		     -------------------	---------	     "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self position: rectangle topLeft + ( rectangle extent x @ 0 ).	self bottom: rectangle bottom.		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:52'!alignedAtLeftAbove: aMorphOrRectangle	"Se posiciona por arriba de aMorphOrRectangle y alineado a la izquierda de aMorphOrRectangle.	Self is positioned as shown below:			     ---------		     |  self  |		     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------		      "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self position: rectangle topLeft - ( 0 @ self extent y ).		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:52'!alignedAtLeftBeneath: aMorphOrRectangle	"Se posiciona por debajo de aMorphOrRectangle y alineado a la izquierda de aMorphOrRectangle.	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------						     |  self  |		     ---------			      "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self position: rectangle topLeft + ( 0 @ rectangle extent y ).		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/22/2012 17:01'!alignedAtRight: aMorphOrRectangle	"Se posiciona a la derecha de aMorphOrRectangle. No se cambia la posicion vertical de self.	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       | ---------		     |    position)    | |  self  |		     -------------------	---------	     "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self position: ( rectangle origin x + rectangle extent x @ self position y ).		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:53'!alignedAtRightAbove: aMorphOrRectangle	"Se posiciona por arriba de aMorphOrRectangle y alineado a la derecha de aMorphOrRectangle.	Self is positioned as shown below:			   		  ---------		    		  |  self  |		     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------			      "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self position: rectangle topLeft + ( rectangle extent x @ 0 ) - self extent.		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:53'!alignedAtRigthBeneath: aMorphOrRectangle	"Se posiciona por debajo de aMorphOrRectangle y alineado a la derecha de aMorphOrRectangle.	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------						    		  |  self  |			   		  ---------		      "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.		self position: rectangle topLeft + rectangle extent -  ( self extent x @ 0 ).		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:53'!alignedAtTopLeft: aMorphOrRectangle	"Se posiciona por la izquierda de aMorphOrRectangle y alineado al borde superior de aMorphOrRectangle.	Self is positioned as shown below:		--------- -------------------	|  self  | |      aMorph    |	--------- |      (fixed       |		     |    position)    |		     -------------------		      "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.		self position: rectangle topLeft - ( self extent x @ 0 ).		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:53'!alignedAtTopRight: aMorphOrRectangle	"Se posiciona a la derecha de aMorphOrRectangle y alineado al borde superior de aMorphOrRectangle.	Self is positioned as shown below:			     ------------------- ---------		     |      aMorph    | |  self  |		     |      (fixed       | ---------		     |    position)    |		     -------------------	      "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.		self position: rectangle topLeft + ( rectangle extent x @ 0 ).		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/22/2012 16:35'!beneath: aMorphOrRectangle	"Se posiciona por debajo de aMorphOrRectangle. Solo mueve a self verticalmente.	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------						    	    |  self  |		   	    ---------			    "		| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self bottom: rectangle bottom + self extent y.		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:53'!beneathAndToTheLeft: aMorphOrRectangle	"Se posiciona por la izquierda de aMorphOrRectangle y alinea su borde superior al borde inferior de aMorphOrRectangle.	Self is positioned as shown below:			     -------------------					     |      aMorph    |		     |      (fixed       |		     |    position)    |        --------- -------------------        |  self  |        ---------		    "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.		self position: rectangle topLeft+ ( 0 @ rectangle extent y ) - ( self extent x @ 0 ).		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:53'!beneathAndToTheRight: aMorphOrRectangle	"Se posiciona a la derecha de aMorphOrRectangle y alinea su borde superior al borde inferior de aMorphOrRectangle.	Self is positioned as shown below:			     -------------------					     |      aMorph    |		     |      (fixed       |		     |    position)    |			     ------------------- ---------	    					       |  self  |				  					       ---------			    "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self position: rectangle topLeft + rectangle extent.		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:53'!centeredAbove: aMorphOrRectangle	"Se posiciona por arriba de aMorphOrRectangle y alinea centrado horizontalmente con aMorphOrRectangle.	Self is positioned as shown below:			   	    ---------		    	    |  self  |		     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------			    "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self center: rectangle center.	self top: rectangle top - self extent y.		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 6/22/2013 04:08'!centeredBeneath: aMorph	"Se posiciona por debajo de aMorphy alinea centrado horizontalmente con aMorph.	Self is positioned as shown below:			     -------------------		     |      aMorph    |		     |      (fixed       |		     |    position)    |		     -------------------						    	    |  self  |		   	    ---------			    "	self center: aMorph center.	self bottom: aMorph bottom + self extent y.! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 10/6/2012 18:53'!centeredToTheLeft: aMorphOrRectangle	"Se posiciona por la izquierda de aMorphOrRectangle y alinea centrado verticalmente con aMorphOrRectangle.	Self is positioned as shown below:			     -------------------	--------- |      aMorph    |	|  self  | |      (fixed       |	--------- |    position)    |					     ------------------- 					    "	| rectangle |		rectangle := self morphOrRectangleToRectangle: aMorphOrRectangle.	self center: rectangle center.	self position: ( rectangle topLeft - self extent ) x @ self position y.		self positionYourLayoutAreaInYourself! !!PLC_GraphicElementMorph methodsFor: 'alignment' stamp: 'EricPernia 4/30/2013 01:51'!centeredToTheRight: aMorph	"Se posiciona a la derecha de aMorph y alinea centrado verticalmente con aMorph.	Self is positioned as shown below:			     -------------------		     |      aMorph    | ---------		     |      (fixed       | |  self  |		     |    position)    | ---------		     ------------------- 						    "	| rectangle |		rectangle := aMorph bounds.	self center: rectangle center.	self position: ( rectangle topLeft + rectangle extent ) x @ self position y.! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 4/27/2013 04:20'!connectedToBlock 	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Bloque.	Lo implementa PLC_RightPowerRailMorph "	! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 4/27/2013 04:20'!connectedToCoil 	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Bobina.	Lo implementa PLC_RightPowerRailMorph "! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 4/27/2013 04:20'!connectedToContact	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Contacto.	Lo implementa PLC_RightPowerRailMorph "! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 4/27/2013 04:20'!connectedToLeftPowerRail	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Barra Izquierda.	Lo implementa PLC_RightPowerRailMorph "! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 4/27/2013 06:19'!connectedToRightPowerRail	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Barra Derecha"! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 17:22'!leftAndRightConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 17:22'!leftConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 17:21'!rightConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"! !!PLC_GraphicElementMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 05:27'!voidCSL1	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Void que es el estado de capa 1 por defecto"	self connectionStateLayer1: PLC_GraphicElementState voidCSL1.	self changed.! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 01:12'!blockConnectedToInput: anInputNumber	"Devuelve el bloque conectado a la entrada anInputNumber."	^ self owner blockConnectedToInput: anInputNumber for: self.! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 01:12'!blockConnectedToOutput: anOutputNumber	"Devuelve el bloque conectado a la salida anInputNumber."	^ self owner blockConnectedToOutput: anOutputNumber for: self.! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/17/2013 01:52'!connectableBlock	"Devuelve el bloque conectable del Elemento Grafico Morph pidiendoselo a su ladder view."		^ self owner modelElementForGraphicElement: self.! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 01:13'!connectedAtInput: aNumber	"Devuelve la conexion o bloque conectado a la entrada aNumber del elemento"	^ self owner connectedAtInput: aNumber for: self.! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 01:13'!connectedAtOutput: aNumber	"Devuelve la conexion o bloque conectado a la salida aNumber del elemento"	^ self owner connectedAtOutput: aNumber for: self.! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/4/2013 02:16'!element	"Devuelve el elemento del bloque conectable del Elemento Grafico Morph pidiendoselo a su ladder view."		^ self connectableBlock element.! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/14/2013 20:52'!isActualArgument	"Devuelve true si es un RightPowerRail Morph"	^ false.! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 6/30/2013 04:08'!isCoil	"Devuelve true si el elemento grafico es una bobina."	^ false! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 6/30/2013 04:07'!isContact	"Devuelve true si el elemento grafico es un Contacto."	^ false! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 01:13'!isLeftPowerRail	"Devuelve true si el elemento grafico es una Barra derecha."	^ false! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 6/30/2013 04:10'!isPLCBlock	"Devuelve true si el elemento grafico es un Bloque."	^ false! !!PLC_GraphicElementMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/14/2013 20:51'!isRightPowerRail	"Devuelve true si es un RightPowerRail Morph"	^ false.! !!PLC_GraphicElementMorph methodsFor: 'other events' stamp: 'EricPernia 9/6/2012 00:49'!changeFunction	"Estado changeFunction."	"self drawingLayer1: PLC_GraphicElementState unselected.	self changed."! !!PLC_GraphicElementMorph methodsFor: 'other events' stamp: 'EricPernia 9/9/2012 21:02'!lostKeyboardFocus	"Evento que ejecuta el Morph cuando pierde el foco del teclado"! !!PLC_GraphicElementMorph methodsFor: 'ladderView' stamp: 'EricPernia 6/30/2013 04:06'!instanceVariable	"Devuelve la variable de instancia si el elemento contiene. 	Esto sucede en Contacto, Bobina o FB, en los otros devuelve nil"	^ nil.! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/27/2013 03:05'!connectionStateLayer1	^ connectionStateLayer1! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/27/2013 03:05'!connectionStateLayer1: anObject	connectionStateLayer1 := anObject! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/27/2013 03:05'!connectionStateLayer2	^ connectionStateLayer2! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/27/2013 03:05'!connectionStateLayer2: anObject	connectionStateLayer2 := anObject! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/25/2013 15:44'!userInteractionStateLayer1	^ userInteractionStateLayer1! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/25/2013 15:44'!userInteractionStateLayer1: anObject	userInteractionStateLayer1 := anObject! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/25/2013 15:44'!userInteractionStateLayer2	^ userInteractionStateLayer2! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/25/2013 15:44'!userInteractionStateLayer2: anObject	userInteractionStateLayer2 := anObject! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/25/2013 15:44'!userInteractionStateLayer3	^ userInteractionStateLayer3! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/25/2013 15:44'!userInteractionStateLayer3: anObject	userInteractionStateLayer3 := anObject! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/21/2013 11:45'!xPositioned	^ xPositioned! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/21/2013 11:45'!xPositioned: anObject	xPositioned := anObject! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/21/2013 11:45'!yPositioned	^ yPositioned! !!PLC_GraphicElementMorph methodsFor: 'accessing' stamp: 'EricPernia 4/21/2013 11:45'!yPositioned: anObject	yPositioned := anObject! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 11/18/2013 15:23'!changeFunction: anEvent	"Estado changeFunction."! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 4/27/2013 01:50'!draggingAnother	"Estado cuando estaba seleccionado y arrastran otro elemento desde fuera de la network."	self userInteractionStateLayer1: PLC_GraphicElementState draggingAnother.	self changed.		self submorphsPerform: #draggingAnother.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 4/27/2013 01:50'!draggingSelf	"Estado cuando el elemento esta siendo arrastrado por el mouse."	self userInteractionStateLayer1: PLC_GraphicElementState draggingSelf.	self changed.		self submorphsPerform: #draggingSelf.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 4/27/2013 01:48'!keyboardFocus	"Estado con el foco del teclado en el elemento."	self userInteractionStateLayer3: self userInteractionStateLayer1 keyboardFocus.	self changed.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 5/1/2013 15:03'!mouseOut	"Estado cuando el puntero del mouse esta fuera del elemento."	self userInteractionStateLayer2: PLC_GraphicElementState voidState.	self changed.		self submorphsPerform: #mouseOut.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 6/23/2013 06:08'!mouseOver	"Estado cuando el puntero del mouse esta sobre elemento."	self userInteractionStateLayer2: self userInteractionStateLayer1 mouseOver.	self changed.		"self submorphsPerform: #mouseOver."! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 5/15/2012 17:16'!notDragging	"Estado cuando el mouse no trae nada arrastrando."	self changed.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 4/27/2013 01:50'!notKeyboardFocus	"Estado sin el foco del teclado en el elemento."	self userInteractionStateLayer3: PLC_GraphicElementState voidState.	self changed.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 5/14/2012 18:09'!notOverDroppArea 	"Estado desseleccionado.""	self state1: PLC_GraphicElementState unselected.	self changed."! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 5/14/2012 18:10'!notUnderDraggArea 	"Estado desseleccionado.""	self state1: PLC_GraphicElementState unselected.	self changed."! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 5/15/2012 17:16'!overDropArea	"Estado cuando el mouse trae arrastrando un elemento y entra en el area	ddonde un elemento permite el drop del elemento que trae arrastrando 	el mouse."	self changed.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 5/14/2012 18:10'!overDroppArea 	"Estado desseleccionado.""	self state1: PLC_GraphicElementState unselected.	self changed."! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 6/23/2013 23:36'!selected	"Estado seleccionado."	self userInteractionStateLayer1: PLC_GraphicElementState selected.	self changed.		self submorphsPerform: #selected.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 6/24/2012 21:10'!submorphsPerform: aSelector	"Actualiza el estado de los submorphs."		self submorphs do: [ :subMorph |		subMorph perform: aSelector.		]! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 7/14/2012 19:22'!underDragArea	"Estado cuando el mouse trae arrastrando un elemento. Estro genera un area 	grande alreddedor del mouse moviendose y los elementos bajo dicha area	reciben este estado si aceptan el objeto que el mouse trae arrastrando."	self changed.! !!PLC_GraphicElementMorph methodsFor: 'user interaction states' stamp: 'EricPernia 4/27/2013 01:49'!unselected	"Estado desseleccionado."	self userInteractionStateLayer1: PLC_GraphicElementState unselected.	self changed.		self submorphsPerform: #unselected.! !!PLC_GraphicElementMorph methodsFor: 'commands recive from view' stamp: 'EricPernia 7/3/2013 11:01'!addDependentsOnLadderView: aLadderView from: aConnectableBlock	"Agrega sus elementos graficos morphs dependientes al ladder view.	Estos pueden ser Actual Arguments o Pines."	! !!PLC_GraphicElementMorph methodsFor: 'commands recive from view' stamp: 'EricPernia 5/1/2013 23:32'!openBranchOnConnectionFrom: aLadderView	"Si el elemento grafico es un Horizontal Link abre una rama en la conexion. Si no, no hace nada"! !!PLC_GraphicElementMorph methodsFor: 'commands recive from view' stamp: 'EricPernia 5/1/2013 23:32'!removeElementFrom: aLadderView	"Remueve el elemento pidiendoselo a su ladder view. Hace un double dispatching con este"! !!PLC_GraphicElementMorph methodsFor: 'commands recive from view' stamp: 'EricPernia 5/1/2013 23:57'!removeRightPowerRailFrom: aLadderView	"Si es un RPR le envia el mensaje de nuevo al ladder View"		aLadderView removeRightPowerRail: self! !!PLC_GraphicElementMorph methodsFor: 'dependents' stamp: 'EricPernia 7/13/2013 04:08'!elementDependents	"Devuelve una OrderedCollection con sus elementos graficos morphs 	dependientes que agregó al LadderView. En los que no tienen este 	metodo reescrito es porque no poseen dependientes entonces 	devuelve una coleccion vacia."	^ OrderedCollection new.! !!PLC_GraphicElementMorph methodsFor: 'pins' stamp: 'EricPernia 7/14/2013 20:39'!firstPinYDistance	"Devuelve la distancia  en pantalla en Y del primer pin de entrada 	y salida relativa a la posicion vertical de self .	Es la distancia vertical entre la parte de arriba del elemento y el primer pin."		^ 0.! !PLC_GraphicElementMorph subclass: #PLC_GraphicElementWithPinsMorph	instanceVariableNames: 'inputPins outputPins'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_GraphicElementWithPinsMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_GraphicElementWithPinsMorph is xxxxxxxxx.Instance Variables	inputPins:		<Object>	outputPins:		<Object>inputPins	- xxxxxoutputPins	- xxxxx!!PLC_GraphicElementWithPinsMorph methodsFor: 'initialize-release' stamp: 'EricPernia 4/22/2013 01:17'!initialize	"Inicializaciones"	super initialize.	self inputPins: OrderedCollection new.	self outputPins: OrderedCollection new.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'accessing' stamp: 'EricPernia 4/22/2013 01:17'!inputPins	^ inputPins! !!PLC_GraphicElementWithPinsMorph methodsFor: 'accessing' stamp: 'EricPernia 4/22/2013 01:17'!inputPins: anObject	inputPins := anObject! !!PLC_GraphicElementWithPinsMorph methodsFor: 'accessing' stamp: 'EricPernia 4/22/2013 01:17'!outputPins	^ outputPins! !!PLC_GraphicElementWithPinsMorph methodsFor: 'accessing' stamp: 'EricPernia 4/22/2013 01:17'!outputPins: anObject	outputPins := anObject! !!PLC_GraphicElementWithPinsMorph methodsFor: 'layout' stamp: 'EricPernia 4/22/2013 01:17'!xPositionedCascade: aBoolean	"Pone el flag xPosition al valor aBoolean de todos los elementos conectados a sus salidas y sus elementos hacen lo mismo."		| outputGraphicElement |		( 1 to: self outputPins size ) do: [ :ind |				outputGraphicElement := self blockConnectedToOutput: ind.				outputGraphicElement xPositioned: aBoolean.				outputGraphicElement xPositionedCascade: aBoolean.				].! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 6/23/2013 22:29'!addInputPin	"Añade un pin de entrada al elemento."	| pinMorph pos |	pinMorph := PLC_PinMorph new.		( self inputPins size = 0 )		ifTrue: [			pinMorph topLeft: self topLeft + ( 0 @ self firstPinYDistance ).			] 		ifFalse: [			pos := self inputPins last position.			pinMorph position: ( pos x @ ( pos y + self distanceBetweenPins ) ).			].		self addMorph: pinMorph.	self inputPins add: pinMorph.		^ pinMorph.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 6/23/2013 22:31'!addOutputPin	"Añade un pin de salida al elemento."	| pinMorph pos |	pinMorph := PLC_PinMorph new.		( self outputPins size = 0 )		ifTrue: [			pinMorph topRight: self topRight + ( 0 @ self firstPinYDistance ).			] 		ifFalse: [			pos := self outputPins last position.			pinMorph position: ( pos x @ ( pos y + self distanceBetweenPins ) ).			].		self addMorph: pinMorph.	self outputPins add: pinMorph.		^ pinMorph.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 4/28/2013 21:56'!distanceBetweenPins	"Devuelve la distancia en pantalla en Y ente pines del elemento."		^ self minYDistanceBetweenPins.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 6/30/2013 05:26'!getFirstInputPinPosition	"Devuelve la posición en pantalla del primer pin de entrada."		"^ self position."	^ self getPositionForInputPin: 1."Modificado el 30-6-2013"! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 6/30/2013 05:25'!getFirstOutputPinPosition	"Devuelve la posición en pantalla del primer pin de salida."		"^ self topRight - ((self outputPins first extent x) @ 0). "	^ self getPositionForOutputPin: 1. "Modificado el 30-6-2013"! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 4/22/2013 01:19'!getPositionForInputPin: aPinNumber	"Obtiene la posición del pin de entrada número aPinNumber."	^ (self inputPins at: aPinNumber) position.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 4/22/2013 01:19'!getPositionForOutputPin: aPinNumber	"Obtiene la posición del pin de salida número aPinNumber."	^ (self outputPins at: aPinNumber) position.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 4/22/2013 01:19'!minYDistanceBetweenPins	"Devuelve la distancia minima en pantalla en Y ente pines."		^ self properties scale y * self gridExtent y.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 4/22/2013 01:19'!setPositionForInputPin: aPinNumber to: aPosition	"Establece la posición del pin de entrada número aPinNumber en el valor  aPosition."		(self inputPins at: aPinNumber) position: aPosition.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'pins' stamp: 'EricPernia 4/22/2013 01:19'!setPositionForOutputPin: aPinNumber to: aPosition	"Establece la posición del pin de salida número aPinNumber en el valor  aPosition."		(self outputPins at: aPinNumber) position: aPosition.! !!PLC_GraphicElementWithPinsMorph methodsFor: 'draw elements' stamp: 'EricPernia 7/17/2013 01:53'!drawHorizontalLinksFrom: aLadderView	"Dibuja todos los Horizontal Links a las salidas del elemento. 	Los agrega al diccionario elements de aLadderView. 	Por último le dice a los elementos graficos conectados 	a sus salidas que dibujen sus horizontal links."	| connectableBlock horizontalLink connection outputGraphicElement |		connectableBlock := aLadderView modelElementForGraphicElement: self.	"Si no tiene salidas no hace nada!!!!"	( 1 to: self outputPins size ) do: [ :ind |				"Creo el Horizontal Link corespondiente a la salida numero ind."		horizontalLink := PLC_HorizontalLinkMorph new.				"Lo agrego de submorph"		aLadderView addMorphBack: horizontalLink.				"Busco la conexion a la salida numero ind de connectableBlock"		connection := connectableBlock connectedAtOutput: ind.			"Lo agrego al diccionario elementos"		aLadderView elements at: horizontalLink put: connection.					"Lo agrego a la lista de seleccionados y le doy el foco del teclado"		aLadderView selectedAndKeyboardFocus: horizontalLink.				"Posiciono el Horizontal Link"		horizontalLink centeredToTheRight: ( self outputPins at: ind ).				"Actualizo su tamaño"		horizontalLink extentChanged.						"Busco el bloque conectable conectado a la salida numero ind"		outputGraphicElement := self blockConnectedToOutput: ind.				"Dibujo los horizontal links de los elementos conectados a sus salidas"		outputGraphicElement drawHorizontalLinksFrom: aLadderView.				].! !!PLC_GraphicElementWithPinsMorph methodsFor: 'draw elements' stamp: 'EricPernia 8/6/2013 23:46'!outputPinsSize	"Devuelve la cantidad de pines de salida"	^ self outputPins size.! !PLC_GraphicElementWithPinsMorph subclass: #PLC_ContactsAndCoils	instanceVariableNames: 'instanceVariable'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_ContactsAndCoils commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_ContactsAndCoils is xxxxxxxxx.Instance Variables	instanceVariable:		<Object>instanceVariable	- xxxxx!!PLC_ContactsAndCoils methodsFor: 'initialize-release' stamp: 'EricPernia 5/1/2013 15:04'!initialize	"Inicializo el elemento grafico"	super initialize.		self extentChanged.	"Añado los pines"	self addInputPin;		addOutputPin.			"Los hago invisibles"	self submorphs do: [ :morph |		morph visible: false.		].! !!PLC_ContactsAndCoils methodsFor: 'drawing' stamp: 'EricPernia 5/22/2012 19:59'!bottomHBar	"Rectangulo horizontal para tapar el error grafico inferior."	| width height bottomHBar |		width := self properties scale x * 22.	height := self properties scale y * 3.			bottomHBar := Rectangle origin: (0@0) corner: ( width @ height ).		bottomHBar align: bottomHBar bottomCenter with: self bounds bottomCenter.		^ bottomHBar centeredBeneath: self backgroundRectangle.		"^ bottomHBar translateBy: (0 @ 2)."! !!PLC_ContactsAndCoils methodsFor: 'drawing' stamp: 'EricPernia 4/21/2012 22:50'!drawPatchOn: aCanvas	"Parche cuando esta submorph. Hace un error gráfico que se dibuja fuera del canvas.	Si no es submorph de nadie nunca se dibuja fuera del canvas"			aCanvas fillRectangle: self topHBar color: self owner color;		fillRectangle: self bottomHBar color: self owner color.! !!PLC_ContactsAndCoils methodsFor: 'drawing' stamp: 'EricPernia 4/21/2012 04:03'!leftHBar	"Cable izquierdo del elemento."	^ self hBar align: self hBar leftCenter with: self bounds leftCenter.! !!PLC_ContactsAndCoils methodsFor: 'drawing' stamp: 'EricPernia 4/21/2012 04:03'!rightHBar	"Cable derecho del elemento."	^ self hBar align: self hBar rightCenter with: self bounds rightCenter.! !!PLC_ContactsAndCoils methodsFor: 'drawing' stamp: 'EricPernia 5/22/2012 20:06'!topHBar	"Rectangulo horizontal para tapar el error grafico superior."	| width height topHBar |		width := self properties scale x * 22.	height := self properties scale y * 3.			topHBar := Rectangle origin: (0@0) corner: ( width @ height ).		^ topHBar align: topHBar topCenter with: self bounds topCenter - ( 0 @ 1).		"^ topHBar translateBy: (0 @ 2)."! !!PLC_ContactsAndCoils methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 02:10'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self properties scale * ( 72 @ 14 ).! !!PLC_ContactsAndCoils methodsFor: 'extent' stamp: 'EricPernia 4/25/2013 00:34'!defaultExtent	"Tamaño por defecto"		^ self properties scale * ( 72 @ super defaultExtent y ).! !!PLC_ContactsAndCoils methodsFor: 'extent' stamp: 'EricPernia 4/25/2013 00:33'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self defaultExtent.! !!PLC_ContactsAndCoils methodsFor: 'accessing' stamp: 'EricPernia 6/22/2013 02:15'!instanceVariable	^ instanceVariable! !!PLC_ContactsAndCoils methodsFor: 'accessing' stamp: 'EricPernia 6/22/2013 02:16'!instanceVariable: anObject	instanceVariable := anObject! !!PLC_ContactsAndCoils methodsFor: 'layout' stamp: 'EricPernia 7/9/2013 03:23'!layoutOn: aLadderView from: aGraphicElement output: anOutputNumber	"El elemento se posiciona dentro del ladderView."	"Alineo Horizontalmente a este elemento gráfico."	self layoutHorizontallyOn: aLadderView from: aGraphicElement output: anOutputNumber.		"Alineo Verticalmnete su grupo."	self layoutGroupVerticallyOn: aLadderView from: aGraphicElement output: anOutputNumber.		"Posiciono el elemento conectado a la su salida."	self layoutOutputsOn: aLadderView from: aGraphicElement output: anOutputNumber.! !!PLC_ContactsAndCoils methodsFor: 'layout' stamp: 'EricPernia 7/7/2013 18:10'!layoutRectangle	"Devuelve el rectángulo para acomodar en pantalla los elementos entre si."	| contactLayoutRectangle variableLayoutRectangle |		contactLayoutRectangle := Rectangle 		origin: ( 0 @ 0 )		corner: self layoutRectangleExtent.			contactLayoutRectangle := contactLayoutRectangle translateBy: self position + self layoutRectanglePosition.		self instanceVariable 		ifNil: [			variableLayoutRectangle := self instanceVariable layoutRectangle.			^ contactLayoutRectangle.			]		ifNotNil: [			variableLayoutRectangle := self instanceVariable layoutRectangle.			^ contactLayoutRectangle merge: variableLayoutRectangle.			].! !!PLC_ContactsAndCoils methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 02:12'!addToGroup: aGroup	"El elemento Contacto o Bobina se añade al grupo pasado como parámetro.	Luego le envía este mismo mensaje al elemento conectado a su salida."	"Añado el elemento al grupo."	aGroup add: self.		"Le envío este mismo mensaje al elemento conectado a su salida."	( self blockConnectedToOutput: 1 ) addToGroup: aGroup. ! !!PLC_ContactsAndCoils methodsFor: 'position' stamp: 'EricPernia 7/7/2013 18:07'!position: aPoint	"Establece la posicion en pantalla del elemento. 	En el caso de los contactos y bobinas además reacomoda su variable asociada."		super position: aPoint.		self instanceVariable 		ifNotNil: [			self instanceVariable alignCenteredAbove: self			].! !!PLC_ContactsAndCoils methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 7/3/2013 11:03'!addDependentsOnLadderView: aLadderView from: aConnectableBlock	"Agrega sus elementos graficos morphs dependientes al ladder view.	Estos pueden ser Actual Arguments o Pines."	| variableConnectableBlock variableGraficElement |	"Busco la variable del modelo"	variableConnectableBlock := aConnectableBlock element connectableBlockActualArgumentFor: aConnectableBlock.		"Busco la variable grafica del elemento"	variableGraficElement := self instanceVariable.		"La agrego de submorph al ladderView"	aLadderView addMorph: variableGraficElement.		"Agrego la variable al diccionario elements"	aLadderView elements at: variableGraficElement put: variableConnectableBlock.		"Lo agrego a la lista de seleccionados y le doy el foco del teclado"	aLadderView selectedAndKeyboardFocus: variableGraficElement.	! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/14/2013 22:42'!layoutRectangleExtentConnectedToLeftPowerRailOutput1	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self voidLayoutRectangleExtent.! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/14/2013 22:42'!layoutRectangleExtentNotConnectedToLeftPowerRailOutput1	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self voidLayoutRectangleExtent.! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 19:30'!leftAndRightConnectedToVerticalLinkLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ ( super defaultExtent x - ( self properties scale x * 8 ) ) @ ( self defaultExtent y * 2 ).! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 18:47'!leftAndRightConnectedToVerticalLinkLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -8 @ 0 ).! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 19:30'!leftConnectedToVerticalLinkLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ ( super defaultExtent x - ( self properties scale x * 4 ) ) @ ( self defaultExtent y * 2 ).! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 18:48'!leftConnectedToVerticalLinkLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -8 @ 0 ).! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 19:30'!rightConnectedToVerticalLinkLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ ( super defaultExtent x - ( self properties scale x * 4 ) ) @ ( self defaultExtent y * 2 ).! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 18:48'!rightConnectedToVerticalLinkLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -12 @ 0 ).! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 05:36'!voidLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ super defaultExtent x @ ( self defaultExtent y * 2 ).! !!PLC_ContactsAndCoils methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 18:48'!voidLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -12 @ 0 ).! !!PLC_ContactsAndCoils methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 17:20'!leftAndRightConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"	self connectionStateLayer1: PLC_GraphicElementState leftAndRightConnectedToVerticalLink.	self changed.! !!PLC_ContactsAndCoils methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 18:31'!leftConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"	self connectionStateLayer1 leftConnectedToVerticalLinkFor: self.! !!PLC_ContactsAndCoils methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 17:21'!rightConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"	self connectionStateLayer1 rightConnectedToVerticalLinkFor: self.! !!PLC_ContactsAndCoils methodsFor: 'dependents' stamp: 'EricPernia 7/13/2013 04:08'!elementDependents	"Devuelve una OrderedCollection con sus elementos graficos morphs 	dependientes que agregó al LadderView. En Contactos y Bobinas es	su Actual Argument de instancia."	| collection |		collection := OrderedCollection new.		collection add: self instanceVariable.				^ collection.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_ContactsAndCoils class	instanceVariableNames: ''!!PLC_ContactsAndCoils class methodsFor: 'instance creation' stamp: 'EricPernia 7/14/2013 05:27'!newFromConnectableBlock: aConnectableBlock	"Nueva isntancia a partir de un elemento de un bloque conectable"	| graphicElem graphicVar |	"Creo el elemento grafico"		graphicElem := self new.	"Busco la variable del modelo y le pido su grafico"	graphicVar := ( graphicElem instanceVariableFor: aConnectableBlock ) graphicElement.		"Asigno al elemento grafico su variable morph"	graphicElem instanceVariable: graphicVar.	"Asigno a la variable morph el elemento grafico"	graphicVar graphicElement: graphicElem.		"Alineo la variable grafica al elemento grafico centrada sobre este"	graphicVar alignAbove: graphicElem.	"graphicVar alignCenteredAbove: graphicElem."		"Lo posiciono fuera del ladderView para que no moleste cuando	hago layout"	graphicElem position: graphicElem position - graphicElem layoutRectangle extent.		^ graphicElem.! !PLC_ContactsAndCoils subclass: #PLC_CoilMorph	instanceVariableNames: 'isConnectedToRightPowerRail'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_CoilMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_CoilMorph is xxxxxxxxx.Instance Variables	isConnectedToRightPowerRail:		<Object>isConnectedToRightPowerRail	- xxxxx!!PLC_CoilMorph methodsFor: 'layout' stamp: 'EricPernia 7/8/2013 02:40'!connectedToRightPowerRailLayoutHorizontallyLeft: aDistanceX	"Como esta conectado a un RPR lo alineo a izquierda de este"		"Alineo el elemento a aDistanceX como si fuese un contacto."	"Alineando a derecha incicialemente me aseguro que la Bobina no pise ningun morph pues reserva el lugar."		self layoutLeft: aDistanceX.	"Alineo el RightPowerRail a derecha de la bobina"	(self blockConnectedToOutput: 1) layoutHorizontallyLeft: super layoutRectangle right.	"Alineo la Bobina a izquierda del RightPowerRail"				self layoutLeft: (self blockConnectedToOutput: 1) layoutRectangle left - super layoutRectangle extent x.	"	Transcript show: ( (self blockConnectedToOutput: 1) layoutRectangle left - super layoutRectangle extent x ) asString , ''."! !!PLC_CoilMorph methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 21:32'!layoutHorizontallyLeft: aDistanceX	"self se posiciona  de alguna manera con respecto a aDistanceX. 	self solo se mueve horizontalmente."	self isConnectedToRightPowerRail		ifTrue: [ 			self connectedToRightPowerRailLayoutHorizontallyLeft: aDistanceX			] 		ifFalse: [ 			self notConnectedToRightPowerRailLayoutHorizontallyLeft: aDistanceX			].! !!PLC_CoilMorph methodsFor: 'layout' stamp: 'EricPernia 7/8/2013 00:15'!notConnectedToRightPowerRailLayoutHorizontallyLeft: aDistanceX	"Como NO esta conectado a un RPR solo alineo el elemento a aDistanceX como si fuese un contacto."		self layoutLeft: aDistanceX.! !!PLC_CoilMorph methodsFor: 'drawing' stamp: 'EricPernia 4/21/2012 04:00'!centralCircle	"Circulo centra para dibujar la bobina, se ve como ( ) debido a que se corta."	| width height rectangle origin corner |		width := (self properties scale x * 20) rounded.	height := (self properties scale y * 20) rounded.		rectangle := Rectangle origin: (0@0) corner: ( width @ height ).	^ rectangle align: rectangle center with: self bounds center.			"origin := self position + (self extent / 2.0) rounded - (width /2.0) rounded.	corner := origin + (width @ height).	^ Rectangle origin: origin corner: corner."! !!PLC_CoilMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 02:12'!drawElementOn: aCanvas	"Dibuja el elemento"	aCanvas fillRectangle: self leftHBar color: self userInteractionStateLayer1 elementColor;		fillRectangle: self rightHBar color: self userInteractionStateLayer1 elementColor;		fillOval: self centralCircle 			color: self userInteractionStateLayer1 backgroundColor 			borderWidth: self leftHBar extent y 			borderColor: self userInteractionStateLayer1 elementColor.	self drawPatchOn: aCanvas.! !!PLC_CoilMorph methodsFor: 'drawing' stamp: 'EricPernia 4/22/2013 13:25'!hBar	"Barra horizontal que representa el cable de la bobina"	| width height hBar|		width := (self properties scale x * 28) rounded. "Redondeo explicitamente para que se dibuje bien."	 "28"	height := (self properties scale y * 2) rounded.	"2"		hBar := Rectangle origin: (0@0) corner: ( width @ height ).		^ hBar align: hBar center with: self bounds center.! !!PLC_CoilMorph methodsFor: 'instance variable' stamp: 'EricPernia 6/22/2013 01:55'!instanceVariableFor: aConnectableBlock	"Devuelve el bloque conectable de la variable desde el bloque conectable del elemento"	^ aConnectableBlock blockConnectedToOutput: 2! !!PLC_CoilMorph methodsFor: 'connection states' stamp: 'EricPernia 7/6/2013 16:12'!updateOutputsConnectonStates	"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."		| outputGraphicElement |			"Busco el elemento grafico conectado a la salida numero 1"	outputGraphicElement := self blockConnectedToOutput: 1.		"Cambio el estado de conexion de capa 2 al que traiga el elemento actual"	outputGraphicElement connectedToLeftPowerRailTroughFirstOutputPin.			"El estado de conexion de capa 1 es conectado a self"	outputGraphicElement connectedToCoil.		"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."	outputGraphicElement updateOutputsConnectonStates.! !!PLC_CoilMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 5/1/2013 22:44'!removeElementFrom: aLadderView	"Remueve el elemento pidiendoselo a su ladder view. Hace un double dispatching con este"		aLadderView removeCoil: self.! !!PLC_CoilMorph methodsFor: 'model exploration' stamp: 'EricPernia 6/30/2013 04:08'!isCoil	"Devuelve true si el elemento grafico es una bobina."	^ true! !!PLC_CoilMorph methodsFor: 'initialize-release' stamp: 'EricPernia 7/8/2013 00:27'!initialize	"Inicializo el elemento grafico"	super initialize.		isConnectedToRightPowerRail := false.! !!PLC_CoilMorph methodsFor: 'accessing' stamp: 'EricPernia 7/8/2013 00:25'!connectedToRightPowerRail		self isConnectedToRightPowerRail: true.! !!PLC_CoilMorph methodsFor: 'accessing' stamp: 'EricPernia 7/8/2013 00:25'!isConnectedToRightPowerRail		^ isConnectedToRightPowerRail! !!PLC_CoilMorph methodsFor: 'accessing' stamp: 'EricPernia 7/8/2013 00:26'!isConnectedToRightPowerRail: anObject		isConnectedToRightPowerRail := anObject! !!PLC_CoilMorph methodsFor: 'position' stamp: 'EricPernia 7/8/2013 02:41'!layoutRectangleRelativePosition	"Posicion relativa entre el layoutRectangle y el position del elemento	MODIFICADO para que no genere errores con respecto al 	layoutRectangle calculado al acomodar bobinas en pantalla.		SI SACO ESTE METODO NO ACOMODA BIEN LAS BOBINAS"	^ self topLeft - super layoutRectangle topLeft.! !PLC_GraphicElementWithPinsMorph subclass: #PLC_BlockMorph	instanceVariableNames: 'modelElement instanceVariable inputFormalParameters outputFormalParameters'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_BlockMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_BlockMorph is xxxxxxxxx.Instance Variables	inputFormalParameters:		<Object>	instanceVariable:		<Object>	modelElement:		<Object>	outputFormalParameters:		<Object>inputFormalParameters	- xxxxxinstanceVariable	- xxxxxmodelElement	- xxxxxoutputFormalParameters	- xxxxx!!PLC_BlockMorph methodsFor: 'drawing' stamp: 'EricPernia 6/23/2013 21:48'!blockHeadRectangle	"Rectangulo de la cabecera de bloque."	| width height blockHead |		width := self backgroundRectangle extent x - ( self properties scale x * 2 ).	height := self headHeight - ( self properties scale y ).			blockHead := Rectangle origin: (0@0) corner: ( width @ height ).		^ blockHead align: blockHead topLeft with: self bounds topLeft + self properties scale.! !!PLC_BlockMorph methodsFor: 'drawing' stamp: 'EricPernia 6/22/2013 01:49'!bottomHBar	"Rectangulo horizontal para tapar el error grafico inferior."	| width height bottomHBar |		width := self properties scale x * 22.	height := self properties scale y * 3.			bottomHBar := Rectangle origin: (0@0) corner: ( width @ height ).		bottomHBar align: bottomHBar bottomCenter with: self bounds bottomCenter.		^ bottomHBar centeredBeneath: self backgroundRectangle.		"^ bottomHBar translateBy: (0 @ 2)."! !!PLC_BlockMorph methodsFor: 'drawing' stamp: 'EricPernia 6/22/2013 02:09'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		aCanvas 		fillRectangle: self backgroundRectangle 		color: self userInteractionStateLayer1 blockBodyColor.! !!PLC_BlockMorph methodsFor: 'drawing' stamp: 'EricPernia 6/23/2013 16:47'!drawElementOn: aCanvas	"Dibujo el cuadro de la cabecera de bloque."	aCanvas fillRectangle: self blockHeadRectangle color: self userInteractionStateLayer1 blockFootAndHeaderColor.! !!PLC_BlockMorph methodsFor: 'drawing' stamp: 'EricPernia 6/22/2013 01:49'!drawPatchOn: aCanvas	"Parche cuando esta submorph. Hace un error gráfico que se dibuja fuera del canvas.	Si no es submorph de nadie nunca se dibuja fuera del canvas"			aCanvas fillRectangle: self topHBar color: self owner color;		fillRectangle: self bottomHBar color: self owner color.! !!PLC_BlockMorph methodsFor: 'extent' stamp: 'EricPernia 6/23/2013 06:01'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self totalExtent - ( 0 @ ((self properties scale y) * 12) )! !!PLC_BlockMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:08'!defaultExtent	"Tamaño por defecto"		^ self elementWidth @ ( self properties scale y * super defaultExtent y * 3 ).! !!PLC_BlockMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:57'!elementDoubleWidth	"Doble ancho del elemento"	^ self properties scale x * 180.! !!PLC_BlockMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:07'!elementWidth	"Ancho estandar del elemento"	^ self properties scale x * 84.! !!PLC_BlockMorph methodsFor: 'extent' stamp: 'EricPernia 6/23/2013 05:59'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self extent.! !!PLC_BlockMorph methodsFor: 'accessing' stamp: 'EricPernia 7/9/2013 18:41'!inputFormalParameters		^ inputFormalParameters! !!PLC_BlockMorph methodsFor: 'accessing' stamp: 'EricPernia 7/9/2013 18:41'!inputFormalParameters: anObject		inputFormalParameters := anObject! !!PLC_BlockMorph methodsFor: 'accessing' stamp: 'EricPernia 6/22/2013 03:17'!instanceVariable	"Es el morph Acrual Argument sobre el bloque"	^ instanceVariable! !!PLC_BlockMorph methodsFor: 'accessing' stamp: 'EricPernia 6/22/2013 02:12'!instanceVariable: anObject	instanceVariable := anObject! !!PLC_BlockMorph methodsFor: 'accessing' stamp: 'EricPernia 7/4/2013 02:32'!modelElement		^ modelElement! !!PLC_BlockMorph methodsFor: 'accessing' stamp: 'EricPernia 7/4/2013 02:32'!modelElement: anObject		modelElement := anObject! !!PLC_BlockMorph methodsFor: 'accessing' stamp: 'EricPernia 7/9/2013 18:41'!outputFormalParameters		^ outputFormalParameters! !!PLC_BlockMorph methodsFor: 'accessing' stamp: 'EricPernia 7/9/2013 18:41'!outputFormalParameters: anObject		outputFormalParameters := anObject! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/11/2013 02:34'!layoutInputActualArguments	"Posiciono los Actual Arguments conectados a sus entradas.	Este método es válido para cuando el bloque tiene sólamente 	Actual arguments conectados a sus entradas a partir de la 	segunda. No si tiene Contactos o Bobinas."		| inputFormalParameter nextInputFormalParameter inputPin inputActualArgument |		"Alineo los Actual Arguments de salidas a partir de la segunda"	( 2 to: self inputPins size ) do: [ :index |				"Obtengo el Formal Parameter a su salida numero index"		inputFormalParameter := self inputFormalParameters at: index.				"Obtengo el Pin a su entrada numero index"		inputPin := self inputPins at: index.				"Obtengo el Actual Argument conectado a su entrada numero index"		inputActualArgument := self blockConnectedToInput: index.					"Posiciono en pantalla Horizontal y Verticalmente el Actual Argument obtenido."		inputActualArgument layoutTop: inputFormalParameter top.		inputActualArgument layoutLeft: inputPin left - inputActualArgument layoutRectangle extent x.				"Actualizo la posición Vertical del Formal Parameter de dicha entrada. 		Esto es para cuando el texto del Actual Argument es de más de una línea."		inputActualArgument bottom: ( inputActualArgument bottom max: inputFormalParameter bottom ).		inputFormalParameter bottom: inputActualArgument bottom.				"En caso de ser un inOutFP Actualizo su inputInOutFP asociada."		( inputFormalParameter inOutFPAssociated )			ifNotNil: [ 				inputFormalParameter inOutFPAssociated 					updateOutputInOutFPAssociatedVerticalPosition.				] .				"Actualizo la posicion Vertical del Formal Parameter siguiente si existe"		( index < self inputPins size )			ifTrue: [ 				nextInputFormalParameter := self inputFormalParameters at: index + 1. 				nextInputFormalParameter top: inputFormalParameter bottom. 				].					].! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/11/2013 02:38'!layoutOn: aLadderView from: aGraphicElement output: anOutputNumber	"El elemento se posiciona dentro del ladderView."	"Actualizo los estados de alineacion de los elementos conectados a sus entradas y salidas"	self updateConnectedMorphsAlignStates.		"Alineo Horizontalmente a este elemento gráfico."	self layoutHorizontallyOn: aLadderView from: aGraphicElement output: anOutputNumber.	"Alineo Horizontalmente sus pines."	self layoutHorizontallyPins.			"Alineo Verticalmente su grupo."	self layoutGroupVerticallyOn: aLadderView from: aGraphicElement output: anOutputNumber.		"Posiciono sus Actual Arguments de entrada a partir de la segunda"	self layoutInputActualArguments.	"Posiciono los Actual Arguments de salidas a partir de la segunda"	self layoutOutputActualArguments.		"Actualizo el tamaño del bloque"	self extent: self bodyExtent.	"Actualizo la posicion Vertical de los pines"	self layoutVerticallyPins.			"Posiciono el elemento conectado a su primer salida."	self layoutOutputsOn: aLadderView from: aGraphicElement output: anOutputNumber.		! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/11/2013 02:25'!layoutOutputActualArguments	"Posiciono los Actual Arguments conectados a sus salidas."		| outputFormalParameter nextOutputFormalParameter outputPin outputActualArgument |		"Alineo los Actual Arguments de salidas a partir de la segunda"	( 2 to: self outputPins size ) do: [ :index |				"Obtengo el Formal Parameter a su salida numero index"		outputFormalParameter := self outputFormalParameters at: index.				"Obtengo el Pin a su salida numero index"		outputPin := self outputPins at: index.				"Obtengo el Actual Argument conectado a su salida numero index"		outputActualArgument := self blockConnectedToOutput: index.					"Posiciono en pantalla Horizontal y Verticalmente el Actual Argument obtenido."		outputActualArgument layoutTop: outputFormalParameter top.		outputActualArgument layoutLeft: outputPin right.				"Actualizo la posición Vertical del Formal Parameter de dicha salida. 		Esto es para cuando el texto del Actual Argument es de más de una línea."		outputActualArgument bottom: ( outputActualArgument bottom max: outputFormalParameter bottom ).		outputFormalParameter bottom: outputActualArgument bottom.				"En caso de ser un inOutFP Actualizo su inputInOutFP asociada."		( outputFormalParameter inOutFPAssociated )			ifNotNil: [ 				outputFormalParameter inOutFPAssociated 					updateInputInOutFPAssociatedVerticalPosition.				] .				"Actualizo la posicion Vertical del Formal Parameter siguiente si existe"		( index < self outputPins size )			ifTrue: [ 				nextOutputFormalParameter := self outputFormalParameters at: index + 1. 				nextOutputFormalParameter top: outputFormalParameter bottom. 				].					].! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/11/2013 02:34'!layoutOutputsOn: aLadderView from: aGraphicElement output: anOutputNumber	"Posiciono el elemento conectado a su primer salida."		"Posiciono el elemento conectado a la primer salida"	super layoutOutputsOn: aLadderView from: aGraphicElement output: anOutputNumber.! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 6/30/2013 05:36'!layoutRectangle	"Devuelve el rectángulo para acomodar en pantalla los elementos entre si."	| blockLayoutRectangle variableLayoutRectangle |		blockLayoutRectangle := Rectangle 		origin: ( 0 @ 0 )		corner: self layoutRectangleExtent.			blockLayoutRectangle := blockLayoutRectangle translateBy: self position + self layoutRectanglePosition.		self instanceVariable		ifNil: [ 			^ blockLayoutRectangle.			]		ifNotNil: [ 			variableLayoutRectangle := self instanceVariable layoutRectangle.			^ blockLayoutRectangle merge: variableLayoutRectangle.			].			! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/9/2013 17:44'!layoutRectangleForGroup	"Devuelve el rectángulo para acomodar en pantalla los elementos 	entre si que usan los grupos azules."	^ Rectangle origin: self layoutRectangle topLeft 			corner: ( self layoutRectangle right @ ( self headHeight + self gridExtent y ) ).					"ARREGLARRRRRRRRRRRRRRRRRRRRRRRRRRR"! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/9/2013 20:31'!layoutVerticallyInputPins	"Posiciona verticalmente los Pines de entrada."		| formalParameter inputPin |	( 1 to: self inputPins size ) do: [ :idx |				"Obtengo el inputFormalParameter"		formalParameter := self inputFormalParameters at: idx.				"Obtengo el inputPin"		inputPin := self inputPins at: idx.				"Establezco su posicion Vertical"		inputPin bottom: formalParameter bottom. 				].! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/9/2013 20:30'!layoutVerticallyOutputPins	"Posiciona verticalmente los Pines de salida."		| formalParameter outputPin |	( 1 to: self outputPins size ) do: [ :idx |				"Obtengo el inputFormalParameter"		formalParameter := self outputFormalParameters at: idx.				"Obtengo el outputPin"		outputPin := self outputPins at: idx.				"Establezco su posicion Vertical"		outputPin bottom: formalParameter bottom. 				].! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/9/2013 20:32'!layoutVerticallyPins	"Posiciona verticalmente los Pines."		self layoutVerticallyInputPins;		layoutVerticallyOutputPins.! !!PLC_BlockMorph methodsFor: 'layout' stamp: 'EricPernia 7/11/2013 02:20'!updateConnectedMorphsAlignStates	"Actualiza los estados de alineación de sus Actual Arguments."		| inputGraphicElement outputGraphicElement |		( 2 to: self inputPins size ) do: [ :index | 				"Busco el elemento conectado a la entrada número index"				inputGraphicElement := self blockConnectedToInput: index.				"Cambio su estado a alineado a derecha"		inputGraphicElement rightAlign.				].		( 2 to: self outputPins size ) do: [ :index | 				"Busco el elemento conectado a la entrada número index"				outputGraphicElement := self blockConnectedToOutput: index.				"Cambio su estado a alineado a izquierda"		outputGraphicElement leftAlign.				].! !!PLC_BlockMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/9/2013 20:58'!addToGroup: aGroup	"El elemento Bloque se añade al grupo pasado como parámetro.	Luego le envía este mismo mensaje al elemento conectado a su	primer salida."	"Añado el elemento al grupo."	aGroup add: self.		"Le envío este mismo mensaje al elemento conectado a su 	primer salida."	( self blockConnectedToOutput: 1 ) addToGroup: aGroup. ! !!PLC_BlockMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/4/2013 02:34'!element	"Devuelve el elemento seteado cuando se crea el Elemento Grafico Morph"	^ self modelElement.! !!PLC_BlockMorph methodsFor: 'model exploration' stamp: 'EricPernia 6/30/2013 04:10'!isPLCBlock	"Devuelve true si el elemento grafico es un Bloque."	^ true! !!PLC_BlockMorph methodsFor: 'position' stamp: 'EricPernia 6/23/2013 16:29'!backgroundRectanglePosition	"Devuelve la posición en pantalla del backgroundRectangle relativa a position del elemento [px]."		^ self properties scale * ( 0 @ 0 ).! !!PLC_BlockMorph methodsFor: 'position' stamp: 'EricPernia 7/9/2013 20:54'!position: aPoint	"Establece la posicion en pantalla del elemento. 	En el caso de los contactos y bobinas además reacomoda su variable asociada."		super position: aPoint.			"Actualizo la posicion en pantalla de sus dependientes"		self instanceVariable		ifNotNil: [			self instanceVariable alignCenteredAbove: self.			].! !!PLC_BlockMorph methodsFor: 'connection states' stamp: 'EricPernia 7/6/2013 16:49'!updateOutputsConnectonStates	"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."		| outputGraphicElement |			"Busco el elemento grafico conectado a la salida numero 1"	outputGraphicElement := self blockConnectedToOutput: 1.		"Cambio el estado de conexion de capa 2 al que traiga el elemento actual"	outputGraphicElement connectionStateLayer2: self connectionStateLayer2.	outputGraphicElement changed.			"El estado de conexion de capa 1 es conectado a self"	outputGraphicElement connectedToBlock.		"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."	outputGraphicElement updateOutputsConnectonStates.! !!PLC_BlockMorph methodsFor: 'commands recive from formal parameters' stamp: 'EricPernia 7/9/2013 19:47'!formalParameterWithDoubleWidth	"Mensaje que se ejecuta cuando algún Formal Parameter Morph 	necesita el doble del ancho de bloque."	self doubleWidth.! !!PLC_BlockMorph methodsFor: 'commands recive from formal parameters' stamp: 'EricPernia 7/11/2013 02:43'!inputInOutFPVerticallyChanged: inOutFP	"Mensaje que se ejecuta cuando algún In Out Formal Parameter Morph 	cambia su posicion vertical y notifica al bloque."	| index actualArgumentMorph |	"Obtengo el indice de inOutFP"	index := self inputFormalParameters indexOf: inOutFP.! !!PLC_BlockMorph methodsFor: 'commands recive from formal parameters' stamp: 'EricPernia 7/10/2013 01:59'!outputInOutFPVerticallyChanged: inOutFP	"Mensaje que se ejecuta cuando algún In Out Formal Parameter Morph 	cambia su posicion vertical y notifica al bloque."	| index actualArgumentMorph |	"Obtengo el indice de inOutFP"	index := self outputFormalParameters indexOf: inOutFP.		"Obtengo el Actual Argument conectado a la salida numero index"	"actualArgumentMorph := self blockConnectedToOutput: index."		"Posiciono verticalmente el Actual Argument"		"HACERRRRRRRRRRRRRRRRRRRRRR"	! !!PLC_BlockMorph methodsFor: 'dependents' stamp: 'EricPernia 7/13/2013 04:04'!elementDependents	"Devuelve una OrderedCollection con sus elementos graficos morphs 	dependientes que agregó al LadderView. Estos pueden ser 	Actual Arguments o Pines."	| collection |		collection := OrderedCollection new.		collection addAll: self inputPins; 		addAll: self outputPins.		"addAll: self inputActualArguments ."				^ collection.! !!PLC_BlockMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 7/11/2013 01:55'!addDependentsOnLadderView: aLadderView from: aConnectableBlock	"Agrega sus elementos graficos morphs dependientes al ladder view.	Estos pueden ser Actual Arguments o Pines. aConnectableBlock es el 	bloque conectable asociado a este morph."	"Añado el Actual Argument Morph de variable de instancia si su elemento es llamado a Function Block"	"self addInstanceOnLadderView: aLadderView from: aConnectableBlock."		"Añado los pines de Entrada."	self addInputPinsOnLadderView: aLadderView from: aConnectableBlock.		"Añado los Actual Argument Morph conectados a sus Entrada."	self addInputActualArgumentsOnLadderView: aLadderView from: aConnectableBlock.		"Añado los pines de Salida."	self addOutputPinsOnLadderView: aLadderView from: aConnectableBlock.! !!PLC_BlockMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 7/11/2013 02:08'!addInputActualArgumentsOnLadderView: aLadderView from: aConnectableBlock	"Agrega sus Actual Arguments de entrada al ladder view. aConnectableBlock es el 	bloque conectable asociado a este morph."	| actualArgumentConnectableBlock actualArgumentGraphicElementMorph |	"Añados sus Actual Arguments de Entrada. Es a partir del 2 pues a la primer 	entrada siempre tiene otro elemento"		( 2 to: self inputPins size ) do: [ :index |				"Busco el bloque conectable del Actual Argument de entrada"		actualArgumentConnectableBlock := aConnectableBlock blockConnectedToInput: index.				"Creo el elemento grafico."		actualArgumentGraphicElementMorph := actualArgumentConnectableBlock graphicElement.			"Lo agrego de submorph"		aLadderView addMorph: actualArgumentGraphicElementMorph.			"Lo agrego al diccionario elementos"		aLadderView elements at: actualArgumentGraphicElementMorph put: actualArgumentConnectableBlock.					"Lo agrego a la lista de seleccionados y le doy el foco del teclado"		aLadderView selectedAndKeyboardFocus: actualArgumentGraphicElementMorph.		].	! !!PLC_BlockMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 7/11/2013 01:57'!addInputPinsOnLadderView: aLadderView from: aConnectableBlock	"Agrega sus pines de entrada dependientes al ladder view. 	aConnectableBlock es el bloque conectable asociado a este morph."	| dependenGraficElementMorph dependentConnectableBlockPin |		"Añado los pines de Entrada."		( 1 to: self inputPins size ) do: [ :index |				"Busco el morph dependiente"		dependenGraficElementMorph := self inputPins at: index.								"Obtengo el pin correspondiente del bloque conectable de dependenGraficElementMorph."		dependentConnectableBlockPin := aConnectableBlock inputs at: index.			"Agrego el dependenGraficElementMorph de submorph al ladderView"		aLadderView addMorph: dependenGraficElementMorph.			"Agrego el dependenGraficElementMorph al diccionario elements"		aLadderView elements at: dependenGraficElementMorph put: dependentConnectableBlockPin.			"Lo agrego a la lista de seleccionados y le doy el foco del teclado"		aLadderView selectedAndKeyboardFocus: dependenGraficElementMorph.		].! !!PLC_BlockMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 7/10/2013 02:16'!addInstanceOnLadderView: aLadderView from: aConnectableBlock	"Agrega sus elementos graficos morphs dependientes al ladder view.	Estos pueden ser Actual Arguments o Pines."	| variableConnectableBlock variableGraficElement |		"Añado el Actual Argument Morph de variable de instancia si su elemento es llamado a Function Block"	"Busco la variable del modelo"	variableConnectableBlock := aConnectableBlock element connectableBlockActualArgumentFor: aConnectableBlock.		"Busco la variable grafica del elemento"	variableGraficElement := self instanceVariable.		"La agrego de submorph al ladderView"	aLadderView addMorph: variableGraficElement.		"Agrego la variable al diccionario elements"	aLadderView elements at: variableGraficElement put: variableConnectableBlock.		"Lo agrego a la lista de seleccionados y le doy el foco del teclado"	aLadderView selectedAndKeyboardFocus: variableGraficElement.! !!PLC_BlockMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 7/11/2013 01:57'!addOutputPinsOnLadderView: aLadderView from: aConnectableBlock	"Agrega sus pines de salida dependientes al ladder view. 	aConnectableBlock es el bloque conectable asociado a este morph."	| dependenGraficElementMorph dependentConnectableBlockPin |		"Añado los pines de Salida."		( 1 to: self outputPins size ) do: [ :index |				"Busco el morph dependiente"		dependenGraficElementMorph := self outputPins at: index.								"Obtengo el pin correspondiente del bloque conectable de dependenGraficElementMorph."		dependentConnectableBlockPin := aConnectableBlock outputs at: index.			"Agrego el dependenGraficElementMorph de submorph al ladderView"		aLadderView addMorph: dependenGraficElementMorph.			"Agregoel dependenGraficElementMorph al diccionario elements"		aLadderView elements at: dependenGraficElementMorph put: dependentConnectableBlockPin.			"Lo agrego a la lista de seleccionados y le doy el foco del teclado"		aLadderView selectedAndKeyboardFocus: dependenGraficElementMorph.		].! !!PLC_BlockMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 7/16/2013 18:51'!removeElementFrom: aLadderView	"Remueve el elemento pidiendoselo a su ladder view. Hace un double dispatching con este"		aLadderView removeFunctionCall: self.! !!PLC_BlockMorph methodsFor: 'instance variable' stamp: 'EricPernia 6/30/2013 05:47'!instanceVariableFor: aConnectableBlock	"Devuelve el bloque conectable de la variable instancia, (si tiene) desde el bloque conectable del elemento."	self element isFunction		ifTrue: [ 			^ nil.			] 		ifFalse: [ 			^ aConnectableBlock blockConnectedToInput: aConnectableBlock inputs size.			].! !!PLC_BlockMorph methodsFor: 'declaration' stamp: 'EricPernia 6/22/2013 04:14'!declaration		^ self element declaration.! !!PLC_BlockMorph methodsFor: 'declaration' stamp: 'EricPernia 6/22/2013 03:57'!identifier		^ self declaration identifier.! !!PLC_BlockMorph methodsFor: 'declaration' stamp: 'EricPernia 6/22/2013 05:57'!overloadedType		self declaration dataType 		ifNil: [ 			^ nil.			] 		ifNotNil: [ 			^ self declaration dataType ilCompile.			]		! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/9/2013 19:43'!bodyExtent	"Tamaño calculado a partir de sus submorphs."		^( self extent x ) @		( (self inputFormalParameters last bottom max: self outputFormalParameters last bottom ) 			- self inputFormalParameters first top				+ self headHeight + super defaultExtent y ).! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 04:37'!bodyTop	"Construye la cabecera del bloque."		^ self headHeight + self top.! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/9/2013 19:41'!build	"Construye el bloque."		"self buildInstance."	self buildHead;		buildBody.! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/9/2013 19:42'!buildBody	"Construye el cuerpo del bloque."			"Creo sus Formal Parameters"			self buildInputs;		buildOutputs;		buildInOuts.			"Posiciono sus Formal Parameters"	self positionHorizontallyFormalParameters;	 	positionVerticallyFormalParameters.			"Actualizo su tamaño"	self extent: self bodyExtent.! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 05:46'!buildHead	"Construye la cabecera del bloque."		self buildName;		buildOverloaded.! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/10/2013 01:15'!buildInOuts	"Construye las entrada-salidas del cuerpo del bloque."	| inputInOutFP outputInOutFP |	( 1 to: self element buildInOuts size ) do: [ :idx |				"Creo el inOutFP de entrada y le agrego su pin"		inputInOutFP := PLC_InOutFormalParameterMorph new.		self addMorph: inputInOutFP.			self inputFormalParameters add: inputInOutFP.				inputInOutFP text: ( self element buildInOuts at: idx ) identifier.		inputInOutFP leftAlign.						self addInputPin.						"Creo el inOutFP de salida y le agrego su pin"				outputInOutFP := PLC_InOutFormalParameterMorph new.				self addMorph: outputInOutFP.			self outputFormalParameters add: outputInOutFP.				outputInOutFP text: ( self element buildInOuts at: idx ) identifier.		outputInOutFP rightAlign.					self addOutputPin.				"Asocio los inOutFP"		inputInOutFP inOutFPAssociated: outputInOutFP.		outputInOutFP inOutFPAssociated: inputInOutFP.						].! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/9/2013 19:18'!buildInputs	"Construye las entradas del cuerpo del bloque."		| formalParameter |	( 1 to: self element buildInputs size ) do: [ :idx |				formalParameter := PLC_FormalParameterMorph new.				self addMorph: formalParameter.		self inputFormalParameters add: formalParameter.				formalParameter text: ( self element buildInputs at: idx ) identifier.		formalParameter leftAlign.						self addInputPin.		].! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 06:16'!buildName	"Construye el Nombre de la cabecera del bloque."		| blockName |		blockName := self nameMorph.		self addMorph: blockName.		^ blockName.! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/9/2013 19:21'!buildOutputs	"Construye las salidas del cuerpo del bloque."	| formalParameter |	( 1 to: self element buildOutputs size ) do: [ :idx |				formalParameter := PLC_FormalParameterMorph new.				self addMorph: formalParameter.		self outputFormalParameters add: formalParameter.				formalParameter text: ( self element buildOutputs at: idx ) identifier.		formalParameter rightAlign.									self addOutputPin.				].! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 06:16'!buildOverloaded	"Construye el tag de Overloaded de la cabecera del bloque."		| overloaded |		self overloadedType		ifNil:[			^ nil			]			ifNotNil: [ 			overloaded := self overloadedMorph.			self addMorph: overloaded.			^ overloaded.			].		! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 18:37'!headHeight	"Construye la cabecera del bloque."		^ 36.	"^ self nameMorph extent y + self overloadedMorph extent y."! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/9/2013 18:40'!layoutInput	"Construye las entradas del cuerpo del bloque."		| formalParameter formalParameterTop pinMorph |	formalParameterTop := self bodyTop.	( 1 to: self element buildInputs size ) do: [ :idx |				formalParameter := PLC_FormalParameterMorph new.				self addMorph: formalParameter.		self inputFormalParameters add: formalParameter.				formalParameter text: ( self element buildInputs at: idx ) identifier.		formalParameter top: formalParameterTop. 				formalParameterTop := formalParameter bottom.		formalParameter left: self left.		formalParameter leftAlign.						pinMorph := self addInputPin.		pinMorph bottom: formalParameter bottom.				].		^ formalParameterTop.! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 06:15'!nameExtent	"Tamaño del nombre."		^ self nameMorph extent.! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 06:13'!nameMorph	"Construye el Nombre de la cabecera del bloque."		| blockName |		blockName := PLC_BlockNameMorph new.	blockName text: self identifier.	"blockName useMaxWidth ifTrue: [ self useMaxWidth: true. ]. "	blockName center: self center.	blockName top: self top.		^ blockName.! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 06:14'!overloadedExtent	"Tamaño del overloaded tag."		self overloadedMorph 		ifNil: [			^ 0@0			]		ifNotNil: [			^ self overloadedMorph extent.			]! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 6/22/2013 18:43'!overloadedMorph	"Construye el tag de Overloaded de la cabecera del bloque."		| overloaded |		self overloadedType		ifNil: [ 			^ nil.			]		ifNotNil: [ 			overloaded := PLC_OverloadedMorph new.				overloaded text: self overloadedType.			"overloaded useMaxWidth ifTrue: [ self useMaxWidth: true. ]. "			overloaded center: self center.			overloaded top: self top +18.			"overloaded centeredBeneath: self nameMorph."				^ overloaded.			].		! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/9/2013 19:34'!positionHorizontallyFormalParameters	"Posiciona horizontalmente los Formal Parameters del bloque."	"Posiciono horizontalmente los Formal Parameter de entradas"	self inputFormalParameters do: [ :formalParameter |		formalParameter left: self left.		].	"Posiciono horizontalmente los Formal Parameter de salidas"		self outputFormalParameters do: [ :formalParameter |		formalParameter right: self right.		].! !!PLC_BlockMorph methodsFor: 'building' stamp: 'EricPernia 7/10/2013 02:02'!positionVerticallyFormalParameters	"Posiciona verticalmente los Formal Parameters. 	Es la posición inicial cuando se crea el bloque."		| formalParameter formalParameterTop |		"Posiciono verticalmente los Formal Parameter de entradas"		formalParameterTop := self bodyTop.	( 1 to: self inputFormalParameters size ) do: [ :idx |				"Obtengo el inputFormalParameter"		formalParameter := self inputFormalParameters at: idx.				"Establezco su posicion Vertical"		formalParameter top: formalParameterTop. 				"Guardo la próxima posicion Vertical"		formalParameterTop := formalParameter bottom.				].		"Posiciono verticalmente los Formal Parameter de salidas"		formalParameterTop := self bodyTop.	( 1 to: self outputFormalParameters size ) do: [ :idx |				"Obtengo el inputFormalParameter"		formalParameter := self outputFormalParameters at: idx.				"Establezco su posicion Vertical"		formalParameter top: formalParameterTop. 				( formalParameter inOutFPAssociated )			ifNotNil: [ 				formalParameter inOutFPAssociated updateInputInOutFPAssociatedVerticalPosition.				] .				"Guardo la próxima posicion Vertical"		formalParameterTop := formalParameter bottom.				].! !!PLC_BlockMorph methodsFor: 'pins' stamp: 'EricPernia 7/4/2013 02:54'!addFirstInputPin	"Añade el primer pin de entrada al elemento. Este es submorph."	| pinMorph |	pinMorph := PLC_PinBlockMorph new.		"Posiciono el pin"	pinMorph topLeft: 		self topLeft + ( pinMorph extent x negated @ self firstPinYDistance ).		"Lo agrego de submorph"		self addMorph: pinMorph.	"Lo agrego a su lista de pines de entrada"	self inputPins add: pinMorph.		^ pinMorph.! !!PLC_BlockMorph methodsFor: 'pins' stamp: 'EricPernia 7/4/2013 02:55'!addFirstOutputPin	"Añade el primer pin de salida al elemento. Este es submorph."	| pinMorph |	pinMorph := PLC_PinBlockMorph new.		"Posiciono el pin"	pinMorph topRight: 	self topRight + ( pinMorph extent x @ self firstPinYDistance ).		"Lo agrego de submorph"		self addMorph: pinMorph.	"Lo agrego a su lista de pines de salida"	self outputPins add: pinMorph.		^ pinMorph.! !!PLC_BlockMorph methodsFor: 'pins' stamp: 'EricPernia 7/10/2013 00:02'!addInputPin	"Añade un pin de entrada al elemento."	| pinMorph |	pinMorph := PLC_PinBlockMorph new.	self inputPins add: pinMorph.		^ pinMorph.! !!PLC_BlockMorph methodsFor: 'pins' stamp: 'EricPernia 7/10/2013 00:02'!addOutputPin	"Añade un pin de salida al elemento."	| pinMorph |	pinMorph := PLC_PinBlockMorph new.	self outputPins add: pinMorph.		^ pinMorph.! !!PLC_BlockMorph methodsFor: 'pins' stamp: 'EricPernia 6/30/2013 06:06'!firstPinYDistance	"Devuelve la distancia  en pantalla en Y del primer pin de entrada 	y salida relativa a la posicion vertical de self .	Es la distancia vertical entre la parte de arriba del elemento y el primer pin."		"^ self headHeight."	^ 36	"layoutFirstPinsYDistance	""Devuelve la distancia minima en pantalla en Y del primer pin de entrada 	y salida relativa a layoutRectangle top de self .	Es la distancia vertical entre la parte de arriba del elemento y sus sub elementos y el primer pin."		"^ self layoutRectangleRelativePosition y - self firstPinYDistance.distanceBetweenPins"	"Devuelve la distancia en pantalla en Y ente pines del elemento."		"^ self minYDistanceBetweenPins.	"! !!PLC_BlockMorph methodsFor: 'pins' stamp: 'EricPernia 7/9/2013 20:25'!layoutHorizontallyInputPins	"Posiciona horizontalmente los pines de entrada del bloque."	self inputPins do: [ :each |		each left: self left - each extent x.		].! !!PLC_BlockMorph methodsFor: 'pins' stamp: 'EricPernia 7/9/2013 20:26'!layoutHorizontallyOutputPins	"Posiciona horizontalmente los pines de salida del bloque."	self outputPins do: [ :each |		each right: self right + each extent x.		].! !!PLC_BlockMorph methodsFor: 'pins' stamp: 'EricPernia 7/9/2013 16:50'!layoutHorizontallyPins	"Posiciona horizontalmente todos los pines del bloque."	self layoutHorizontallyInputPins;		layoutHorizontallyOutputPins.! !!PLC_BlockMorph methodsFor: 'user interaction states' stamp: 'EricPernia 6/25/2013 02:17'!draggingAnother	"Estado cuando estaba seleccionado y arrastran otro elemento desde fuera de la network."	self userInteractionStateLayer1: PLC_GraphicElementState draggingAnother.	self changed.		self submorphsPerform: #draggingAnother.		self inputPins do: [ :each |		each unselected.		].		self outputPins do: [ :each |		each unselected.		].		self changed.! !!PLC_BlockMorph methodsFor: 'user interaction states' stamp: 'EricPernia 6/25/2013 02:17'!draggingSelf	"Estado cuando el elemento esta siendo arrastrado por el mouse."	self userInteractionStateLayer1: PLC_GraphicElementState draggingSelf.	self changed.		self submorphsPerform: #draggingSelf.		self inputPins do: [ :each |		each unselected.		].		self outputPins do: [ :each |		each unselected.		].		self changed.! !!PLC_BlockMorph methodsFor: 'user interaction states' stamp: 'EricPernia 6/23/2013 23:39'!selected	"Estado seleccionado."	self userInteractionStateLayer1: PLC_GraphicElementState selected.		self submorphsPerform: #selected.		self inputPins do: [ :each |		each unselected.		].		self outputPins do: [ :each |		each unselected.		].		self changed.! !!PLC_BlockMorph methodsFor: 'initialize-release' stamp: 'EricPernia 7/9/2013 19:04'!initialize	"Inicializaciones"	super initialize.	inputFormalParameters := OrderedCollection new.	outputFormalParameters := OrderedCollection new.		"self addFirstInputPin;		addFirstOutputPin."! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/14/2013 22:43'!layoutRectangleExtentConnectedToLeftPowerRailOutput1	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self voidLayoutRectangleExtent.! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/14/2013 22:44'!layoutRectangleExtentNotConnectedToLeftPowerRailOutput1	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self voidLayoutRectangleExtent.! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/9/2013 21:21'!leftAndRightConnectedToVerticalLinkLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent + (self properties scale * ( 196 @ 0 ) ). " 196 = (self gridExtent x * 2) + 4 "! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/9/2013 21:23'!leftAndRightConnectedToVerticalLinkLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -98 @ 0 ). " -98 = -self gridExtent x - 2 "! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/9/2013 21:21'!leftConnectedToVerticalLinkLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent + (self properties scale * ( 200 @ 0 ) ). " 200 = (self gridExtent x * 2) + 8 "! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/9/2013 21:22'!leftConnectedToVerticalLinkLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."	^ self properties scale * ( -98 @ 0 ). " -98 = -self gridExtent x - 2 "! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/9/2013 21:21'!rightConnectedToVerticalLinkLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent + (self properties scale * ( 200 @ 0 ) ). " 200 = (self gridExtent x * 2) + 8 "! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/9/2013 21:22'!rightConnectedToVerticalLinkLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."	^ self properties scale * ( -102 @ 0 ). " -102 = -self gridExtent x - 6 "! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/9/2013 20:19'!voidLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent + (self properties scale * ( 204 @ 0 ) ). " 204 = (self gridExtent x * 2) + 12 "! !!PLC_BlockMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/9/2013 20:20'!voidLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -102 @ 0 ). " -102 = -self gridExtent x - 6 "! !!PLC_BlockMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 20:37'!leftAndRightConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"	self connectionStateLayer1: PLC_GraphicElementState leftAndRightConnectedToVerticalLink.	self changed.! !!PLC_BlockMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 20:37'!leftConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"	self connectionStateLayer1 leftConnectedToVerticalLinkFor: self.! !!PLC_BlockMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/7/2013 20:36'!rightConnectedToVerticalLink	"Cambia su estado de conexion capa 1al estado conectado a Enlace Vertical a derecha.	Lo implementan Contactos, Bobinas y Bloques"	self connectionStateLayer1 rightConnectedToVerticalLinkFor: self.! !!PLC_BlockMorph methodsFor: 'draw elements' stamp: 'EricPernia 7/17/2013 01:53'!drawHorizontalLinksFrom: aLadderView	"Dibuja el Horizontal Links de la primer salida del Bloque. 	Lo agrega al diccionario elements de aLadderView. 	Por último le dice al elementos graficos conectados 	a su primer salida que dibuje sus horizontal links."	| connectableBlock horizontalLink connection outputGraphicElement |		connectableBlock := aLadderView modelElementForGraphicElement: self.			"Creo el Horizontal Link corespondiente a la salida numero 1."	horizontalLink := PLC_HorizontalLinkMorph new.			"Lo agrego de submorph"	aLadderView addMorphBack: horizontalLink.			"Busco la conexion a la salida numero 1 de connectableBlock"	connection := connectableBlock connectedAtOutput: 1.		"Lo agrego al diccionario elementos"	aLadderView elements at: horizontalLink put: connection.				"Lo selecciono y le doy el foco del teclado"	aLadderView selectedAndKeyboardFocus: horizontalLink.			"Posiciono el Horizontal Link"	horizontalLink top: ( self outputPins at: 1 ) top.	horizontalLink left: self right.			"Actualizo su tamaño"	horizontalLink extentChanged.					"Busco el bloque conectable conectado a la salida numero 1"	outputGraphicElement := self blockConnectedToOutput: 1.			"Dibujo los horizontal links de los elementos conectados a sus salidas"	outputGraphicElement drawHorizontalLinksFrom: aLadderView.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_BlockMorph class	instanceVariableNames: ''!!PLC_BlockMorph class methodsFor: 'instance creation' stamp: 'EricPernia 7/14/2013 05:20'!newFromConnectableBlock: aConnectableBlock	"Nueva isntancia a partir de un elemento de un bloque conectable"	| blockMorph  |	"Creo el elemento grafico"		blockMorph := self new.	blockMorph modelElement: aConnectableBlock element.	blockMorph position: 40@40.	blockMorph build.		"Lo posiciono fuera del ladderView para que no moleste cuando	hago layout"	blockMorph position: blockMorph position - blockMorph layoutRectangle extent.		"Busco la variable del modelo y le pido su grafico"	"graphicVar := ( blockMorph instanceVariableFor: aConnectableBlock ).		graphicVar 		ifNotNil: [ 						graphicVar := graphicVar graphicElement."	"ARREGLAR, TA FEO QUE SE LLAMEN GRAFIC VAR las 2"							"Asigno al elemento grafico su variable morph"			"bloqueMorph instanceVariable: graphicVar."			"Asigno a la variable morph el elemento grafico"			"graphicVar graphicElement: bloqueMorph."						"Alineo la variable grafica al elemento grafico centrada sobre este"			"graphicVar alignAbove: bloqueMorph."			"graphicVar alignCenteredAbove: graphicElem."		"]."		^ blockMorph.! !PLC_GraphicElementWithPinsMorph subclass: #PLC_LeftPowerRailMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_LeftPowerRailMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LeftPowerRailMorph is xxxxxxxxx.Instance Variables!!PLC_LeftPowerRailMorph methodsFor: 'connection states' stamp: 'EricPernia 7/6/2013 16:13'!updateOutputsConnectonStates	"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."		| outputGraphicElement |			"La primer salida va con el estado de conexion de capa 2 connectedToLeftPowerRailTroughFirstOutputPin"			"Busco el elemento grafico conectado a la salida numero 1"		outputGraphicElement := self blockConnectedToOutput: 1.				"Cambio el estado de conexion de capa 2 a connectedToLeftPowerRailTroughFirstOutputPin"		outputGraphicElement connectedToLeftPowerRailTroughFirstOutputPin.				"El estado de conexion de capa 1 es conectado a self en ambos casos"		outputGraphicElement connectedToLeftPowerRail.				"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."		outputGraphicElement updateOutputsConnectonStates.						"A partir de la segunda salida va con el estado de capa 2 notConnectedToLeftPowerRailTroughFirstOutputPinOrCoil"	( 2 to: self outputPins size ) do: [ :ind |				"Busco el elemento grafico conectado a la salida numero ind"		outputGraphicElement := self blockConnectedToOutput: ind.				"Cambio el estado de conexion de capa 2 a notConnectedToLeftPowerRailTroughFirstOutputPin"		outputGraphicElement notConnectedToLeftPowerRailTroughFirstOutputPin.				"El estado de conexion de capa 1 es conectado a self en ambos casos"		outputGraphicElement connectedToLeftPowerRail.				"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."		outputGraphicElement updateOutputsConnectonStates.		].	! !!PLC_LeftPowerRailMorph methodsFor: 'drawing' stamp: 'EricPernia 9/22/2012 01:54'!addInsertionPoint	"Añade un Punto de Insercion."	| insertionPoint penultimatePosition lastPosition  penultimate insertionPointCenter |	lastPosition := self outputPins last position + (0 @ 1).		self outputPins size - 1 >= 1 		ifTrue: [			penultimate := self outputPins at: self outputPins size - 1.			penultimatePosition := penultimate position + (0 @ penultimate extent y).			]		ifFalse: [			penultimatePosition := self position + (0 @ self extent y).			].		insertionPointCenter := (penultimatePosition - lastPosition) / 2.				insertionPoint := PLC_InsertionPointMorph new.	insertionPoint center: self center + insertionPointCenter.	self addMorph: insertionPoint.! !!PLC_LeftPowerRailMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 02:11'!drawElementOn: aCanvas	"Dibujo el rectangulo negro que representa al horizonta link."	aCanvas fillRectangle: self vBar color: self userInteractionStateLayer1 elementColor.! !!PLC_LeftPowerRailMorph methodsFor: 'drawing' stamp: 'EricPernia 10/18/2012 15:38'!vBar	"Barra vertical que representa el right rail."	| width height vBar |	width := self properties scale y * 2.	height := self properties scale y * self bounds height.		vBar := Rectangle origin: (0@0) corner: ( width @ height ).		^ vBar align: vBar center with: self bounds center.! !!PLC_LeftPowerRailMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 02:05'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self totalExtent.! !!PLC_LeftPowerRailMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 02:05'!defaultExtent	"Tamaño por defecto del elemento."		^ self properties scale * ( 8 @ ( self gridExtent y * 3 ) ).! !!PLC_LeftPowerRailMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 02:06'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		"En caso del LPR el tamaño vertical del layoutRectangle debe ser del tamaño vertical 	de la grilla  para que no moleste cuando esté dentro un grupo de primer pin y le pida 	el layoutArea a dicho grupo. Molesta ya que me agranda el layoutRtangle del grupo 	verticalmente dificultando el posicionamiento."		^ ( self properties scale x * 4 ) @ self gridExtent y.! !!PLC_LeftPowerRailMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 02:06'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self extent.! !!PLC_LeftPowerRailMorph methodsFor: 'layout' stamp: 'EricPernia 4/22/2013 02:07'!layoutHorizontallyLeft: aDistanceX	"self se posiciona  de alguna manera con respecto a aDistanceX. 	self solo se mueve horizontalmente."		"Alineo el elemento al origen de la grilla."	self position: self gridOrigin - ( self layoutRectangle extent x @ 0).! !!PLC_LeftPowerRailMorph methodsFor: 'layout' stamp: 'EricPernia 6/30/2013 23:53'!layoutOn: aLadderView	"El elemento se posiciona dentro del ladderView."	"En este caso poriciona su layout area en el origen de la grilla. Luego posiciona todas sus salidas."		| outputGraphicElement |		"Posiciono el elemento con su layoutRectangle topRight en el origen de la grilla."	self position: self gridOrigin - ( self layoutRectangle extent x @ 0).		"Seteo los flags que indican que el elemento ya fue posicionado."	self xPositioned: true.	self yPositioned: true.		"Posiciono todos los elementos conectados a las salidas"	( 1 to: self outputPins size ) do: [ :ind |				"Busco el elemento grafico conectado a la salida numero ind"		outputGraphicElement := self blockConnectedToOutput: ind.				"Posiciono el elemento grafico hallado"		outputGraphicElement layoutOn: aLadderView from: self output: ind.				"Acomodo su pin de salida segun el elemento que acabo de posicionar."		self setPositionForOutputPin: ind to: ( self getFirstOutputPinPosition x @ outputGraphicElement getFirstInputPinPosition y ).		].		"Estiro el LPR al mayor tamaño según todos los elementos en el ladderView"	self extent: ( self extent x @ ( aLadderView bottomOfGraphicElementBelowOfAll - self gridOrigin y ) ).! !!PLC_LeftPowerRailMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/9/2013 02:48'!exploreModel	"Explora todas sus salidas."	| newGroup |			"Por cada salida debo crear un Nuevo Grupo."		( 1 to: self outputPins size ) 		do: [ :ind |					"Creo un nuevo grupo misma altura de primer pin."			newGroup := PLC_GraphicElementGroup new.				"Lo añado a la colección groups del PLC_LadderView. Es una 			colección de gupos de primer pin."			self owner groups add: newGroup.				"Agrego todos los elementos serie de la rama conectada a la 			salida numero ind del LPR."			( self blockConnectedToOutput: ind ) addToGroup: newGroup.						].! !!PLC_LeftPowerRailMorph methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 02:07'!isLeftPowerRail	"Devuelve true si el elemento grafico es una Barra derecha."	^ true.! !!PLC_LeftPowerRailMorph methodsFor: 'pins' stamp: 'EricPernia 4/28/2013 16:42'!firstPinYDistance	"Devuelve la distancia en pantalla en Y del primer pin de entrada 	y salida relativa a la posicion vertical de self .	Es la distancia vertical entre la parte de arriba del elemento y el primer pin."		^ self gridExtent y.! !!PLC_LeftPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 4/22/2013 02:08'!backgroundRectanglePosition	"Devuelve la posición en pantalla del backgroundRectangle relativa a position del elemento [px]."		^ self properties scale * ( 0 @ 0 ).! !!PLC_LeftPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 4/22/2013 02:08'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( 0 @ 0 ).! !!PLC_LeftPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 4/22/2013 02:08'!top: yPosition	"Establece la posición vertical en pantalla del primer pin de entrada y salida a yPosition.	Antes: setFirstPinsVerticalPositionTo: yPosition"		"En el caso particular de la Barra Izquierda solo muevo el pin"	self setPositionForOutputPin: 1 to: ( self outputPins first position x @ yPosition).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_LeftPowerRailMorph class	instanceVariableNames: ''!!PLC_LeftPowerRailMorph class methodsFor: 'instance creation' stamp: 'EricPernia 4/22/2013 16:45'!newFromElement: anElement	"Nueva isntancia a partir de un elemento de un bloque conectable"	| element num |		element := self new.		num := anElement connectableBlockOutputs.	num timesRepeat: [ element addOutputPin. ].		^ element.! !PLC_ContactsAndCoils subclass: #PLC_NOContactMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_NOContactMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_NOContactMorph is xxxxxxxxx.Instance Variables!!PLC_NOContactMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 02:06'!drawElementOn: aCanvas	"Comentario"	aCanvas fillRectangle: self leftHBar color: self userInteractionStateLayer1 elementColor;		fillRectangle: self leftVBar color: self userInteractionStateLayer1 elementColor;		fillRectangle: self rightHBar color: self userInteractionStateLayer1 elementColor;		fillRectangle: self rightVBar color: self userInteractionStateLayer1 elementColor.			self drawPatchOn: aCanvas.	! !!PLC_NOContactMorph methodsFor: 'drawing' stamp: 'EricPernia 4/21/2012 04:02'!hBar	"Barra horizontal que representa el cable del contacto"	| width height|		width := (self properties scale x * 30) rounded. "Redondeo explicitamente para que se dibuje bien."	 "30"	height := (self properties scale y * 2) rounded.	"2"		^ Rectangle origin: (0@0) corner: ( width @ height ).! !!PLC_NOContactMorph methodsFor: 'drawing' stamp: 'EricPernia 5/22/2012 20:04'!leftVBar	"Barra vertical  izquierda del contacto."	^ self vBar translateBy: self backgroundRectangle origin + (self leftHBar extent x @ 0).! !!PLC_NOContactMorph methodsFor: 'drawing' stamp: 'EricPernia 5/22/2012 20:04'!rightVBar	"Barra vertical  derecha del contacto."	^ self vBar translateBy: self backgroundRectangle origin + (self extent x @ 0) - (self leftHBar extent x + self vBar width @ 0).	! !!PLC_NOContactMorph methodsFor: 'drawing' stamp: 'EricPernia 5/22/2012 20:02'!vBar	"Barra horizontal que representa el cable del contacto"	| width height|		width := self properties scale x * 2.	height := self properties scale y * 14.		^ Rectangle origin: (0@0) corner: ( width @ height ).! !!PLC_NOContactMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 6/22/2013 01:51'!removeElementFrom: aLadderView	"Remueve el elemento pidiendoselo a su ladder view. Hace un double dispatching con este"		aLadderView removeContact: self.! !!PLC_NOContactMorph methodsFor: 'connection states' stamp: 'EricPernia 6/22/2013 01:51'!updateOutputsConnectonStates	"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."		| outputGraphicElement |			"Busco el elemento grafico conectado a la salida numero 1"	outputGraphicElement := self blockConnectedToOutput: 1.		"Cambio el estado de conexion de capa 2 al que traiga el elemento actual"	outputGraphicElement connectionStateLayer2: self connectionStateLayer2.	outputGraphicElement changed.			"El estado de conexion de capa 1 es conectado a self"	outputGraphicElement connectedToContact.		"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."	outputGraphicElement updateOutputsConnectonStates.! !!PLC_NOContactMorph methodsFor: 'instance variable' stamp: 'EricPernia 6/22/2013 01:55'!instanceVariableFor: aConnectableBlock	"Devuelve el bloque conectable de la variable desde el bloque conectable del elemento"	^ aConnectableBlock blockConnectedToInput: 2! !!PLC_NOContactMorph methodsFor: 'model exploration' stamp: 'EricPernia 6/30/2013 04:07'!isContact	"Devuelve true si el elemento grafico es un Contacto."	^ false! !PLC_GraphicElementMorph subclass: #PLC_PinBlockMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_PinBlockMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_PinBlockMorph is xxxxxxxxx.Instance Variables!!PLC_PinBlockMorph methodsFor: 'extent' stamp: 'EricPernia 5/1/2013 14:51'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ ( self totalExtent x @ (self properties scale y * 14) ).! !!PLC_PinBlockMorph methodsFor: 'extent' stamp: 'EricPernia 5/1/2013 14:51'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self totalExtent.! !!PLC_PinBlockMorph methodsFor: 'extent' stamp: 'EricPernia 5/1/2013 14:56'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self properties scale * ( 6 @ self defaultExtent y ).! !!PLC_PinBlockMorph methodsFor: 'position' stamp: 'EricPernia 7/6/2013 01:56'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ 0 @ 0.! !!PLC_PinBlockMorph methodsFor: 'drawing' stamp: 'EricPernia 5/1/2013 14:51'!drawElementOn: aCanvas	"Dibuja el palito horizontal del pin"	aCanvas fillRectangle: self hBar color: self userInteractionStateLayer1 elementColor.! !!PLC_PinBlockMorph methodsFor: 'drawing' stamp: 'EricPernia 5/1/2013 14:51'!hBar	"Barra horizontal que representa el cable de conexión del pin."	| width height hBar |	width := self properties scale x * self extent x.	height := self properties scale y * 2.		hBar := Rectangle origin: (0@0) corner: ( width @ height ).		^ hBar align: hBar center with: self bounds center.! !!PLC_PinBlockMorph methodsFor: 'initialize-release' stamp: 'EricPernia 5/1/2013 14:51'!initialize	"comment stating purpose of message"	super initialize.		self extentChanged;		openInWorld.	! !!PLC_PinBlockMorph methodsFor: 'connection states layer 2' stamp: 'EricPernia 7/6/2013 16:20'!pinFallingEdge	"Cambia su estado de conexion de capa 2"		self connectionStateLayer2: PLC_GraphicElementState pinFallingEdge.	self changed.! !!PLC_PinBlockMorph methodsFor: 'connection states layer 2' stamp: 'EricPernia 7/6/2013 16:21'!pinNegated	"Cambia su estado de conexion de capa 2"		self connectionStateLayer2: PLC_GraphicElementState pinNegated.	self changed.! !!PLC_PinBlockMorph methodsFor: 'connection states layer 2' stamp: 'EricPernia 7/6/2013 16:20'!pinNormal	"Cambia su estado de conexion de capa 2"		self connectionStateLayer2: PLC_GraphicElementState pinNormal.	self changed.! !!PLC_PinBlockMorph methodsFor: 'connection states layer 2' stamp: 'EricPernia 7/6/2013 16:18'!pinRisingEdge	"Cambia su estado de conexion de capa 2"		self connectionStateLayer2: PLC_GraphicElementState pinRisingEdge.	self changed.! !!PLC_PinBlockMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/6/2013 16:20'!pinFromBooleanFormalParameter	"Cambia su estado de conexion de capa 1 al estado conectado a a variable booleana. 	Se pone negro"			self connectionStateLayer1: PLC_GraphicElementState pinFromBooleanFormalParameter.	self changed.! !!PLC_PinBlockMorph methodsFor: 'connection states layer 1' stamp: 'EricPernia 7/6/2013 16:19'!pinFromNotBooleanFormalParameter	"Cambia su estado de conexion de capa 1 al estado conectado a a variable no booleana. 	Se pone dorado"		self connectionStateLayer1: PLC_GraphicElementState pinFromNotBooleanFormalParameter.	self changed.! !PLC_NOContactMorph subclass: #PLC_NCContactMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_NCContactMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_NCContactMorph is xxxxxxxxx.Instance Variables!!PLC_NCContactMorph methodsFor: 'drawing' stamp: 'EricPernia 5/1/2013 18:42'!drawElementOn: aCanvas	"Dibujo la linea diagonal del centro"	| rectangleReduction |	super drawElementOn: aCanvas.		rectangleReduction := (self properties scale x * 1) rounded.	aCanvas 		line: self leftVBar bottomRight - (0 @ rectangleReduction)		to: self rightVBar topLeft + (0 @ rectangleReduction)		width: self leftHBar extent y 		color: self userInteractionStateLayer1 elementColor.	! !PLC_GraphicElementWithPinsMorph subclass: #PLC_RightPowerRailMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_RightPowerRailMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_RightPowerRailMorph is xxxxxxxxx.Instance Variables!!PLC_RightPowerRailMorph methodsFor: 'extent' stamp: 'EricPernia 4/27/2013 19:42'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self defaultExtent x @ ( self properties scale y * 14 ).! !!PLC_RightPowerRailMorph methodsFor: 'extent' stamp: 'EricPernia 4/27/2013 03:44'!defaultExtent	"Tamaño por defecto del elemento."		^ self properties scale * ( 15 @ self gridExtent y ).! !!PLC_RightPowerRailMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 01:59'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self defaultExtent.! !!PLC_RightPowerRailMorph methodsFor: 'connection states' stamp: 'EricPernia 7/7/2013 20:50'!connectedToBlock 	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Bloque.	Define Tipo de dibujo ( -->> o --| ) y layoutRectanglePosition "	self connectionStateLayer1: PLC_GraphicElementState connectedToBlock .	self changed.! !!PLC_RightPowerRailMorph methodsFor: 'connection states' stamp: 'EricPernia 7/7/2013 17:28'!connectedToCoil 	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Bobina.	Define Tipo de dibujo ( -->> o --| ) y layoutRectanglePosition "	self connectionStateLayer1: PLC_GraphicElementState connectedToCoil.	self changed.! !!PLC_RightPowerRailMorph methodsFor: 'connection states' stamp: 'EricPernia 7/7/2013 02:25'!connectedToContact	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Contacto.	Define Tipo de dibujo ( -->> o --| ) y layoutRectanglePosition "	self connectionStateLayer1: PLC_GraphicElementState connectedToContact.	self changed.! !!PLC_RightPowerRailMorph methodsFor: 'connection states' stamp: 'EricPernia 7/7/2013 02:24'!connectedToLeftPowerRail	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Barra Izquierda.	Define Tipo de dibujo ( -->> o --| ) y layoutRectanglePosition "	self connectionStateLayer1: PLC_GraphicElementState connectedToLeftPowerRail.	self changed.! !!PLC_RightPowerRailMorph methodsFor: 'connection states' stamp: 'EricPernia 7/7/2013 19:05'!leftConnectedToVerticalLink	"Cambia su estado de conexion (connection drawing layer) al estado conectado a Barra Izquierda.	Define Tipo de dibujo ( -->> o --| ) y layoutRectanglePosition "	self connectionStateLayer1: PLC_GraphicElementState leftConnectedToVerticalLink.	self changed.! !!PLC_RightPowerRailMorph methodsFor: 'connection states' stamp: 'EricPernia 4/27/2013 06:16'!updateInputConnectonStates	"Actualiza las capas de estado de conexion del elemento conectados a su entrada."		| inputGraphicElement |			"Busco el elemento grafico conectado a la entrada numero 1"	inputGraphicElement := self blockConnectedToInput: 1.			"El estado de conexion de capa 1 es conectado a self"	inputGraphicElement connectedToRightPowerRail.! !!PLC_RightPowerRailMorph methodsFor: 'connection states' stamp: 'EricPernia 7/7/2013 17:07'!updateOutputsConnectonStates	"Actualiza las capas de estado de conexion del elemento conectados a su salida."		"Actualiza las capas de estado de conexion de los elementos conectados a sus entradas."	self updateInputConnectonStates.! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 05:46'!connectedToBlockDrawElementOn: aCanvas	"Dibuja el elemento gráfico en este este estado de conexion."		self drawVBarOn: aCanvas.! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 05:47'!connectedToCoilDrawElementOn: aCanvas	"Dibuja el elemento gráfico en este este estado de conexion."		self drawVBarOn: aCanvas.! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/7/2013 05:48'!connectedToContactDrawElementOn: aCanvas	"Dibuja el elemento gráfico en este este estado de conexion."		self drawDoubleArrowOn: aCanvas.! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/13/2013 05:01'!connectedToContactLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self properties scale * ( ( self gridExtent x - 4 ) @ ( self gridExtent y * 2 ) ).! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/16/2013 14:30'!connectedToLeftPowerRailTroughFirstOutputPinDrawElementOn: aCanvas	"Dibuja el elemento gráfico en este este estado de conexion."		self drawVBarOn: aCanvas.! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/16/2013 13:18'!layoutRectangleExtentConnectedToLeftPowerRailOutput1	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self properties scale * ( ( self gridExtent x - 4 ) @ ( self gridExtent y * 3 ) ).! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/14/2013 22:45'!layoutRectangleExtentNotConnectedToLeftPowerRailOutput1	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self voidLayoutRectangleExtent.! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/14/2013 05:04'!leftConnectedToVerticalLinkLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self properties scale * ( ( self gridExtent x - 8 ) @ ( self gridExtent y * 2 ) ).! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/16/2013 14:31'!notConnectedToLeftPowerRailTroughFirstOutputPinDrawElementOn: aCanvas	"Dibuja el elemento gráfico en este este estado de conexion."		self drawDoubleArrowOn: aCanvas.! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from connection states' stamp: 'EricPernia 7/13/2013 04:56'!voidLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self properties scale * ( ( self gridExtent x - 4 ) @ ( self gridExtent y * 2 ) ).! !!PLC_RightPowerRailMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 03:38'!drawElementOn: aCanvas	"Dibujo el rectangulo negro que representa al horizonta link."	aCanvas fillRectangle: self hBar color: self userInteractionStateLayer1 elementColor.		self connectionStateLayer1 drawElementOn: aCanvas for: self.! !!PLC_RightPowerRailMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 03:39'!drawVBarOn: aCanvas.	"Dibuja la barra vertical del Riel Derecho conectado a contacto."		aCanvas fillRectangle: self vBar color: self userInteractionStateLayer1 elementColor.! !!PLC_RightPowerRailMorph methodsFor: 'drawing' stamp: 'EricPernia 5/28/2012 03:21'!hBar	"Barra horizontal que representa el cable de conexión con el right rail."	| width height hBar |	width := self properties scale x * self extent x.	height := self properties scale y * 2.		hBar := Rectangle origin: (0@0) corner: ( width @ height ).		^ hBar align: hBar center with: self bounds center.! !!PLC_RightPowerRailMorph methodsFor: 'drawing' stamp: 'EricPernia 5/28/2012 03:21'!vBar	"Barra vertical que representa el right rail."	| width height vBar |	width := self properties scale x * 2.	height := self properties scale y * 6.		vBar := Rectangle origin: (0@0) corner: ( width @ height ).		^ vBar align: vBar rightCenter with: self bounds rightCenter.! !!PLC_RightPowerRailMorph methodsFor: 'layout' stamp: 'EricPernia 4/27/2013 03:47'!layoutHorizontallyLeft: aDistanceX	"self se posiciona  de alguna manera con respecto a aDistanceX. 	self solo se mueve horizontalmente. Para lograrlo se lo pide a su	estado de conexion 2."		self connectionStateLayer2 layoutHorizontallyLeft: aDistanceX for: self.! !!PLC_RightPowerRailMorph methodsFor: 'layout' stamp: 'EricPernia 7/9/2013 03:23'!layoutOn: aLadderView from: aGraphicElement output: anOutputNumber	"El elemento se posiciona dentro del ladderView."	"Alineo Horizontalmente a este elemento gráfico."	self layoutHorizontallyOn: aLadderView from: aGraphicElement output: anOutputNumber.		"Alineo Verticalmnete su grupo."	self layoutGroupVerticallyOn: aLadderView from: aGraphicElement output: anOutputNumber.! !!PLC_RightPowerRailMorph methodsFor: 'initialize-release' stamp: 'EricPernia 7/14/2013 05:26'!initialize	"Inicializaciones del right rail."	super initialize.		"Agrego el pin de entrada"	self addInputPin.	"Lo hago invisible"	self submorphs do: [ :morph |		morph visible: false.		].		"Lo posiciono fuera del ladderView para que no moleste cuando	hago layout"	self position: self position - self layoutRectangle extent.	! !!PLC_RightPowerRailMorph methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 02:02'!addToGroup: aGroup	"El elemento RPR se añade al grupo pasado como parámetro.	Aquí se corta la cadena de añadir al grupo."		aGroup add: self.! !!PLC_RightPowerRailMorph methodsFor: 'model exploration' stamp: 'EricPernia 4/22/2013 02:02'!isRightPowerRail	"Devuelve true si el elemento grafico es un Right Power Rail."	^ true.! !!PLC_RightPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 4/22/2013 02:02'!backgroundRectanglePosition	"Devuelve la posición en pantalla del backgroundRectangle relativa a position del elemento [px]."		^ self properties scale * ( 0 @ 2 ).! !!PLC_RightPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 7/7/2013 05:42'!layoutRectanglePositionConnectedToBlock	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px].	Cuando está conectado a Barra izquierda, Enlace Vertical o Bloque (F o FB)"		^ self properties scale * ( -32 @ 0 ).! !!PLC_RightPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 4/26/2013 12:38'!layoutRectanglePositionConnectedToContactOrCoil	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px].	Cuando está conectado a cotacto o Bobina"		^ self properties scale * ( 4 @ 0 ).! !!PLC_RightPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 4/28/2013 23:11'!layoutRectanglePositionConnectedToLeftPowerRail	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px].	Cuando está conectado a Barra izquierda, Enlace Vertical o Bloque (F o FB)"		^ self properties scale * ( -32 @ 0 ).! !!PLC_RightPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 5/6/2013 01:18'!layoutRectanglePositionConnectedToLeftPowerRailOutput1	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px].	Cuando está conectado a Barra izquierda, Enlace Vertical o Bloque (F o FB)"		^ self properties scale * ( -4 @ self gridExtent y ) negated.! !!PLC_RightPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 7/7/2013 19:06'!leftConnectedToVerticalLinkLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -28 @ 0 ).! !!PLC_RightPowerRailMorph methodsFor: 'position' stamp: 'EricPernia 7/7/2013 19:00'!voidLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -32 @ 0 ).! !!PLC_RightPowerRailMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 5/2/2013 00:00'!removeElementFrom: aLadderView	"Remueve el elemento pidiendoselo a su ladder view. Hace un double dispatching con este"		aLadderView removeRightPowerRail: self.! !PLC_GraphicElementMorph subclass: #PLC_TagMorph	instanceVariableNames: 'text textAlign graphicElement'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_TagMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_TagMorph is xxxxxxxxx.Instance Variables	graphicElement:		<Object>	text:		<Object>	textAlign:		<Object>graphicElement	- xxxxxtext	- xxxxxtextAlign	- xxxxx!!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:18'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self extent x @ self textLinesExtent y.! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 01:46'!defaultExtent	"Tamaño por defecto"		^ self elementWidth @ super defaultExtent y.! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:56'!elementDoubleWidth	"Doble ancho del elemento"	^ self properties scale x * 184.! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:55'!elementWidth	"Ancho estandar del elemento"	^ self properties scale x * 88.! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:59'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent + (self properties scale * ( 8 @ 0 ) ).! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 01:32'!lineSpacing	"Alto de interlineado del texto. Es decir, tamaño de separacion entre lineas." 	^ self properties scale y * 4.! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 01:32'!tagHeight	"Alto  de una linea de texto mas sus margenes superior e inferior." 	^ self textLineHeight + self lineSpacing! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:48'!textLineExtent	"Tamaño de una linea de texto"	^ self textWidth @ self textLineHeight.! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:49'!textLineHeight	"Alto  de una linea de texto" 	^ self properties scale y * 14. "Aca deberia calcularlo segun el tamaño de al fuente ejemplo: texto asMorph height"! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 7/19/2012 23:38'!textLinesExtent	"Tamaño de todas las lineas de texto juntas."	^ ( (self textLineExtent + self lineSpacing) * (1 @ self numberOfLines) ) - self lineSpacing.! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/27/2013 02:22'!textLinesMaxWidth	"Devuelve el mayor ancho de linea de texto entre sus lineas de texto."	^ self stringsToDraw 		inject: 0		into: [ :acum :each | 			acum max: each asMorph extent x.			].! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:47'!textWidth	"Ancho de la linea de texto"	^ self extent x - self leftMargin - self rightMargin. ! !!PLC_TagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 00:26'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self extent x @ ( self textLinesExtent y + self lineSpacing).! !!PLC_TagMorph methodsFor: 'text' stamp: 'EricPernia 7/19/2012 23:35'!text	^ text! !!PLC_TagMorph methodsFor: 'text' stamp: 'EricPernia 6/25/2013 00:36'!text: anObject	text := anObject.		self extentChanged.! !!PLC_TagMorph methodsFor: 'text' stamp: 'EricPernia 7/19/2012 23:35'!textAlign	^ textAlign! !!PLC_TagMorph methodsFor: 'text' stamp: 'EricPernia 7/19/2012 23:35'!textAlign: anObject	textAlign := anObject! !!PLC_TagMorph methodsFor: 'accessing' stamp: 'EricPernia 5/5/2013 22:27'!graphicElement	"Devuelve el elemento grafico asociado a la variable, por ejemplo, un contacto, bobina o bloque"	^ graphicElement.! !!PLC_TagMorph methodsFor: 'accessing' stamp: 'EricPernia 6/21/2013 22:40'!graphicElement: anObject 	graphicElement := anObject.! !!PLC_TagMorph methodsFor: 'align-states' stamp: 'EricPernia 7/19/2012 23:35'!centerAlign		self textAlign: PLC_Aligns center.	self changed.! !!PLC_TagMorph methodsFor: 'align-states' stamp: 'EricPernia 7/19/2012 23:35'!leftAlign		self textAlign: PLC_Aligns left.	self changed.! !!PLC_TagMorph methodsFor: 'align-states' stamp: 'EricPernia 7/19/2012 23:35'!rightAlign		self textAlign: PLC_Aligns right.	self changed.! !!PLC_TagMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 02:06'!drawElementOn: aCanvas	"Dibujo el texto"	| strings |	strings := self stringsToDraw.		strings do:[ :str |		"Linea de texto"		aCanvas				drawString: str			at: (self stringPositionFor: str index: (strings indexOf: str))			font: TextStyle defaultFont			color: self userInteractionStateLayer1 textColor.					"Borde delimitador de la linea de texto"		self properties drawTextLineBorder 			ifTrue: [				self drawTextLineBorderOn: aCanvas 					rectangle: ((self stringPositionFor: str index: (strings indexOf: str)) 						corner: (self stringPositionFor: str index: (strings indexOf: str)) + str asMorph extent ).				].		].! !!PLC_TagMorph methodsFor: 'drawing' stamp: 'EricPernia 7/19/2012 23:36'!drawTextLineBorderOn: aCanvas rectangle: aRectangle	"Borde delimitador de la linea de texto"				aCanvas			frameRectangle: aRectangle		 width: 1		colors: {Color red}  		dashes: {1}.! !!PLC_TagMorph methodsFor: 'drawing' stamp: 'EricPernia 7/19/2012 23:36'!numberOfLines	"Devuelve el numero de lineas de texto"	^ self stringsToDraw size.! !!PLC_TagMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2013 01:40'!stringPositionFor: aString index: aNumber	"Dibujo el texto"	| x y |			x:= (self textAlign) txtPositionXFor: aString in: self.	y := self position y + 2 + ( ( self textLineHeight + self lineSpacing ) * (aNumber-1) ).							"2= self top margin"			^  x @ y.! !!PLC_TagMorph methodsFor: 'drawing' stamp: 'EricPernia 6/26/2013 00:48'!stringsToDraw	"Devuelve una Ordered collection con los strings haciendo wrap al contenedor."		"CAMBIAR ESPACIOS POR UNDERLINES: _ para la detecion de como wrapear, OJO con TRIM "	| string character words wordsWrap stringAcum stringTemp strings stream |		string := self text.		" 1) Separo en palabras."		words := string findTokens: ' '.	"95 - underline"		"32 - space"	"13 - cr"	" 9  - tab"	"10 - line feed"	"12 - form feed"	(1 to: words size - 1) do: [ :index | 		words at: index put: ( (words at: index) , ' ' ).		].		 " 2) Corto las palabras largas."	wordsWrap := OrderedCollection new.	words do: [ :eachWord |		(eachWord trimRight asMorph extent x <= self textWidth)			ifTrue:[				wordsWrap add: eachWord.				]			ifFalse:[				stringAcum :=''.				stringTemp :=''.					stream := eachWord readStream.				eachWord size timesRepeat: [					character := stream next.					stringAcum := stringAcum , character asString.					(stringAcum asMorph extent x <= self textWidth)						ifTrue:[							stringTemp := stringAcum.							]						ifFalse:[							wordsWrap add: stringTemp.							stringTemp := character asString.							stringAcum := stringTemp.							].					].				wordsWrap add: stringTemp.				].		].wordsWrap.			" 3) Junto las palabras que pueda por linea."		strings := OrderedCollection new.	stringAcum :=''.	stringTemp :=''.	wordsWrap do: [ :eachWordWrap |		stringAcum := stringTemp ,  eachWordWrap.				(stringAcum trimRight asMorph extent x <= self textWidth) 	"el trimRight es para sacarle el ultimo espacio a derecha para ver si entra sin ese espacio"			ifTrue:[				stringTemp := stringAcum.				]			ifFalse:[.				strings add: stringTemp trimRight.				stringTemp := eachWordWrap.				stringAcum := ''.				].		].	strings add: stringTemp trimRight.		^ strings.! !!PLC_TagMorph methodsFor: 'position' stamp: 'EricPernia 4/25/2013 01:22'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ self properties scale * ( -4 @ 0 ).! !!PLC_TagMorph methodsFor: 'initialize-release' stamp: 'EricPernia 6/26/2013 02:25'!initialize	"Inicializo la etiqueta"	super initialize.	text := '<???>'.	self unselected;			"drawingLayer1"		notKeyboardFocus.		"drawingLayer3"	PLC_Aligns initialize.	self textAlign: PLC_Aligns center.			self extentChanged;		color: Color white;		openInWorld.! !!PLC_TagMorph methodsFor: 'margin' stamp: 'EricPernia 6/26/2013 01:42'!leftMargin	"Retorna el margen izquierdo del texto con respecto al elemento."		^ 0.! !!PLC_TagMorph methodsFor: 'margin' stamp: 'EricPernia 6/26/2013 01:42'!rightMargin	"Retorna el margen derecho del texto con respecto al elemento."		^ 0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_TagMorph class	instanceVariableNames: ''!!PLC_TagMorph class methodsFor: 'instance creation' stamp: 'EricPernia 7/14/2013 05:27'!newWithText: aString	"Nuevo con texto asString"	| graphicElem |		graphicElem := self new.		graphicElem text: aString.		graphicElem extentChanged.		Transcript show: graphicElem extent asString.		"Lo posiciono fuera del ladderView para que no moleste cuando	hago layout"	graphicElem position: graphicElem position - graphicElem layoutRectangle extent.		^ graphicElem.	! !PLC_TagMorph subclass: #PLC_FormalParameterMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_FormalParameterMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_FormalParameterMorph is xxxxxxxxx.Instance Variables!!PLC_FormalParameterMorph methodsFor: 'initialize-release' stamp: 'EricPernia 6/26/2013 02:26'!initialize	"comment stating purpose of message"		super initialize.		text := 'VAR'.! !!PLC_FormalParameterMorph methodsFor: 'drawing' stamp: 'EricPernia 5/22/2013 12:47'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		aCanvas 		"fillRectangle: self backgroundRectangle 		color: self userInteractionLayer1 blockBodyColor;"				fillRectangle: self underline		fillStyle: ( self textAlign 			underlineStyleWithColor: self userInteractionStateLayer1 blockBodyColor			andOrigin: self position			andDirection: self extent x @ 0 ). ! !!PLC_FormalParameterMorph methodsFor: 'drawing' stamp: 'EricPernia 6/14/2012 04:58'!underline 	"Morph que representa el subrrayado de la etiqueta."	| underline |		underline := Rectangle 		origin: (0@0)		corner: ( self extent x - (self properties scale x * 2) ) @ (self properties scale y).			^ underline align: underline bottomCenter with: self bounds bottomCenter.! !!PLC_FormalParameterMorph methodsFor: 'margin' stamp: 'EricPernia 6/26/2013 01:39'!leftMargin	"Retorna el margen izquierdo del texto con respecto al elemento."		^ self properties scale x * 4.! !!PLC_FormalParameterMorph methodsFor: 'margin' stamp: 'EricPernia 6/26/2013 01:39'!rightMargin	"Retorna el margen derecho del texto con respecto al elemento."		^ self properties scale x * 4.! !!PLC_FormalParameterMorph methodsFor: 'event handling' stamp: 'EricPernia 6/26/2013 01:36'!handlesMouseOver: anEvent	"Permite manejar el evento de que el puntero pasa sobre el morph."	^false.! !!PLC_FormalParameterMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 01:48'!elementDoubleWidth	"Doble ancho del elemento"	^ self properties scale x * 90.! !!PLC_FormalParameterMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 01:48'!elementWidth	"Ancho estandar del elemento"	^ self properties scale x * 42.! !!PLC_FormalParameterMorph methodsFor: 'extent' stamp: 'EricPernia 6/29/2013 18:21'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent.! !!PLC_FormalParameterMorph methodsFor: 'text' stamp: 'EricPernia 6/26/2013 02:37'!text: anObject	text := anObject.	( text asMorph extent x > self textWidth )		ifTrue: [ 			self doubleWidth.			self owner ifNotNil: [ self owner formalParameterWithDoubleWidth. ].			].			self extentChanged.! !!PLC_FormalParameterMorph methodsFor: 'position' stamp: 'EricPernia 6/29/2013 18:23'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ ( 0 @ 0 ).! !!PLC_FormalParameterMorph methodsFor: 'accessing' stamp: 'EricPernia 7/10/2013 01:26'!inOutFPAssociated		^ nil! !PLC_FormalParameterMorph subclass: #PLC_InOutFormalParameterMorph	instanceVariableNames: 'inOutFPAssociated'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_InOutFormalParameterMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_InOutFormalParameterMorph is xxxxxxxxx.Instance Variables	inOutFPAssociated:		<Object>inOutFPAssociated	- xxxxx!!PLC_InOutFormalParameterMorph methodsFor: 'drawing' stamp: 'EricPernia 6/27/2013 02:36'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		aCanvas 		fillRectangle: self inOutLine 		color: self properties nonBooleanVariablePinColor; "self connectionStateLayer1 elementColor;" "DEBERIA PEDIRSELO A SU CONNECTION LAYER"				fillRectangle: self underline		fillStyle: ( self textAlign 			underlineStyleWithColor: self userInteractionStateLayer1 blockBodyColor			andOrigin: self position			andDirection: self extent x @ 0 ). ! !!PLC_InOutFormalParameterMorph methodsFor: 'drawing' stamp: 'EricPernia 6/27/2013 02:29'!inOutLine 	"Morph que representa la linea que continua el pin del tag in out."		^ self textAlign inOutLineFor: self! !!PLC_InOutFormalParameterMorph methodsFor: 'drawing' stamp: 'EricPernia 6/27/2013 02:13'!leftInOutLine 	"Morph que representa la linea que continua el pin del tag in out."	| inOutLine |		inOutLine := Rectangle 		origin: (0@0)		corner: self inOutLineExtent @ (self properties scale y * 2).			^ inOutLine align: inOutLine rightCenter with: self bounds rightCenter.! !!PLC_InOutFormalParameterMorph methodsFor: 'drawing' stamp: 'EricPernia 6/27/2013 02:22'!rightInOutLine 	"Morph que representa la linea que continua el pin del tag in out."	| inOutLine |		inOutLine := Rectangle 		origin: (0@0)		corner: self inOutLineExtent @ (self properties scale y * 2).			^ inOutLine align: inOutLine leftCenter with: self bounds leftCenter.! !!PLC_InOutFormalParameterMorph methodsFor: 'extent' stamp: 'EricPernia 6/27/2013 02:30'!inOutLineExtent	"Ancho de la linea que continua el pin del tag in out."	^ self extent x - self textLinesMaxWidth - self leftMargin - ( self properties scale x * 4 ).! !!PLC_InOutFormalParameterMorph methodsFor: 'accessing' stamp: 'EricPernia 7/10/2013 00:54'!inOutFPAssociated		^ inOutFPAssociated! !!PLC_InOutFormalParameterMorph methodsFor: 'accessing' stamp: 'EricPernia 7/10/2013 00:54'!inOutFPAssociated: anObject		inOutFPAssociated := anObject! !!PLC_InOutFormalParameterMorph methodsFor: 'position' stamp: 'EricPernia 7/10/2013 02:00'!updateInputInOutFPAssociatedVerticalPosition	"Actualiza la posicion Vertical del elemento cuando se lo pide su inOutFPAssociated.	Además Notifica a su owner que es un bloque para que se actualice."	| oldBottom |		oldBottom := self bottom.		self bottom: ( self inOutFPAssociated bottom max: self bottom ).		( oldBottom = self bottom )		ifFalse: [			self owner inputInOutFPVerticallyChanged: self.			].! !!PLC_InOutFormalParameterMorph methodsFor: 'position' stamp: 'EricPernia 7/10/2013 02:01'!updateOutputInOutFPAssociatedVerticalPosition	"Actualiza la posicion Vertical del elemento cuando se lo pide su inOutFPAssociated.	Además Notifica a su owner que es un bloque para que se actualice."	| oldBottom |		oldBottom := self bottom.		self bottom: ( self inOutFPAssociated bottom max: self bottom ).		( oldBottom = self bottom )		ifFalse: [			self owner outputInOutFPVerticallyChanged: self.			].! !PLC_GraphicElementWithPinsMorph subclass: #PLC_VerticalLinkMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_VerticalLinkMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VerticalLinkMorph is xxxxxxxxx.Instance Variables!!PLC_VerticalLinkMorph methodsFor: 'layout' stamp: 'EricPernia 7/7/2013 19:47'!layoutHorizontallyLeft: aDistanceX	"self se posiciona  de alguna manera con respecto a aDistanceX. 	self solo se mueve horizontalmente."		"Como el VL arranca en (0@0) y nunca va a volver hacia la izquierda puedo siempre 	volver a alinearlo pero tengo que chequear que la nueva posicion en X sea mayor 	que la anterior así no piso a nadie."	| oldLeft |	oldLeft := self left.		"Alineo el elemento a aDistanceX."	self layoutLeft: aDistanceX.	"Si la nueva posicion horizontal es menor a la que tenia entonces lo vuelvo a correr."	self left < oldLeft		ifTrue: [			self left: oldLeft.			].! !!PLC_VerticalLinkMorph methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 19:08'!layoutHorizontallyOn: aLadderView from: aGraphicElement	"Posiciono Horizontalmente el VL."		| oldPosition maxRightGroup |			"Guardo la vieja posicion del enlace Vertical"	oldPosition := self position.				"Posiciono el VL Horizontalmente a la derecha del layoutRectangle del elemento 	que le envio este mensaje".	self layoutHorizontallyLeft: aGraphicElement layoutRectangle right.			"Posiciono Verticalemente los pines de entrada del VL y lo estiro al mayor tamaño 	según todos los elementos conectados a sus entradas.	Esto lo necesito para saber si pisa a algun grupo luego de posicionar horizontalmente."	self layoutVerticallyInputPins.		"Chequeo si el VL no pisa a algun grupo que no sea su propio grupo horizontalmente. 	Si pisa lo muevo otra vez. Así en un loop hasta que no pise a nadie."	( aLadderView gotAGroupHorizontallyUnderElement: self )		ifTrue: [			"Busco el grupo con mayor layoutRectangle right pisado por el VL"			maxRightGroup :=  aLadderView maxRightGroupUnderElement: self.					"Posiciono el VL Horizontalmente a la derecha del layoutRectangle del 			grupo hallado".			maxRightGroup ifNotNil: [				self layoutHorizontallyLeft: maxRightGroup layoutRectangle right.				].			].			"Si cambio su posicion horizontal entonces debo reposicionar Horizontalmente los 	elementos conectados a sus salida. Para esto, borro los flags de las ramas serie a	partir de sus salidas. Esto causa que se posicionen horizontalmente cuando les 	llegue el turno de posicionarse."	"( oldPosition >= self position )		ifFalse: ["			self xPositionedCascade: false.			"]."		! !!PLC_VerticalLinkMorph methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 18:18'!layoutOn: aLadderView from: aGraphicElement output: anOutputNumber	"El elemento se posiciona dentro del ladderView."	"En este caso solo se corre horizontalmente a la derecha	de los elementos anteriores. Luego posiciona todas sus salidas."		"Posiciono Horizontalmente el VL."	self layoutHorizontallyOn: aLadderView from: aGraphicElement.	"Posiciono todos los elementos conectados a sus salidas si ya 	están posicionadas todas sus entradas."	self layoutOutputsOn: aLadderView.! !!PLC_VerticalLinkMorph methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 18:18'!layoutOutputsOn: aLadderView	"Posiciono todos los elementos conectados a sus salidas si ya están posicionados 	todos los elementos conectados a sus entradas."		| xPositionedInputs inputGraphicElement outputGraphicElement |	"Chequeo que se hayan posicionado todos los elementos conectados a sus entradas.	Si esto no ocurre entonces no puedo posicionar los elementos conectados a sus salidas."	xPositionedInputs := true.	( 1 to: self inputPins size ) do: [ :ind |		"Busco el elemento grafico conectado a la entrada numero ind"		inputGraphicElement := self blockConnectedToInput: ind.		"Chequeo el xPositioned del elemento hallado"		xPositionedInputs := inputGraphicElement xPositioned and: [ xPositionedInputs ].		].		"Si ya posicionó todos los elementos conectados a sus entradas, 	entonces posiciona todos los elementos conectados a sus salidas."	xPositionedInputs ifTrue: [							"Posiciono todos los elementos conectados a sus salidas."		( 1 to: self outputPins size ) do: [ :ind |					"Busco el elemento grafico conectado a la salida numero ind"			outputGraphicElement := self blockConnectedToOutput: ind.					"Posiciono el elemento grafico hallado"			outputGraphicElement layoutOn: aLadderView from: self output: ind.					"Acomodo su pin de salida segun el elemento que acabo de posicionar."			self setPositionForOutputPin: ind to: ( self getFirstOutputPinPosition x @ outputGraphicElement getFirstInputPinPosition y ).			].			"Estiro el VL al mayor tamaño según todos los elementos conectados a sus entradas y salidas."		self extent: ( self extent x @ ( ( self inputPins last bottom max: self outputPins last bottom ) - self position y ) ).						].! !!PLC_VerticalLinkMorph methodsFor: 'layout' stamp: 'EricPernia 7/7/2013 20:14'!layoutRectangleForGroup	"Devuelve el rectángulo para acomodar en pantalla los elementos 	entre si que usan los grupos azules."	| origin corner |		origin := self layoutRectangle topLeft.	corner := origin + ( self defaultExtent x @ ( self properties scale y * self gridExtent y ) ).		^ Rectangle origin: origin corner: corner.! !!PLC_VerticalLinkMorph methodsFor: 'layout' stamp: 'EricPernia 7/14/2013 18:06'!layoutVerticallyInputPins	"Posiciono Verticalmente los pines de entrada del VL."		| inputGraphicElement |			"Posiciono todos los pines de entrada Verticalmente.	Esto lo necesito para saber si pisa a algun grupo luego de posicionar horizontalmente ademas 	de para acomodar los pines.."	( 1 to: self inputPins size ) do: [ :ind |				"Busco el elemento grafico conectado a la entrada numero ind"		inputGraphicElement := self blockConnectedToInput: ind.					"Acomodo su pin de entrada segun el elemento que acabo de hallar."		self setPositionForInputPin: ind to: ( self getFirstInputPinPosition x @ inputGraphicElement getFirstOutputPinPosition y ).		].			"Estiro el VL al mayor tamaño según todos los elementos conectados a sus entradas.	Esto lo necesito para saber si pisa a algun grupo luego de posicionar horizontalmente."	self extent: ( self extent x @ ( self inputPins last bottom - self position y ) ).	! !!PLC_VerticalLinkMorph methodsFor: 'connection states' stamp: 'EricPernia 7/7/2013 18:38'!updateInputConnectonStates	"Actualiza las capas de estado de conexion del elemento conectados a su entrada."		| inputGraphicElement |				"Cambio los estados de conexion de capa 1 de todas sus entradas a conectado a self"	( 1 to: self inputPins size ) do: [ :ind |				"Busco el elemento grafico conectado a la salida numero ind"		inputGraphicElement := self blockConnectedToInput: ind.				"El estado de conexion de capa 1 es conectado a self en ambos casos"		inputGraphicElement rightConnectedToVerticalLink.		].! !!PLC_VerticalLinkMorph methodsFor: 'connection states' stamp: 'EricPernia 7/7/2013 17:06'!updateOutputsConnectonStates	"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."		| outputGraphicElement |		"Actualiza las capas de estado de conexion de los elementos conectados a sus entradas."	self updateInputConnectonStates.			"Busco el elemento grafico conectado a la salida numero 1"	outputGraphicElement := self blockConnectedToOutput: 1.		"Cambio el estado de conexion de capa 2 al que traiga el elemento actual"	outputGraphicElement connectionStateLayer2: self connectionStateLayer2.	outputGraphicElement changed.			"Cambio los estados de conexion de capa 1 de todas sus salidas a conectado a self"	( 1 to: self outputPins size ) do: [ :ind |				"Busco el elemento grafico conectado a la salida numero ind"		outputGraphicElement := self blockConnectedToOutput: ind.				"El estado de conexion de capa 1 es conectado a self en ambos casos"		outputGraphicElement leftConnectedToVerticalLink.			"Actualiza las capas de estado de conexion de los elementos conectados a sus salidas."		outputGraphicElement updateOutputsConnectonStates.		].! !!PLC_VerticalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 4/27/2013 02:12'!drawElementOn: aCanvas	"Dibujo el rectangulo negro que representa al horizonta link."	aCanvas fillRectangle: self vBar color: self userInteractionStateLayer1 elementColor.! !!PLC_VerticalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 4/22/2013 18:50'!vBar	"Barra vertical que representa el right rail."	| width height vBar |	width := self properties scale y * 2.	height := self properties scale y * ( self bounds height - 16 ).		vBar := Rectangle origin: (0@0) corner: ( width @ height ).		^ vBar align: vBar center with: self bounds center.! !!PLC_VerticalLinkMorph methodsFor: 'extent' stamp: 'EricPernia 4/25/2013 01:52'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self totalExtent x @ ( self totalExtent y - 4 ).! !!PLC_VerticalLinkMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 18:52'!defaultExtent	"Tamaño por defecto del elemento."		^ self properties scale * ( 8 @ ( self gridExtent y * 3 ) ).! !!PLC_VerticalLinkMorph methodsFor: 'extent' stamp: 'EricPernia 7/7/2013 20:12'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		"En caso del Enlace Vertical el tamaño vertical del layoutRectangle debe ser del tamaño vertical 	de la grilla  para que no moleste cuando esté dentro un grupo de primer pin y le pida 	el layoutArea a dicho grupo. Molesta ya que me agranda el layoutRtangle del grupo 	verticalmente dificultando el posicionamiento."	^ self extent.! !!PLC_VerticalLinkMorph methodsFor: 'extent' stamp: 'EricPernia 4/22/2013 18:52'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self extent.	! !!PLC_VerticalLinkMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/9/2013 17:10'!addToGroup: aGroup	"Chequea si fue explorado, si es así no hace nada.	Si nunca fue explorado explora todas sus salidas."	| newGroup |			( self owner wasExplored: self )		ifFalse: [					"Se añade al grupo pasado como parámetro."			aGroup add: self.			"Añado al nuevo grupo todos los elementos de la rama serie a la 			primer salida del VL."			( self blockConnectedToOutput: 1 ) addToGroup: aGroup.						"Si tiene más de una salida debo crear un Nuevo Grupo por cada una."				( 2 to: self outputPins size ) 				do: [ :ind |									"Creo un nuevo grupo."					newGroup := PLC_GraphicElementGroup new.						"Lo añado a la colección groups del PLC_LadderView."					self owner groups add: newGroup.										"Agrego todos los elementos de salida correspondientes a ese grupo."					( self blockConnectedToOutput: ind ) addToGroup: newGroup.					].			].! !!PLC_VerticalLinkMorph methodsFor: 'position' stamp: 'EricPernia 7/7/2013 19:38'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ 0 @ 0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_VerticalLinkMorph class	instanceVariableNames: ''!!PLC_VerticalLinkMorph class methodsFor: 'instance creation' stamp: 'EricPernia 7/14/2013 05:28'!newFromElement: anElement	"Nueva isntancia a partir de un elemento de un bloque conectable"	| graphicElem num |	graphicElem := self new.			num := anElement connectableBlockInputs.	num timesRepeat: [ graphicElem addInputPin. ].		num := anElement connectableBlockOutputs.	num timesRepeat: [ graphicElem addOutputPin. ].		"Lo posiciono fuera del ladderView para que no moleste cuando	hago layout"	graphicElem position: graphicElem position - graphicElem layoutRectangle extent.		^ graphicElem.! !PLC_TagMorph subclass: #PLC_BlockNameMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_BlockNameMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_BlockNameMorph is xxxxxxxxx.Instance Variables!!PLC_BlockNameMorph methodsFor: 'margin' stamp: 'EricPernia 6/26/2013 01:40'!leftMargin	"Retorna el margen izquierdo del texto con respecto al elemento."		^ self properties scale x * 4.! !!PLC_BlockNameMorph methodsFor: 'margin' stamp: 'EricPernia 6/26/2013 01:40'!rightMargin	"Retorna el margen derecho del texto con respecto al elemento."		^ self properties scale x * 4.! !!PLC_BlockNameMorph methodsFor: 'initialize-release' stamp: 'EricPernia 6/26/2013 02:26'!initialize	"comment stating purpose of message"	super initialize.	text := 'BLOCK'.! !!PLC_BlockNameMorph methodsFor: 'event handling' stamp: 'EricPernia 6/26/2013 01:36'!handlesMouseOver: anEvent	"Permite manejar el evento de que el puntero pasa sobre el morph."	^false.! !!PLC_BlockNameMorph methodsFor: 'drawing' stamp: 'EricPernia 6/26/2013 01:37'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		"aCanvas 		fillRectangle: self backgroundRectangle 		color: self drawingLayer1 blockFootAndHeaderColor."! !!PLC_BlockNameMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 01:47'!elementDoubleWidth	"Doble ancho del elemento"	^ self properties scale x * 180.! !!PLC_BlockNameMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 01:47'!elementWidth	"Ancho estandar del elemento"	^ self properties scale x * 84.! !!PLC_BlockNameMorph methodsFor: 'extent' stamp: 'EricPernia 6/29/2013 18:21'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent.! !!PLC_BlockNameMorph methodsFor: 'position' stamp: 'EricPernia 6/29/2013 18:23'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ ( 0 @ 0 ).! !PLC_TagMorph subclass: #PLC_EditableTagMorph	instanceVariableNames: 'pluggableTextMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_EditableTagMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_EditableTagMorph is xxxxxxxxx.Instance Variables	pluggableTextMorph:		<Object>pluggableTextMorph	- xxxxx!!PLC_EditableTagMorph methodsFor: 'pluggableTextMorph' stamp: 'EricPernia 8/7/2013 03:21'!buildPluggableTextMorph	"Construye el PluggableTextMorph, que por defecto esta oculto."	pluggableTextMorph := (PluggableTextMorph		on: self		text: #text		accept: #textChanged:).			pluggableTextMorph extent: self pluggableTextMorphExtent;		borderWidth: 1;		color: Color white;		"hasUnacceptedEdits: true;"		acceptOnCR: true;		acceptOnFocusChange: true;		"autoAccept: true;"		setNameTo: #pluggableTextTag;		openInWorld.			"Lo hago invisible"			pluggableTextMorph visible: false.! !!PLC_EditableTagMorph methodsFor: 'pluggableTextMorph' stamp: 'EricPernia 8/7/2013 02:22'!pluggableTextMorphExtent	"Devuelve el tamaño para setear al PluggableTextMorph"	^ self extent x @ 50.! !!PLC_EditableTagMorph methodsFor: 'change text' stamp: 'EricPernia 8/7/2013 02:57'!textChanged: aText	"Evento que se da al cambiar el texto del PluggableTextMorph de un ActualArgumentMorph."	self pluggableTextMorph delete.  "Si refibujo el Morph"	"self pluggableTextMorph visible: false." "Si no refibujo el Morph"		"Owner es es un ladderView"	self owner textChangedIn: self by: aText asString.! !!PLC_EditableTagMorph methodsFor: 'other events' stamp: 'EricPernia 8/7/2013 03:03'!changeFunction	"Estado changeFunction."	| aWorld |	"Cambio el texto del pluggableTextMorph al del actualArgumentMorph"	self pluggableTextMorph changeText: self text.		"Posiciono el pluggableTextMorph"	self pluggableTextMorph position: self position. "VERRRRRRRRRRR"	"Hago que el pluggableTextMorph sea visible"	self pluggableTextMorph visible: true.		"Pongo el pluggableTextMorph sobre todas las ventanas"		(aWorld := self currentWorld) addMorphFront: self pluggableTextMorph.! !!PLC_EditableTagMorph methodsFor: 'other events' stamp: 'EricPernia 8/7/2013 02:13'!lostKeyboardFocus	"Evento que ejecuta el Morph cuando pierde el foco del teclado"	"self textChanged: self pluggableTextMorph text."! !!PLC_EditableTagMorph methodsFor: 'accessing' stamp: 'EricPernia 8/7/2013 02:13'!pluggableTextMorph	"Retorna el pluggableTextMorph que es el único submorph del ActualArgumentMorph"	^ pluggableTextMorph " self submorphs first."! !!PLC_EditableTagMorph methodsFor: 'position' stamp: 'EricPernia 8/7/2013 02:39'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ 0 @ 0.! !!PLC_EditableTagMorph methodsFor: 'extent' stamp: 'EricPernia 8/7/2013 02:39'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_EditableTagMorph class	instanceVariableNames: ''!!PLC_EditableTagMorph class methodsFor: 'instance creation' stamp: 'EricPernia 8/7/2013 02:13'!newWithText: aString	"Nuevo con texto asString"	| alctualArgumentMorph |		alctualArgumentMorph := self new.		alctualArgumentMorph text: aString.		alctualArgumentMorph extentChanged.		alctualArgumentMorph buildPluggableTextMorph.		^ alctualArgumentMorph.! !PLC_EditableTagMorph subclass: #PLC_ActualArgumentMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_ActualArgumentMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_ActualArgumentMorph is xxxxxxxxx.Instance Variables!!PLC_ActualArgumentMorph methodsFor: 'pluggableTextMorph' stamp: 'EricPernia 8/7/2013 02:22'!pluggableTextMorphExtent	"Devuelve el tamaño para setear al PluggableTextMorph"	^ self extent x @ 50.! !!PLC_ActualArgumentMorph methodsFor: 'position' stamp: 'EricPernia 7/6/2013 00:35'!centerLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]	cuado tiene alineación centrada."		^ 0 @ 0.! !!PLC_ActualArgumentMorph methodsFor: 'position' stamp: 'EricPernia 7/6/2013 00:32'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px].	Se lo pide a su estado de alineación"		^ self textAlign layoutRectanglePositionFor: self.! !!PLC_ActualArgumentMorph methodsFor: 'position' stamp: 'EricPernia 7/10/2013 02:34'!leftLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]	cuado tiene alineación izquierda."		^ self properties scale * ( -4 @ 0 ).! !!PLC_ActualArgumentMorph methodsFor: 'position' stamp: 'EricPernia 7/6/2013 00:38'!rightLayoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]	cuado tiene alineación derecha."		^ 0 @ 0.! !!PLC_ActualArgumentMorph methodsFor: 'extent' stamp: 'EricPernia 7/6/2013 01:07'!centerLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle	cuado tiene alineación centrada."		^ self extent.! !!PLC_ActualArgumentMorph methodsFor: 'extent' stamp: 'EricPernia 7/6/2013 00:32'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle.	Se lo pide a su estado de alineación"		^ self textAlign layoutRectangleExtentFor: self.! !!PLC_ActualArgumentMorph methodsFor: 'extent' stamp: 'EricPernia 7/6/2013 01:06'!leftLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle	cuado tiene alineación izquierda."		^ self extent + (self properties scale * ( 4 @ 0 ) ).! !!PLC_ActualArgumentMorph methodsFor: 'extent' stamp: 'EricPernia 7/6/2013 01:06'!rightLayoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle	cuado tiene alineación derecha."		^ self extent + (self properties scale * ( 4 @ 0 ) ).! !!PLC_ActualArgumentMorph methodsFor: 'layout' stamp: 'EricPernia 7/9/2013 16:57'!layoutOn: aLadderView from: aGraphicElement output: anOutputNumber	"El elemento se posiciona dentro del ladderView."	"Alineo Horizontalmente a este elemento gráfico."	self layoutHorizontallyOn: aLadderView from: aGraphicElement output: anOutputNumber.		"Alineo Verticalmnete su grupo."	self layoutGroupVerticallyOn: aLadderView from: aGraphicElement output: anOutputNumber.! !!PLC_ActualArgumentMorph methodsFor: 'layout' stamp: 'EricPernia 8/25/2013 18:42'!xPositionedCascade: aBoolean	"Pone el flag xPosition al valor aBoolean de todos los elementos conectados a sus salidas y sus elementos hacen lo mismo."		"No hace nada. Es por polimorfismo.  Para que no se tilde con las variables de salida de los bloques."! !!PLC_ActualArgumentMorph methodsFor: 'model exploration' stamp: 'EricPernia 7/9/2013 17:13'!addToGroup: aGroup	"El elemento Actual Argument se añade al grupo pasado como parámetro.	Aquí se corta la cadena de añadir al grupo."		aGroup add: self.! !!PLC_ActualArgumentMorph methodsFor: 'draw elements' stamp: 'EricPernia 8/6/2013 23:48'!outputPinsSize	"Devuelve la cantidad de pines de salida. Es un mensaje para que no 	tire error al dibujar la vista ladder intentando dibujar las salidas de 	un elemento que no tiene. FEOOO MEJORARR"	^ 0.! !!PLC_ActualArgumentMorph methodsFor: 'change text' stamp: 'EricPernia 8/7/2013 02:31'!actualArgumentText: aString	self text: aString.	self pluggableTextMorph changeText: aString asText.		! !!PLC_ActualArgumentMorph methodsFor: 'change text' stamp: 'EricPernia 8/7/2013 02:31'!textChanged: aText	"Evento que se da al cambiar el texto del PluggableTextMorph de un ActualArgumentMorph."	self pluggableTextMorph delete.		"Owner es es un ladderView"	self owner changeActualArgumentFor: self by: aText asString.! !!PLC_ActualArgumentMorph methodsFor: 'other events' stamp: 'EricPernia 11/18/2013 01:45'!changeFunction: anEvent	"Estado changeFunction."	"Cambio el texto del pluggableTextMorph al del actualArgumentMorph"	self pluggableTextMorph changeText: self text.		"Posiciono el pluggableTextMorph"	self pluggableTextMorph bottomLeft: self bottomLeft + self owner position + self owner owner position. "VERRRRRRRRRRR"	"Hago que el pluggableTextMorph sea visible"	self pluggableTextMorph visible: true.	" Le doy el foco del teclado al pluggableTextMorph"		anEvent hand newKeyboardFocus: self pluggableTextMorph .	"Selecciono todo el texto del pluggableTextMorph"	self pluggableTextMorph  selectAll.		"Pongo el pluggableTextMorph sobre todas las ventanas"		self currentWorld		addMorphFront: self pluggableTextMorph.! !PLC_EditableTagMorph subclass: #PLC_CellMorph	instanceVariableNames: 'pluggableTextMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_CellMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_CellMorph is xxxxxxxxx.Instance Variables	pluggableTextMorph:		<Object>pluggableTextMorph	- xxxxx!!PLC_CellMorph methodsFor: 'pluggableTextMorph' stamp: 'EricPernia 11/18/2013 07:26'!changeFunction: anEvent	"Estado changeFunction."	"Cambio el texto del pluggableTextMorph al del actualArgumentMorph"	self pluggableTextMorph changeText: self text.		"Posiciono el pluggableTextMorph"	self pluggableTextMorph bottomLeft: self bottomLeft + self owner position + self owner owner position. "VERRRRRRRRRRR"	"Hago que el pluggableTextMorph sea visible"	self pluggableTextMorph visible: true.	self pluggableTextMorph extent: self extent.	" Le doy el foco del teclado al pluggableTextMorph"		anEvent hand newKeyboardFocus: self pluggableTextMorph .	"Selecciono todo el texto del pluggableTextMorph"	self pluggableTextMorph  selectAll.		"Pongo el pluggableTextMorph sobre todas las ventanas"		self currentWorld		addMorphFront: self pluggableTextMorph.! !!PLC_CellMorph methodsFor: 'pluggableTextMorph' stamp: 'EricPernia 8/7/2013 02:26'!pluggableTextMorphExtent	"Devuelve el tamaño para setear al PluggableTextMorph"	^ self extent.! !!PLC_CellMorph methodsFor: 'position' stamp: 'EricPernia 8/7/2013 02:43'!backgroundRectanglePosition	"Tamaño por defecto"		^ 0@0.! !!PLC_CellMorph methodsFor: 'position' stamp: 'EricPernia 11/18/2013 03:57'!stringPositionFor: aString index: aNumber	"Dibujo el texto"	| x y |			x:= (self textAlign) txtPositionXFor: aString in: self.	y := self position y + ( ( self extent y - self textLineHeight ) / 2.0 ) rounded.			^  x @ y.! !!PLC_CellMorph methodsFor: 'extent' stamp: 'EricPernia 8/7/2013 02:42'!backgroundRectangleExtent	"Tamaño por defecto"		^ self extent.! !!PLC_CellMorph methodsFor: 'extent' stamp: 'EricPernia 8/7/2013 02:41'!defaultExtent	"Tamaño por defecto"		^ self properties scale * ( 96 @ 18 ).! !!PLC_CellMorph methodsFor: 'extent' stamp: 'EricPernia 11/18/2013 01:55'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self extent! !!PLC_CellMorph methodsFor: 'change text' stamp: 'EricPernia 11/18/2013 06:29'!textChanged: aText	"Evento que se da al cambiar el texto del PluggableTextMorph de un ActualArgumentMorph."	self pluggableTextMorph delete.  "Si refibujo el Morph"	"self pluggableTextMorph visible: false." "Si no refibujo el Morph"		"Owner es es un ladderView"	self owner textChangedIn: self by: aText asString.! !PLC_PinBlockMorph subclass: #PLC_PinMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_PinMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_PinMorph is xxxxxxxxx.Instance Variables!!PLC_PinMorph methodsFor: 'drawing' stamp: 'EricPernia 5/1/2013 14:55'!drawBackgroundOn: aCanvas	"Dibuja el fondo del pin. En este caso no hace nada.	Es para arreglar el error grafico de los elementos como contactos, LPR y VL"		! !!PLC_PinMorph methodsFor: 'extent' stamp: 'EricPernia 5/1/2013 14:56'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self properties scale * ( 3 @ self defaultExtent y ).! !PLC_GraphicElementMorph subclass: #PLC_HorizontalLinkMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_HorizontalLinkMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_HorizontalLinkMorph is xxxxxxxxx.Instance Variables!!PLC_HorizontalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 5/22/2012 18:56'!backgroundRectangle	"Fondo del elemento."	| width height backgroundRectangle |	width := self properties scale y * self bounds width.	height := self properties scale y * 8.		backgroundRectangle := Rectangle origin: (0@0) corner: ( width @ height ).		^ backgroundRectangle align: backgroundRectangle center with: self bounds center.! !!PLC_HorizontalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2012 15:59'!defaultExtent	"Tamaño por defecto del horizontal link."	^ self properties scale * (24 @ 18).! !!PLC_HorizontalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 4/29/2013 13:58'!drawElementOn: aCanvas	"Dibujo el rectangulo negro que representa al horizonta link."	aCanvas fillRectangle: self hBar color: self userInteractionStateLayer1 elementColor.! !!PLC_HorizontalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 4/30/2013 01:53'!extentBetweenElements	"Tamaño del horizontal link según a lo que este conectado."	| outputGraphicElement inputGraphicElement |	inputGraphicElement := self connectedAtInput: 1.	outputGraphicElement := self connectedAtOutput: 1.			( inputGraphicElement isNil or: [ outputGraphicElement isNil] ) 		ifTrue: [ 			^ self defaultExtent			]		ifFalse: [ 			^ ( outputGraphicElement left - inputGraphicElement right) @ self defaultExtent y.			]	! !!PLC_HorizontalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 6/1/2012 16:49'!hBar	"Barra horizontal que representa el cable de conexión entre 2 elementos."	| width height hBar |	width := self properties scale y * self bounds width.	height := self properties scale y * 2.		hBar := Rectangle origin: (0@0) corner: ( width @ height ).		^ hBar align: hBar center with: self bounds center.! !!PLC_HorizontalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2012 16:00'!insertionPointCenter	"Devuelve el punto del centro del rectangulo del punto de inserción 	que no coincide siempre con el centro del area de drop."	^ self center.! !!PLC_HorizontalLinkMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2012 17:30'!insertionPointDropAreaExtent	"Tamaño del area de drop del insertion point de un Vertical link u horizontal link."	^ self properties scale * ( 52 @ 24 ) .! !!PLC_HorizontalLinkMorph methodsFor: 'initialize-release' stamp: 'EricPernia 6/1/2012 16:38'!initialize	"Inicializaciones del horizontal link."	| insertionPoint |	super initialize.		self extent: self defaultExtent.		insertionPoint := PLC_InsertionPointMorph new.		insertionPoint center: self insertionPointCenter.		self addMorph: insertionPoint;		openInWorld.! !!PLC_HorizontalLinkMorph methodsFor: 'other events' stamp: 'EricPernia 5/30/2012 22:51'!extentChanged	"Actualiza el tamaño de la Conexion Horizontal."	self extent: self extentBetweenElements.! !!PLC_HorizontalLinkMorph methodsFor: 'commands recive from ladder view' stamp: 'EricPernia 5/1/2013 23:32'!openBranchOnConnectionFrom: aLadderView	"Si el elemento grafico es un Horizontal Link abre una rama en la conexion. Si no, no hace nada"		aLadderView openBranchOnConnection: self.! !!PLC_HorizontalLinkMorph methodsFor: 'extent' stamp: 'EricPernia 6/30/2013 04:50'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent.! !!PLC_HorizontalLinkMorph methodsFor: 'position' stamp: 'EricPernia 7/7/2013 05:57'!layoutRectanglePosition	"Posicion relativa del layoutRectangle"		^ 0 @ 0! !PLC_CoilMorph subclass: #PLC_NCoilMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_NCoilMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_NCoilMorph is xxxxxxxxx.Instance Variables!!PLC_NCoilMorph methodsFor: 'drawing' stamp: 'EricPernia 5/1/2013 18:43'!drawElementOn: aCanvas	"Dibujo la linea diagonal del centro"	| rectangleReduction |	super drawElementOn: aCanvas.		rectangleReduction := (self properties scale x * 4.0) rounded.		aCanvas 		line: self centralCircle bottomLeft + (rectangleReduction @ rectangleReduction negated)		to: self centralCircle topRight + (rectangleReduction negated @ rectangleReduction)		width: self leftHBar extent y 		color: self userInteractionStateLayer1 elementColor.! !PLC_TagMorph subclass: #PLC_OneLineTagMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_OneLineTagMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_OneLineTagMorph is xxxxxxxxx.Instance Variables!!PLC_OneLineTagMorph methodsFor: 'size' stamp: 'EricPernia 6/26/2013 01:22'!textWidth	"Ancho de una linea de texto"	^ self text asMorph extent x + self leftMargin + self rightMargin. ! !!PLC_OneLineTagMorph methodsFor: 'size' stamp: 'EricPernia 6/26/2013 01:25'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self textWidth @ self defaultExtent y.! !!PLC_OneLineTagMorph methodsFor: 'extent' stamp: 'EricPernia 6/26/2013 01:16'!defaultExtent	"Tamaño por defecto"		^ self properties scale * ( 75 @ super defaultExtent y ).! !!PLC_OneLineTagMorph methodsFor: 'extent' stamp: 'EricPernia 6/29/2013 18:22'!layoutRectangleExtent	"Devuelve el tamaño en pixeles del layoutRectangle."		^ self extent.! !!PLC_OneLineTagMorph methodsFor: 'drawing' stamp: 'EricPernia 6/26/2013 01:16'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		"aCanvas 		fillRectangle: self backgroundRectangle 		color: self drawingLayer1 blockFootAndHeaderColor."! !!PLC_OneLineTagMorph methodsFor: 'event handling' stamp: 'EricPernia 6/26/2013 01:16'!handlesMouseOver: anEvent	"Permite manejar el evento de que el puntero pasa sobre el morph."	^false.! !!PLC_OneLineTagMorph methodsFor: 'margin' stamp: 'EricPernia 6/26/2013 01:41'!leftMargin	"Retorna el margen izquierdo del texto con respecto al elemento."		^ self properties scale x * 1.! !!PLC_OneLineTagMorph methodsFor: 'margin' stamp: 'EricPernia 6/26/2013 01:41'!rightMargin	"Retorna el margen derecho del texto con respecto al elemento."		^ self properties scale x * 1.! !!PLC_OneLineTagMorph methodsFor: 'position' stamp: 'EricPernia 6/29/2013 18:23'!layoutRectanglePosition	"Devuelve la posición en pantalla del layoutRectangle relativa a position del elemento [px]."		^ ( 0 @ 0 ).! !PLC_OneLineTagMorph subclass: #PLC_OverloadedMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_OverloadedMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_OverloadedMorph is xxxxxxxxx.Instance Variables!!PLC_OverloadedMorph methodsFor: 'drawing' stamp: 'EricPernia 5/22/2013 12:48'!drawElementOn: aCanvas	"Dibuja el elemento"		super drawElementOn: aCanvas.		aCanvas			frameRectangle: self backgroundRectangle		 width: 1 		colors: { self userInteractionStateLayer1 blockBodyColor}  		dashes: {1}.! !PLC_TagMorph subclass: #PLC_TitleMorph	instanceVariableNames: 'textColor backgroundColor backgroundBorderColor backgroundBorderWidth leftMargin rightMargin emphasis'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_TitleMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_TitleMorph is xxxxxxxxx.Instance Variables	backgroundBorderColor:		<Object>	backgroundBorderWidth:		<Object>	backgroundColor:		<Object>	emphasis:		<Object>	leftMargin:		<Object>	rightMargin:		<Object>	textColor:		<Object>backgroundBorderColor	- xxxxxbackgroundBorderWidth	- xxxxxbackgroundColor	- xxxxxemphasis	- xxxxxleftMargin	- xxxxxrightMargin	- xxxxxtextColor	- xxxxx!!PLC_TitleMorph methodsFor: 'initialize-release' stamp: 'EricPernia 5/23/2013 00:24'!initialize 	"comment stating purpose of message"	self backgroundColor: Color lightGray.	self backgroundBorderColor: Color black.	self backgroundBorderWidth: 0.	self textColor: Color white. 	self leftMargin: 5.	self rightMargin: 5.	self emphasis: 0.		super initialize.! !!PLC_TitleMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2013 01:58'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		aCanvas 		fillRectangle: self bounds 		color: self backgroundColor.			aCanvas			frameRectangle: self bounds		width: self backgroundBorderWidth 		colors: { self backgroundBorderColor. }  		dashes: {1}.! !!PLC_TitleMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2013 00:17'!drawElementOn: aCanvas	"Dibuja el elemento"	| strings |	strings := self stringsToDraw.		strings do:[ :str |		"Linea de texto"		aCanvas				drawString: str			at: (self stringPositionFor: str index: (strings indexOf: str))			font: self font			color: self textColor.		].! !!PLC_TitleMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2013 00:19'!font	"Fuente del texto"	^ TextStyle defaultFont emphasized: self emphasis.! !!PLC_TitleMorph methodsFor: 'drawing' stamp: 'EricPernia 5/23/2013 01:48'!stringPositionFor: aString index: aNumber	"Dibujo el texto"	| x y |			x:= (self textAlign) txtPositionXFor: aString in: self.	y := self position y + ( ( self extent y - self textLineHeight ) / 2.0 ) rounded.			^  x @ y.! !!PLC_TitleMorph methodsFor: 'extent' stamp: 'EricPernia 5/22/2013 16:58'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self extent.! !!PLC_TitleMorph methodsFor: 'extent' stamp: 'EricPernia 5/22/2013 13:01'!currentWidth	"Ancho actual de una linea de texto"	^ self extent x. ! !!PLC_TitleMorph methodsFor: 'extent' stamp: 'EricPernia 11/17/2013 04:01'!totalExtent	"Devuelve el tamaño total del elemento. Es el tamaño total del Morph.	Ningún elemento puede pisar este área de otro elemento."		^ self extent! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 18:50'!backgroundBorderColor	^ backgroundBorderColor! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 18:50'!backgroundBorderColor: anObject	backgroundBorderColor := anObject! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/23/2013 00:23'!backgroundBorderWidth	^ backgroundBorderWidth! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/23/2013 00:23'!backgroundBorderWidth: anObject	backgroundBorderWidth := anObject! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:09'!backgroundColor	^ backgroundColor! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 17:59'!backgroundColor: anObject	backgroundColor := anObject! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/23/2013 00:19'!emphasis	^ emphasis! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/23/2013 00:19'!emphasis: anObject	emphasis := anObject! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 18:53'!leftMargin	^ leftMargin! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 18:53'!leftMargin: anObject	leftMargin := anObject! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 18:53'!rightMargin	^ rightMargin! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 18:53'!rightMargin: anObject	rightMargin := anObject! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 17:59'!textColor	^ textColor! !!PLC_TitleMorph methodsFor: 'accessing' stamp: 'EricPernia 5/22/2013 17:59'!textColor: anObject	textColor := anObject! !!PLC_TitleMorph methodsFor: 'event handling' stamp: 'EricPernia 11/17/2013 03:59'!handlesMouseOver: evt	"No maneja el evento de mouse sobre este elemento"	^ false! !!PLC_TitleMorph methodsFor: 'event handling' stamp: 'EricPernia 8/5/2013 02:37'!handlesMouseOverBORRAME: evt	"No maneja el evento de mouse sobre este elemento"	^ false! !PLC_TagMorph subclass: #PLC_RowMorph	instanceVariableNames: 'textColor backgroundColor backgroundBorderColor backgroundBorderWidth leftMargin rightMargin emphasis'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-GraphicElementMorph'!!PLC_RowMorph commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_RowMorph is xxxxxxxxx.Instance Variables	backgroundBorderColor:		<Object>	backgroundBorderWidth:		<Object>	backgroundColor:		<Object>	emphasis:		<Object>	leftMargin:		<Object>	rightMargin:		<Object>	textColor:		<Object>backgroundBorderColor	- xxxxxbackgroundBorderWidth	- xxxxxbackgroundColor	- xxxxxemphasis	- xxxxxleftMargin	- xxxxxrightMargin	- xxxxxtextColor	- xxxxx!!PLC_RowMorph methodsFor: 'initialize-release' stamp: 'EricPernia 8/4/2013 05:10'!initialize 	"comment stating purpose of message"	self backgroundColor: Color lightGray.	self backgroundBorderColor: Color black.	self backgroundBorderWidth: 0.	self textColor: Color white. 	self leftMargin: 5.	self rightMargin: 5.	self emphasis: 0.		super initialize.! !!PLC_RowMorph methodsFor: 'drawing' stamp: 'EricPernia 8/4/2013 05:10'!drawBackgroundOn: aCanvas	"Dibuja el fondo del elemento"		aCanvas 		fillRectangle: self bounds 		color: self backgroundColor.			aCanvas			frameRectangle: self bounds		width: self backgroundBorderWidth 		colors: { self backgroundBorderColor. }  		dashes: {1}.! !!PLC_RowMorph methodsFor: 'drawing' stamp: 'EricPernia 8/4/2013 05:10'!drawElementOn: aCanvas	"Dibuja el elemento"	| strings |	strings := self stringsToDraw.		strings do:[ :str |		"Linea de texto"		aCanvas				drawString: str			at: (self stringPositionFor: str index: (strings indexOf: str))			font: self font			color: self textColor.		].! !!PLC_RowMorph methodsFor: 'drawing' stamp: 'EricPernia 8/4/2013 05:10'!font	"Fuente del texto"	^ TextStyle defaultFont emphasized: self emphasis.! !!PLC_RowMorph methodsFor: 'drawing' stamp: 'EricPernia 8/4/2013 05:10'!stringPositionFor: aString index: aNumber	"Dibujo el texto"	| x y |			x:= (self textAlign) txtPositionXFor: aString in: self.	y := self position y + ( ( self extent y - self textLineHeight ) / 2.0 ) rounded.			^  x @ y.! !!PLC_RowMorph methodsFor: 'extent' stamp: 'EricPernia 8/4/2013 05:10'!backgroundRectangleExtent	"Devuelve el tamaño en pixeles del backgroundRectangle."		^ self extent.! !!PLC_RowMorph methodsFor: 'extent' stamp: 'EricPernia 8/4/2013 05:10'!currentWidth	"Ancho actual de una linea de texto"	^ self extent x. ! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!backgroundBorderColor	^ backgroundBorderColor! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!backgroundBorderColor: anObject	backgroundBorderColor := anObject! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!backgroundBorderWidth	^ backgroundBorderWidth! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!backgroundBorderWidth: anObject	backgroundBorderWidth := anObject! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!backgroundColor		^ self userInteractionStateLayer1 backgroundColor! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!backgroundColor: anObject	backgroundColor := anObject! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!emphasis	^ emphasis! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!emphasis: anObject	emphasis := anObject! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!leftMargin	^ leftMargin! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!leftMargin: anObject	leftMargin := anObject! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!rightMargin	^ rightMargin! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!rightMargin: anObject	rightMargin := anObject! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!textColor		^ self userInteractionStateLayer1 elementColor.! !!PLC_RowMorph methodsFor: 'accessing' stamp: 'EricPernia 8/4/2013 05:10'!textColor: anObject	textColor := anObject! !