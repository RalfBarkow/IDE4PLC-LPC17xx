"Copyright © 2012-2014 Eric Nicolás Pernia.This file is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>."Object subclass: #PLC_Location	instanceVariableNames: 'declaration dataValue'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_Location commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Location is xxxxxxxxx.Instance Variables	dataValue:		<Object>	declaration:		<Object>dataValue	- xxxxxdeclaration	- xxxxx!!PLC_Location methodsFor: 'initialize-release' stamp: 'EricPernia 11/8/2013 00:10'!initialize	"Este objeto representa a la variable simbolica simple como operando."	super initialize.! !!PLC_Location methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 01:10'!cCompile	"Este objeto representa a una ubicacion en memoria como operando."	^ self declaration physicalAddress cCompile.	! !!PLC_Location methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 00:12'!ilCompile	"Este objeto representa a la variable simbolica simple como operando."		^ self declaration physicalAddress ilCompile.! !!PLC_Location methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 00:10'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ self declaration varScopePrefix.! !!PLC_Location methodsFor: 'accessing' stamp: 'EricPernia 11/8/2013 00:10'!dataType
	"Devuelve el tipo de datos de la variable.	Este lo conoce su Declaracion"	^ self declaration dataType.! !!PLC_Location methodsFor: 'accessing' stamp: 'EricPernia 11/8/2013 00:10'!dataValue	^ dataValue! !!PLC_Location methodsFor: 'accessing' stamp: 'EricPernia 11/8/2013 00:10'!dataValue: anObject	dataValue := anObject	"AGREGAR CHEQUEO DE LITERAL O CONSTANTE CONTRA EL TIPO DE LA VARIABLE."	"( self dataType acceptValue: anObject dataValue )		ifTrue: [			dataValue := anObject			] 		ifFalse:[			self error: 'Valor no valido para el tipo de datos' , (self dataType keyword asString).			] 	"! !!PLC_Location methodsFor: 'accessing' stamp: 'EricPernia 11/8/2013 00:10'!declaration	"Es un objeto PLC_SimpleSymbolicVarDecl"	^ declaration! !!PLC_Location methodsFor: 'accessing' stamp: 'EricPernia 11/8/2013 00:10'!declaration: anObject	declaration := anObject! !!PLC_Location methodsFor: 'accessing' stamp: 'EricPernia 11/8/2013 00:10'!identifier	"Devuelve el identificador de su declaration"	^ self declaration identifier.! !!PLC_Location methodsFor: 'testing' stamp: 'EricPernia 11/8/2013 00:10'!isPLCLiteral	"Devuelve true si es literal"	^ false.	! !!PLC_Location methodsFor: 'testing' stamp: 'EricPernia 11/8/2013 00:10'!isStructItem	"Devuelve true si es StructItem"	^ false.! !!PLC_Location methodsFor: 'testing' stamp: 'EricPernia 11/8/2013 00:10'!isVaraible	"Devuelve true pues es variable"	^ true.! !!PLC_Location methodsFor: 'testing' stamp: 'EricPernia 11/8/2013 00:10'!isVoid	"Devuelve true si es void"	^ false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_Location class	instanceVariableNames: ''!!PLC_Location class methodsFor: 'instance creation' stamp: 'EricPernia 11/8/2013 00:10'!newWithDeclaration: varDecl andDataValue: aValue	"Crea un nuevo operando Variable Simbolica Simple"	| var |		var := self new.		var declaration: varDecl.				aValue 		ifNil: [			var	dataValue: varDecl initialValue.			] 		ifNotNil: [			var	dataValue: aValue.			]. 			^ var.	! !Object subclass: #PLC_Assignments	instanceVariableNames: 'pouCall formalParameter actualArgument'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_Assignments commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Assignments is xxxxxxxxx.Instance Variables	actualArgument:		<Object>	formalParameter:		<Object>	pouCall:		<Object>actualArgument	- xxxxxformalParameter	- xxxxxpouCall	- xxxxx!!PLC_Assignments methodsFor: 'accessing' stamp: 'EricPernia 6/13/2013 15:59'!actualArgument	^ actualArgument! !!PLC_Assignments methodsFor: 'accessing' stamp: 'EricPernia 6/13/2013 15:59'!actualArgument: anObject	actualArgument := anObject! !!PLC_Assignments methodsFor: 'accessing' stamp: 'EricPernia 6/13/2013 15:59'!formalParameter	^ formalParameter! !!PLC_Assignments methodsFor: 'accessing' stamp: 'EricPernia 6/13/2013 15:59'!formalParameter: anObject	formalParameter := anObject! !!PLC_Assignments methodsFor: 'accessing' stamp: 'EricPernia 11/7/2013 11:10'!pouCall	^ pouCall! !!PLC_Assignments methodsFor: 'accessing' stamp: 'EricPernia 11/7/2013 11:10'!pouCall: anObject	pouCall := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_Assignments class	instanceVariableNames: ''!!PLC_Assignments class methodsFor: 'instance creation' stamp: 'EricPernia 6/13/2013 15:59'!newWithFormalParameter: aFormalParameter andActtualArgument: anActualArgument 	"Crea una nueva instancia con los 2 operandos pasados como parametros"	| assignment |		assignment := self new.		assignment formalParameter: aFormalParameter.	assignment actualArgument: anActualArgument.		^ assignment.! !!PLC_Assignments class methodsFor: 'instance creation' stamp: 'EricPernia 11/7/2013 13:04'!newWithFormalParameter: aFormalParameter andActtualArgument: anActualArgument andPouCall: aPouCall	"Crea una nueva instancia con los 3 parametros"	| assignment |		assignment := self new.		assignment formalParameter: aFormalParameter.	assignment actualArgument: anActualArgument.	assignment pouCall: aPouCall.		^ assignment.! !Object subclass: #PLC_StructureItem	instanceVariableNames: 'items'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_StructureItem commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_StructureItem is xxxxxxxxx.Instance Variables	items:		<Object>items	- xxxxx!!PLC_StructureItem methodsFor: 'accessing' stamp: 'EricPernia 6/9/2013 05:17'!items	^ items! !!PLC_StructureItem methodsFor: 'accessing' stamp: 'EricPernia 6/9/2013 05:17'!items: anObject	items := anObject! !!PLC_StructureItem methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 14:09'!cCompile	"Este representa al Objeto de programa que representa un acceso a una variable de una estructura.		Devuelve el string:   item1.item2.item3 ... itemn	ej:	StructName.VarName	"		| string |	string := ''.	self items do: [ :each |		string := string , each cCompile , '.' 		].		^ string copyFrom: 1 to: (string size ) - 1.! !!PLC_StructureItem methodsFor: 'compilation' stamp: 'EricPernia 1/23/2014 00:04'!dataType 	"Devuelve el tipo de datos del objeto despues del último punto.	Este puede ser una variable u otra estructura		Este método lo utilizan los Actual Argument.	"		^ self items last dataType.	! !!PLC_StructureItem methodsFor: 'compilation' stamp: 'EricPernia 1/23/2014 00:04'!dataValue 	"Devuelve el valor del objeto despues del último punto.	Este puede ser una variable u otra estructura		Este método lo utilizan los Actual Argument.	"		^ self  items last dataValue.	! !!PLC_StructureItem methodsFor: 'compilation' stamp: 'EricPernia 9/7/2013 22:17'!ilCompile	"Este representa al Objeto de programa que representa un acceso a una variable de una estructura.		Devuelve el string:   item1.item2.item3 ... itemn	ej:	StructName.VarName	"			^ self cCompile.! !!PLC_StructureItem methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 12:55'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ self declaration varScopePrefix.! !!PLC_StructureItem methodsFor: 'initialize-release' stamp: 'EricPernia 6/9/2013 05:30'!initialize	"comment stating purpose of message"	items := OrderedCollection new.! !!PLC_StructureItem methodsFor: 'add-remove' stamp: 'EricPernia 6/12/2013 02:28'!add: anObject	"Agrega anObject a su coleccion items"	self items add: anObject.! !!PLC_StructureItem methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:08'!isPLCLiteral	"Devuelve true si es literal"	^ false.! !!PLC_StructureItem methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:11'!isStructItem	"Devuelve true si es StructItem"	^ true.! !!PLC_StructureItem methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:25'!isVaraible	"Devuelve true si es variable"	^ false.! !!PLC_StructureItem methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:10'!isVoid	"Devuelve true si es void"	^ false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_StructureItem class	instanceVariableNames: ''!!PLC_StructureItem class methodsFor: 'instance creation' stamp: 'EricPernia 11/6/2013 16:00'!newWithItem: item1 andItem: item2	"Nueva instancia con 2 items cada uno deve ser un operando variable, 	el primero de estructura y el otro de una var de un campo interno de esta estructura.	"	| structItem |		structItem := self new.		structItem add: item1.	structItem add: item2.			^ structItem.		! !Object subclass: #PLC_VoidOpenad	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_VoidOpenad commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VoidOpenad is xxxxxxxxx.Instance Variables!!PLC_VoidOpenad methodsFor: 'compilation' stamp: 'EricPernia 6/14/2013 01:59'!cCompile	"Este objeto representa al operando vacio."	^ self identifier.! !!PLC_VoidOpenad methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 12:43'!dataType
	"Devuelve el tipo de datos."	^ PLC_DataType Void.! !!PLC_VoidOpenad methodsFor: 'compilation' stamp: 'EricPernia 6/22/2013 01:21'!dataValue		^ PLC_Literal newWithDataType: self dataType andDataValue: '???'.! !!PLC_VoidOpenad methodsFor: 'compilation' stamp: 'EricPernia 6/22/2013 01:32'!identifier	"Devuelve el identificador de su declaration"	^ '<???>'.! !!PLC_VoidOpenad methodsFor: 'compilation' stamp: 'EricPernia 6/14/2013 01:59'!ilCompile	"Este objeto representa al operando vacio."	^ self identifier.! !!PLC_VoidOpenad methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:08'!isPLCLiteral	"Devuelve true si es literal"	^ false.! !!PLC_VoidOpenad methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:11'!isStructItem	"Devuelve true si es StructItem"	^ false.! !!PLC_VoidOpenad methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:06'!isVaraible	"Devuelve true pues es variable"	^ false.! !!PLC_VoidOpenad methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:10'!isVoid	"Devuelve true si es void"	^ true.! !Object subclass: #PLC_Variable	instanceVariableNames: 'declaration dataValue'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_Variable commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Variable is xxxxxxxxx.Instance Variables	dataValue:		<Object>	declaration:		<Object>dataValue	- xxxxxdeclaration	- xxxxx!!PLC_Variable methodsFor: 'initialize-release' stamp: 'EricPernia 6/2/2013 07:18'!initialize	"Este objeto representa a la variable simbolica simple como operando."	super initialize.! !!PLC_Variable methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 11:10'!cCompile	"Este objeto representa a la variable simbolica simple como operando."	^ self varScopePrefix , self identifier.		"	Debe haber una lógica aca que decida si pone el pxPOU o no:		^ 'pxPOU->' , self identifier."! !!PLC_Variable methodsFor: 'compilation' stamp: 'EricPernia 6/12/2013 19:23'!ilCompile	"Este objeto representa a la variable simbolica simple como operando."		^ self identifier.! !!PLC_Variable methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 11:11'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ self declaration varScopePrefix.! !!PLC_Variable methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 08:18'!dataType
	"Devuelve el tipo de datos de la variable.	Este lo conoce su Declaracion"	^ self declaration dataType.! !!PLC_Variable methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 07:19'!dataValue	^ dataValue! !!PLC_Variable methodsFor: 'accessing' stamp: 'EricPernia 11/6/2013 14:07'!dataValue: anObject	dataValue := anObject	"AGREGAR CHEQUEO DE LITERAL O CONSTANTE CONTRA EL TIPO DE LA VARIABLE."	"( self dataType acceptValue: anObject dataValue )		ifTrue: [			dataValue := anObject			] 		ifFalse:[			self error: 'Valor no valido para el tipo de datos' , (self dataType keyword asString).			] 	"! !!PLC_Variable methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 08:19'!declaration	"Es un objeto PLC_SimpleSymbolicVarDecl"	^ declaration! !!PLC_Variable methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 08:20'!declaration: anObject	declaration := anObject! !!PLC_Variable methodsFor: 'accessing' stamp: 'EricPernia 6/12/2013 19:22'!identifier	"Devuelve el identificador de su declaration"	^ self declaration identifier.! !!PLC_Variable methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:08'!isPLCLiteral	"Devuelve true si es literal"	^ false.	! !!PLC_Variable methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:11'!isStructItem	"Devuelve true si es StructItem"	^ false.! !!PLC_Variable methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:06'!isVaraible	"Devuelve true pues es variable"	^ true.! !!PLC_Variable methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:10'!isVoid	"Devuelve true si es void"	^ false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_Variable class	instanceVariableNames: ''!!PLC_Variable class methodsFor: 'instance creation' stamp: 'EricPernia 6/21/2013 21:25'!newWithDeclaration: varDecl andDataValue: aValue	"Crea un nuevo operando Variable Simbolica Simple"	| var |		var := self new.		var declaration: varDecl.				aValue 		ifNil: [			var	dataValue: varDecl initialValue.			] 		ifNotNil: [			var	dataValue: aValue.			]. 			^ var.	! !PLC_Assignments subclass: #PLC_InputAssignment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_InputAssignment commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_InputAssignment is xxxxxxxxx.Instance Variables!!PLC_InputAssignment methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 01:56'!cCompile	"Compila la declaración de variable a C	Devuelve por ejemplo:		INST.IN = VAR		"		| cCode |			"Chequeo que Tenga algo asignado sino no lo compilo"	( self actualArgument dataType ~= PLC_DataType Void )		ifTrue: [ 						"Genero NombreInstancia"			cCode := self pouCall instanceOperand cCompile.			"Genero NombreInstancia.VarInterna"			cCode := cCode , '.' , self formalParameter identifier.				"Genero NombreInstancia.VarInterna = Argumento"			cCode := cCode  , ' = ' , self actualArgument cCompile.				^ cCode.						]		ifFalse: [ 			^ ''.			].! !!PLC_InputAssignment methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 01:56'!ilCompile	"Compila la declaración de variable a IL	Devuelve por ejemplo:		IN := VAR		"	"Chequeo que Tenga algo asignado sino no lo compilo"	( self actualArgument dataType ~= PLC_DataType Void )		ifTrue: [ 			^ self formalParameter identifier , ' := ' , self actualArgument ilCompile.			]		ifFalse: [ 			^ ''.			].! !!PLC_InputAssignment methodsFor: 'library' stamp: 'EricPernia 6/11/2013 22:22'!keyword	"Devuelve el symbol del elemento"	^ #InputAssignment ! !PLC_Assignments subclass: #PLC_OutputAssignment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_OutputAssignment commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_OutputAssignment is xxxxxxxxx.Instance Variables!!PLC_OutputAssignment methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 01:56'!cCompile	"Compila la declaración de variable a C	Devuelve por ejemplo:		VAR = INST.IOUT	"		| cCode |	"Chequeo que Tenga algo asignado sino no lo compilo"	( self actualArgument dataType ~= PLC_DataType Void )		ifTrue: [ 						"Genero NombreInstancia"			cCode := self pouCall instanceOperand cCompile.			"Genero NombreInstancia.VarInterna"			cCode := cCode , '.' , self formalParameter identifier.				"Genero Argumento = NombreInstancia.VarInterna"			cCode := self actualArgument cCompile , ' = ' , cCode.				^ cCode.						]		ifFalse: [ 			^ ''.			].! !!PLC_OutputAssignment methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 01:56'!ilCompile	"Compila la declaración de variable a IL	Devuelve por ejemplo:		OUT => VAR		"	"Chequeo que Tenga algo asignado sino no lo compilo"	( self actualArgument dataType ~= PLC_DataType Void )		ifTrue: [ 			^ self formalParameter identifier , ' => ' , self actualArgument ilCompile.			]		ifFalse: [ 			^ ''.			].! !!PLC_OutputAssignment methodsFor: 'library' stamp: 'EricPernia 6/11/2013 22:23'!keyword	"Devuelve el symbol del elemento"	^ #OutputAssignment ! !Object subclass: #PLC_Literal	instanceVariableNames: 'dataType dataValue'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_Literal commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Literal is xxxxxxxxx.Instance Variables	dataType:		<Object>	dataValue:		<Object>dataType	- xxxxxdataValue	- xxxxx!!PLC_Literal methodsFor: 'actual argument' stamp: 'EricPernia 11/18/2013 21:25'!identifier	"NO BORRAR, este mensaje se lo pide el actual argument para dibujarse"	^ self ilCompile.! !!PLC_Literal methodsFor: 'testingSubclass' stamp: 'EricPernia 5/6/2012 15:49'!isBitStringLiteral	"Devuelve true si es un PLC_BitStringlLiteral"	^ false.! !!PLC_Literal methodsFor: 'testingSubclass' stamp: 'EricPernia 5/6/2012 15:49'!isBooleanLiteral	"Devuelve true si es un PLC_BooleanLiteral"	^ false.! !!PLC_Literal methodsFor: 'testingSubclass' stamp: 'EricPernia 5/6/2012 15:49'!isCharacterString	"Devuelve true si es un PLC_CharacterString"	^ false.! !!PLC_Literal methodsFor: 'testingSubclass' stamp: 'EricPernia 5/6/2012 15:50'!isNumericLiteral	"Devuelve true si es un PLC_NumericLiteral"	^ false.! !!PLC_Literal methodsFor: 'testingSubclass' stamp: 'EricPernia 5/6/2012 15:50'!isTimeLiteral	"Devuelve true si es un PLC_TimeLiteral"	^ false.! !!PLC_Literal methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:08'!isPLCLiteral	"Devuelve true si es literal"	^ true.! !!PLC_Literal methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:11'!isStructItem	"Devuelve true si es StructItem"	^ false.! !!PLC_Literal methodsFor: 'testing' stamp: 'EricPernia 4/28/2012 22:07'!isVariable	"Devuelve false pues es constantee"	^ false.! !!PLC_Literal methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:10'!isVoid	"Devuelve true si es void"	^ false.! !!PLC_Literal methodsFor: 'compilation' stamp: 'EricPernia 6/2/2013 07:13'!cCompile	"Devuelve el string:			valor				ejemplo:				10	"	^ self dataValue asString.! !!PLC_Literal methodsFor: 'compilation' stamp: 'EricPernia 6/3/2013 00:39'!ilCompile	"Devuelve el string:			keywordTipoDeDatoValor				ejemplo:				INT#10	"	^ self dataType keyword asString , '#' , self dataValue asString.! !!PLC_Literal methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 06:14'!dataType	^ dataType! !!PLC_Literal methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 06:14'!dataType: anObject	dataType := anObject! !!PLC_Literal methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 06:14'!dataValue	^ dataValue! !!PLC_Literal methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 06:14'!dataValue: anObject	dataValue := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_Literal class	instanceVariableNames: ''!!PLC_Literal class methodsFor: 'instance creation' stamp: 'EricPernia 6/16/2013 21:48'!newWithDataType: aType andDataValue: aValue	"Crea una nueva instancia"		| literal |		literal := self new.		literal dataType: aType.		"ACA SI NO ACEPTA EL VALOR DEBERIA TIRAR ERROR O PONERLE 	EL VALOR POR DEFECTO. ELEGI PONERLE EL VALOR POR DEFECTO"		( aType acceptValue: aValue )		ifTrue: [ 			literal dataValue: aValue.			]		ifFalse: [ 			"self error: 'Valor no admitido para el tipo de datos'."			literal dataValue: aType initialValue dataValue.			].		^ literal.! !PLC_InputAssignment subclass: #PLC_InOutAssignment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Operands'!!PLC_InOutAssignment commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_InOutAssignment is xxxxxxxxx.Instance Variables!!PLC_InOutAssignment methodsFor: 'library' stamp: 'EricPernia 6/11/2013 22:22'!keyword	"Devuelve el symbol del elemento"	^ #InOutAssignment ! !