"Copyright © 2012-2014 Eric Nicolás Pernia.This file is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>."PLC_ClassWithIdentifier subclass: #PLC_VariableCategoryDecl	instanceVariableNames: 'declarations scope'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VariableCategoryDecl commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VariableCategoryDecl is xxxxxxxxx.Instance Variables	declarations:		<Object>	scope:		<Object>declarations	- xxxxxscope	- xxxxx!!PLC_VariableCategoryDecl methodsFor: 'compilation' stamp: 'EricPernia 6/17/2013 15:32'!cCompile	"Compila la declaración de variable a C	Devuelve:		tipoDeDatos NombreVariable = ValorInicial ;		tipoDeDatos NombreVariable = ValorInicial ;		tipoDeDatos NombreVariable = ValorInicial ;	...		o un String vacio si no posee ninguna varDec		"	| decls |		decls := ''.				self declarations  do: [ :each |		decls := decls , '		' , each cCompile , ';' .		].		^ decls.! !!PLC_VariableCategoryDecl methodsFor: 'compilation' stamp: 'EricPernia 9/7/2013 18:37'!cCompileWithoutInitialValue	"Compila la declaración de variable a C sin valores iniciales de las variables	Devuelve:		tipoDeDatos NombreVariable ;		tipoDeDatos NombreVariable ;	tipoDeDatos NombreVariable ;	...		o un String vacio si no posee ninguna varDec		"	| decls |		decls := ''.				self declarations  do: [ :each |		decls := decls , '		' , each cCompileWithoutInitialValue , ';' .		].		^ decls.! !!PLC_VariableCategoryDecl methodsFor: 'compilation' stamp: 'EricPernia 11/7/2013 23:10'!ilCompile	"Compila la declaración de variable a IL	Devuelve:		VAR		varDec		varDec		...	END_VAR;		o un String vacio si no posee ninguna varDec		"	| varDecl |		( self declarations size = 0 )		ifTrue: [			^ ''.			] 		ifFalse: [			varDecl := '			VAR	', self varType , ''.			self declarations do: [ :each |				varDecl := varDecl , '				' , each ilCompile , ';' .				].					varDecl := varDecl , '			END_VAR'.			^ varDecl.			].	! !!PLC_VariableCategoryDecl methodsFor: 'compilation' stamp: 'EricPernia 6/19/2013 22:58'!ilCompileWithoutInitialValue	"Compila la declaración de variable a IL sin valores iniciales de las variables	Devuelve:		VAR		varDec		varDec		...	END_VAR;		o un String vacio si no posee ninguna varDec		"	| varDecl |		( self declarations size = 0 )		ifTrue: [			^ ''.			] 		ifFalse: [			varDecl := '	VAR	', self varType , ''.			self declarations do: [ :each |				varDecl := varDecl , '		' , each ilCompileWithoutInitialValue , ';' .				].					varDecl := varDecl , '	END_VAR'.			^ varDecl.			].	! !!PLC_VariableCategoryDecl methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 11:15'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ ''.! !!PLC_VariableCategoryDecl methodsFor: 'initialize-release' stamp: 'EricPernia 9/18/2013 18:33'!initialize	"Inicializaciones. 	varType es el TIPO DE VARIABLE, es decir, la categoría de variable, por ejemplo, _INPUT"	self declarations: OrderedCollection new.		"self varType: ''."		"self acceptWire: false."! !!PLC_VariableCategoryDecl methodsFor: 'declarations' stamp: 'EricPernia 11/6/2013 15:35'!add: aVarDecl	"Añade una declaración de variable"	aVarDecl variableCategory: self.	^ self declarations add: aVarDecl.	! !!PLC_VariableCategoryDecl methodsFor: 'declarations' stamp: 'EricPernia 6/5/2013 02:08'!at: index	"Devuelve una declaración de variable en la posicion index"	^ self declarations at: index.! !!PLC_VariableCategoryDecl methodsFor: 'declarations' stamp: 'EricPernia 6/12/2013 00:04'!do: aBlock	"Envia do con el bloque aBlock a su coleccion interna"	self declarations do: aBlock.! !!PLC_VariableCategoryDecl methodsFor: 'declarations' stamp: 'EricPernia 11/7/2013 23:43'!first	"Devuelve una declaración de variable en la posicion 1"	^ self at: 1! !!PLC_VariableCategoryDecl methodsFor: 'declarations' stamp: 'EricPernia 11/7/2013 23:43'!last	"Devuelve una declaración de variable en la posicion 1"	^ self at: self declarations size.! !!PLC_VariableCategoryDecl methodsFor: 'declarations' stamp: 'EricPernia 11/18/2013 07:03'!remove: aVarDecl	"Remueve una declaración de variable"	^ self declarations remove: aVarDecl ifAbsent: [].! !!PLC_VariableCategoryDecl methodsFor: 'declarations' stamp: 'EricPernia 6/5/2013 02:08'!removeAt: index	"Remueve una declaración de variable"	^ self declarations removeAt: index.! !!PLC_VariableCategoryDecl methodsFor: 'declarations' stamp: 'EricPernia 6/11/2013 23:53'!size	"Devuelve la cantidad de elementos que tiene en su OC"	^ self declarations size.! !!PLC_VariableCategoryDecl methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 08:38'!declarations	"Declarations son declaraciones de variables, que pueden ser simbolicas o de estructura"	^ declarations! !!PLC_VariableCategoryDecl methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 08:38'!declarations: anObject	declarations := anObject! !!PLC_VariableCategoryDecl methodsFor: 'accessing' stamp: 'EricPernia 9/21/2013 20:10'!scope	"scope es la variable de instancia que se engancha con unas declaraciones de 	POU , declaraciones de Configuración o declaraciones de Recurso. Cada una de	estas modela unámbito o scope en ingles."		^ scope! !!PLC_VariableCategoryDecl methodsFor: 'accessing' stamp: 'EricPernia 9/21/2013 19:59'!scope: anObject		scope := anObject! !!PLC_VariableCategoryDecl methodsFor: 'category name' stamp: 'EricPernia 9/14/2013 01:23'!varType		^ ''! !!PLC_VariableCategoryDecl methodsFor: 'find' stamp: 'EricPernia 11/18/2013 18:54'!includeVarDeclWithIdentifier: aVariableIdentifier	"Busca si tiene en alguna de sus declaraciones una delaracion 	de variable con el identificador aVariableIdentifier"	^ self declarations 		detect: [ :each |			each identifier = aVariableIdentifier			 ] 		ifNone: [			^ nil.	"DECIA false en lugar de nil, ver si la sociedad no se desmorona por esto"			]. ! !!PLC_VariableCategoryDecl methodsFor: 'argument check' stamp: 'EricPernia 9/21/2013 19:53'!canBeRead	"Devuelve true si acepta ser leida. Esto es, si una declaración de variable	en esta categoría acpeta ser asignada como argumento a un parámetro 	formal del tipo VAR_INPUT o VAR_IN_OUT los cuales necesitan leer la 	variable asignada."		^ true.! !!PLC_VariableCategoryDecl methodsFor: 'argument check' stamp: 'EricPernia 9/21/2013 19:53'!canBeWrite	"Devuelve true si acepta ser escrita. Esto es, si una declaración de variable	en esta categoría acpeta ser asignada como argumento a un parámetro 	formal del tipo VAR_OUTPUT o VAR_IN_OUT los cuales necesitan leer la 	variable asignada."		^ true.! !!PLC_VariableCategoryDecl methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:23'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ true.! !!PLC_VariableCategoryDecl methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:24'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VariableCategoryDecl methodsFor: 'declarations check' stamp: 'EricPernia 9/22/2013 02:27'!acceptLocatedVarDecl	"Responde true si la ctegoría de variables acepta Declaraciones de Variables Localizadas"	^ false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_VariableCategoryDecl class	instanceVariableNames: ''!!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/15/2013 19:15'!compilerVarDecls	"Devuelve una instancia de Declaraciones de variable internas declaradas 	por el compilador de lenguaje gráfico. Se usa para VL_struct, 	FyFBcableada_struc que crea el compilador de Ladder.		VAR		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Var new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/14/2013 01:21'!constantVarDecls	"Devuelve una instancia de Declaraciones de variable de Salida		VAR CONSTANT		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Constant new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 11/5/2013 20:10'!externVarDecls	"Devuelve una instancia de Declaraciones de variable externas		VAR_EXTERN		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Extern new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 11/19/2013 05:10'!funInstVarDecls	"Devuelve una instancia de Declaraciones de variable internas		VAR		...	END_VAR		"		"CATEGORIA PARCHE"		^ PLC_VC_funInstVar new.	! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/14/2013 01:38'!globalVarDecls	"Devuelve una instancia de Declaraciones de variable Globales		VAR_GLOBAL		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Global new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/14/2013 01:39'!inOutVarDecls	"Devuelve una instancia de Declaraciones de variable de Entrada-Salida		VAR_IN_OUT		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_InOut new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/14/2013 01:39'!inputVarDecls	"Devuelve una instancia de Declaraciones de variable de Entrada		VAR_INPUT		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Input new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/14/2013 01:40'!outputVarDecls	"Devuelve una instancia de Declaraciones de variable de Salida		VAR_OUTPUT		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Output new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/14/2013 01:40'!outputWiredVarDecl	"Devuelve una instancia de Declaraciones de variable de Salida que acepta cable 	(puede haber una única salida que acepta cable por POU).		VAR_OUTPUT		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_OutputWired new.	^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 11/16/2013 13:27'!returnVarDecl	"Devuelve una instancia de Declaraciones de variable de Salida		VAR_OUTPUT		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Return new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/14/2013 01:40'!tempVarDecls	"Devuelve una instancia de Declaraciones de variable internas temporales		VAR_TEMP		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Temp new.		^ varDecls.! !!PLC_VariableCategoryDecl class methodsFor: 'instance creation' stamp: 'EricPernia 9/14/2013 01:40'!varDecls	"Devuelve una instancia de Declaraciones de variable internas		VAR		...	END_VAR		"		| varDecls |		varDecls := PLC_VC_Var new.		^ varDecls.! !PLC_VariableCategoryDecl subclass: #PLC_VC_Temp	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Temp commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Temp is xxxxxxxxx.Instance Variables!!PLC_VC_Temp methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:28'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ false.! !!PLC_VC_Temp methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:28'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_Temp methodsFor: 'category name' stamp: 'EricPernia 9/14/2013 01:29'!varType		^ '_TEMP'! !PLC_VariableCategoryDecl subclass: #PLC_VC_Var	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Var commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Var is xxxxxxxxx.Instance Variables!!PLC_VC_Var methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:30'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ true.! !!PLC_VC_Var methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:28'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_Var methodsFor: 'declarations check' stamp: 'EricPernia 9/22/2013 02:26'!acceptLocatedVarDecl	"Responde true si la ctegoría de variables acepta Declaraciones de Variables Localizadas"	^ true.! !!PLC_VC_Var methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 11:16'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ 'pxPOU->'.! !PLC_VariableCategoryDecl subclass: #PLC_VC_Input	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Input commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Input is xxxxxxxxx.Instance Variables!!PLC_VC_Input methodsFor: 'argument check' stamp: 'EricPernia 9/21/2013 19:55'!canBeWrite	"Devuelve true si acepta ser escrita. Esto es, si una declaración de variable	en esta categoría acpeta ser asignada como argumento a un parámetro 	formal del tipo VAR_OUTPUT o VAR_IN_OUT los cuales necesitan leer la 	variable asignada."		^ false.! !!PLC_VC_Input methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:16'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ true.! !!PLC_VC_Input methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:16'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ true! !!PLC_VC_Input methodsFor: 'category name' stamp: 'EricPernia 9/14/2013 01:14'!varType		^ '_INPUT'! !!PLC_VC_Input methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 11:17'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ 'pxPOU->'.! !PLC_VariableCategoryDecl subclass: #PLC_VC_Global	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Global commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Global is xxxxxxxxx.Instance Variables!!PLC_VC_Global methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:31'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ true.! !!PLC_VC_Global methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:27'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_Global methodsFor: 'category name' stamp: 'EricPernia 9/14/2013 01:31'!varType		^ '_GLOBAL'! !!PLC_VC_Global methodsFor: 'declarations check' stamp: 'EricPernia 9/22/2013 02:26'!acceptLocatedVarDecl	"Responde true si la ctegoría de variables acepta Declaraciones de Variables Localizadas"	^ true.! !PLC_VariableCategoryDecl subclass: #PLC_VC_Config	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Config commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Config is xxxxxxxxx.Instance Variables!!PLC_VC_Config methodsFor: 'formal parameter check' stamp: 'EricPernia 9/15/2013 19:11'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ true.! !!PLC_VC_Config methodsFor: 'formal parameter check' stamp: 'EricPernia 9/15/2013 19:11'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_Config methodsFor: 'category name' stamp: 'EricPernia 9/15/2013 19:11'!varType		^ '_CONFIG'! !PLC_VariableCategoryDecl subclass: #PLC_VC_OutputWired	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_OutputWired commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_OutputWired is xxxxxxxxx.Instance Variables!!PLC_VC_OutputWired methodsFor: 'argument check' stamp: 'EricPernia 9/21/2013 19:50'!canBeRead	"Devuelve true si acepta ser leida. Esto es, si una declaración de variable	en esta categoría acpeta ser asignada como argumento a un parámetro 	formal del tipo VAR_INPUT o VAR_IN_OUT los cuales necesitan leer la 	variable asignada."		^ false.! !!PLC_VC_OutputWired methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:27'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ false.! !!PLC_VC_OutputWired methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:30'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ true! !!PLC_VC_OutputWired methodsFor: 'category name' stamp: 'EricPernia 9/14/2013 01:30'!varType		^ '_OUTPUT'! !!PLC_VC_OutputWired methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 11:16'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ 'pxPOU->'.! !Object subclass: #PLC_StructureInitialization	instanceVariableNames: 'structDecl values'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_StructureInitialization commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_StructureInitialization is xxxxxxxxx.Instance Variables	structDecl:		<Object>	values:		<Object>structDecl	- xxxxxvalues	- xxxxx!!PLC_StructureInitialization methodsFor: 'accessing' stamp: 'EricPernia 6/16/2013 21:10'!structDecl		^ structDecl! !!PLC_StructureInitialization methodsFor: 'accessing' stamp: 'EricPernia 6/16/2013 21:10'!structDecl: anObject		structDecl := anObject! !!PLC_StructureInitialization methodsFor: 'accessing' stamp: 'EricPernia 6/16/2013 23:15'!values		^ values! !!PLC_StructureInitialization methodsFor: 'accessing' stamp: 'EricPernia 6/16/2013 23:15'!values: anObject		values := anObject! !!PLC_StructureInitialization methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 22:57'!cCompile	"Compila a codigo C"	| value |		value := '{'.		self values do: [ :each |		value := value , '			' ,		each cCompile , ','.		].		value := value copyFrom: 1 to: ( value size ) - 1. "BORRO LA ULTIMA COMA DE MAS"			value := value , '		}'.		^ value! !!PLC_StructureInitialization methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 14:02'!dataValue		"PARCHEEEEEEEEEEEEEEEE"		^ PLC_Literal newWithDataType: PLC_DataType Int andDataValue: 0.! !!PLC_StructureInitialization methodsFor: 'compilation' stamp: 'EricPernia 11/7/2013 23:15'!ilCompile	"Compila a codigo C"	| value |		value := '('.		self values do: [ :each |		value := value , '					' ,		each ilCompile , ','.		].		value := value copyFrom: 1 to: ( value size ) - 1. "BORRO LA ULTIMA COMA DE MAS"			value := value , '				)'.		^ value! !!PLC_StructureInitialization methodsFor: 'initialize-release' stamp: 'EricPernia 6/16/2013 23:16'!initialize	"Inicializa la coleccion values"	values := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_StructureInitialization class	instanceVariableNames: ''!!PLC_StructureInitialization class methodsFor: 'instance creation' stamp: 'EricPernia 6/16/2013 23:24'!newWithStructDecl: aStructDecl	"Crea una nueva instancia con aSaStructDecl."	| structInit |		structInit := self new.		structInit structDecl: aStructDecl.		structInit structDecl declarations do: [ :each |		structInit values add: each initialValue.		].		^ structInit.! !PLC_VariableCategoryDecl subclass: #PLC_VC_Return	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Return commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Return is xxxxxxxxx.Instance Variables!!PLC_VC_Return methodsFor: 'argument check' stamp: 'EricPernia 11/16/2013 12:29'!canBeRead	"Devuelve true si acepta ser leida. Esto es, si una declaración de variable	en esta categoría acpeta ser asignada como argumento a un parámetro 	formal del tipo VAR_INPUT o VAR_IN_OUT los cuales necesitan leer la 	variable asignada."		^ false.! !!PLC_VC_Return methodsFor: 'formal parameter check' stamp: 'EricPernia 11/16/2013 12:29'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ false.! !!PLC_VC_Return methodsFor: 'formal parameter check' stamp: 'EricPernia 11/16/2013 12:29'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_Return methodsFor: 'category name' stamp: 'EricPernia 11/16/2013 12:29'!varType		^ '_OUTPUT'! !!PLC_VC_Return methodsFor: 'compilation' stamp: 'EricPernia 11/16/2013 12:29'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ 'pxPOU->'.! !!PLC_VC_Return methodsFor: 'declarations' stamp: 'EricPernia 11/16/2013 13:26'!add: aVarDecl	"Añade una declaración de variable"	aVarDecl variableCategory: self.	( self declarations size < 1 )		ifTrue: [ 			^ self declarations add: aVarDecl.				].! !PLC_VariableCategoryDecl subclass: #PLC_VC_Output	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Output commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Output is xxxxxxxxx.Instance Variables!!PLC_VC_Output methodsFor: 'argument check' stamp: 'EricPernia 9/21/2013 19:51'!canBeRead	"Devuelve true si acepta ser leida. Esto es, si una declaración de variable	en esta categoría acpeta ser asignada como argumento a un parámetro 	formal del tipo VAR_INPUT o VAR_IN_OUT los cuales necesitan leer la 	variable asignada."		^ false.! !!PLC_VC_Output methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:27'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ false.! !!PLC_VC_Output methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:27'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_Output methodsFor: 'category name' stamp: 'EricPernia 9/14/2013 01:31'!varType		^ '_OUTPUT'! !!PLC_VC_Output methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 11:17'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ 'pxPOU->'.! !PLC_VariableCategoryDecl subclass: #PLC_VC_funInstVar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_funInstVar commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_funInstVar is xxxxxxxxx.Instance Variables!!PLC_VC_funInstVar methodsFor: 'formal parameter check' stamp: 'EricPernia 11/19/2013 05:02'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ true.! !!PLC_VC_funInstVar methodsFor: 'formal parameter check' stamp: 'EricPernia 11/19/2013 05:02'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_funInstVar methodsFor: 'declarations check' stamp: 'EricPernia 11/19/2013 05:02'!acceptLocatedVarDecl	"Responde true si la ctegoría de variables acepta Declaraciones de Variables Localizadas"	^ true.! !!PLC_VC_funInstVar methodsFor: 'compilation' stamp: 'EricPernia 11/19/2013 05:02'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ 'pxPOU->'.! !PLC_ClassWithIdentifier subclass: #PLC_VariableDecl	instanceVariableNames: 'dataType variableCategory description initialValue operand'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VariableDecl commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VariableDecl is xxxxxxxxx.Instance Variables	dataType:		<Object>	description:		<Object>	initialValue:		<Object>	operand:		<Object>	variableCategory:		<Object>dataType	- xxxxxdescription	- xxxxxinitialValue	- xxxxxoperand	- xxxxxvariableCategory	- xxxxx!!PLC_VariableDecl methodsFor: 'testing' stamp: 'EricPernia 8/12/2012 01:49'!isConstant	"Devuelve false pues es variable"	^ false.! !!PLC_VariableDecl methodsFor: 'testing' stamp: 'EricPernia 9/14/2013 02:04'!isLiteral	"Devuelve true pues es variable"	^ false.! !!PLC_VariableDecl methodsFor: 'testing' stamp: 'EricPernia 8/12/2012 01:49'!isVaraible	"Devuelve true pues es variable"	^ true.! !!PLC_VariableDecl methodsFor: 'initialize-release' stamp: 'EricPernia 9/13/2013 20:10'!initialize	"Inicializa la declaracion de variable"		description := ''.	! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 9/25/2012 21:02'!dataType	^ dataType! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 9/25/2012 21:02'!dataType: anObject	dataType := anObject! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 5/31/2013 18:16'!description	^ description! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 5/31/2013 18:16'!description: anObject	description := anObject! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 6/16/2013 19:48'!initialValue	^ initialValue! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 6/16/2013 19:48'!initialValue: anObject	initialValue := anObject! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 6/21/2013 21:01'!operand		operand ifNil: [ 		operand := PLC_Variable 			newWithDeclaration: self 			andDataValue: self initialValue.			].			^ operand.! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 6/16/2013 19:48'!operand: anObject		operand := anObject! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 9/14/2013 03:08'!variableCategory		^ variableCategory! !!PLC_VariableDecl methodsFor: 'accessing' stamp: 'EricPernia 9/14/2013 03:08'!variableCategory: anObject		variableCategory := anObject! !!PLC_VariableDecl methodsFor: 'wired' stamp: 'EricPernia 9/14/2013 03:08'!acceptWire	"Responde true si la declaración de variable puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Le pregunta a su categoría y a su tipo de datos para responder esto,	No riene sentido en los lenguajes textuales. "	^ self variableCategory acceptWire and: [ self dataType acceptWire ].	! !!PLC_VariableDecl methodsFor: 'accept' stamp: 'EricPernia 9/14/2013 03:14'!acceptDataType: aDataType	"Responde true si su tipo de datos acepta el tipo de datos"	self dataType acceptDataType: aDataType.! !!PLC_VariableDecl methodsFor: 'accept' stamp: 'EricPernia 9/14/2013 03:34'!acceptLiteral: aLiteral	"Responde true si:		Su tipo de datos acepta el valor y		Su tipo de datos acepta el tipo y		Su categoría  acepta literal"		^ ( self dataType acceptValue: aLiteral dataValue ) 		and: [ 			( self dataType acceptDataType: aLiteral dataType )				and: [					self variableCategory acceptLiteral					]			].! !!PLC_VariableDecl methodsFor: 'accept' stamp: 'EricPernia 9/14/2013 03:12'!acceptValue: aValue	"Responde true si su tipo de datos acepta el valor"	self dataType acceptValue: aValue.! !!PLC_VariableDecl methodsFor: 'accept' stamp: 'EricPernia 11/6/2013 15:24'!acceptVariable: aVariableOperand	"Responde true si su tipo de datos acepta el tipo.			El chequeo de si aVariableOaVariableOperand está entre las declaraciones 		de la POU que contiene a esta declaracion se hace luego del parseo."		^ self dataType acceptDataType: aVariableOperand dataType.		! !!PLC_VariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 06:09'!cCompile	"Compila la declaración de variable a C	Devuelve:		tipoDeDatos NombreVariable = ValorInicial		Ej: 		PLC_Bool MyBit = 1;		"	| varDecl |		varDecl := self cCompileWithoutInitialValue.		initialValue		ifNil: [			^ varDecl.			]		ifNotNil: [			^ varDecl , ' = ' , self initialValue cCompile.			].! !!PLC_VariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 06:06'!ilCompile	"Compila la declaración de variable a IL	Devuelve:		NombreVariable : tipoDeDatos  := ValorInicial		Ej: 		MyBit : BOOL  := 1		"	| varDecl |		varDecl := self ilCompileWithoutInitialValue.		initialValue		ifNil: [			^ varDecl.			]		ifNotNil: [			^ varDecl , ' := ' , self initialValue ilCompile.			].! !!PLC_VariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/7/2013 11:42'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ self variableCategory varScopePrefix.  "==> Va este el de abajo es un PARCHE"			"self variableCategory 		ifNil: [ 			^ 'pxPOU->'.			] 		ifNotNil: [  			^ self variableCategory varScopePrefix.			 ]."	"Este parche hace que si una declaración de variable no pertenece a ninguna categoría le sampe por las dudas el pxPOU->"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_VariableDecl class	instanceVariableNames: ''!!PLC_VariableDecl class methodsFor: 'instance creation' stamp: 'EricPernia 11/6/2013 15:33'!newWithDataType: aDataType andInitialValue: anInitialValue andIdentifier: anIdentifier	"Nueva instancia con tipo de datos, valor inicial e identificador seteados"	| var initVal |		var := self new.		var dataType: aDataType.		" P A R C H E   le clavo una categoria para que haga bien lo de pxPOU->"		var variableCategory: PLC_VariableCategoryDecl varDecls.			anInitialValue 		ifNil: [			"Por defecto"			var initialValue: aDataType initialValue.			] 		ifNotNil: [			"Por defecto, si no es ninguno de los sigueintes"			initVal := aDataType initialValue.						"Si es tipo Elemental"			( aDataType isElementaryDataType )				ifTrue: [					initVal := PLC_Literal 						newWithDataType: aDataType 						andDataValue: anInitialValue.					].							"Si es tipo Estructurado"			( aDataType isStructDataType )				ifTrue: [					aDataType initialValue: anInitialValue.					initVal := aDataType initialValue.					].							"Asigno el valor inicial"			var initialValue: initVal.			]. 			anIdentifier		ifNotNil: [			var	identifier: anIdentifier.			]. 					^ var.! !!PLC_VariableDecl class methodsFor: 'instance creation' stamp: 'EricPernia 11/6/2013 15:33'!newWithDataType: aDataType andInitialValue: anInitialValue andIdentifier: anIdentifier andCategory: aCategory	"Nueva instancia con tipo de datos, valor inicial e identificador seteados"	| var |		var := self newWithDataType: aDataType andInitialValue: anInitialValue andIdentifier: anIdentifier.		var variableCategory: aCategory.					^ var.! !PLC_VariableCategoryDecl subclass: #PLC_VC_Extern	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Extern commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Extern is xxxxxxxxx.Instance Variables!!PLC_VC_Extern methodsFor: 'formal parameter check' stamp: 'EricPernia 11/5/2013 20:09'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ true.! !!PLC_VC_Extern methodsFor: 'formal parameter check' stamp: 'EricPernia 11/5/2013 20:09'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_Extern methodsFor: 'category name' stamp: 'EricPernia 11/5/2013 20:09'!varType		^ '_EXTERN'! !!PLC_VC_Extern methodsFor: 'declarations check' stamp: 'EricPernia 11/5/2013 20:10'!acceptLocatedVarDecl	"Responde true si la ctegoría de variables acepta Declaraciones de Variables Localizadas"	^ false.! !!PLC_VC_Extern methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 21:50'!cCompile	"Compila la declaración de variable a C	Devuelve:		extern tipoDeDatos NombreVariable = ValorInicial ;		extern tipoDeDatos NombreVariable = ValorInicial ;		extern tipoDeDatos NombreVariable = ValorInicial ;	...		o un String vacio si no posee ninguna varDec		"	| decls |		decls := ''.				self declarations  do: [ :each |		decls := decls , '		extern ' , each cCompile , ';' .		].		^ decls.! !PLC_DerivedDataType subclass: #PLC_TypeDecl	instanceVariableNames: 'dataType'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_TypeDecl commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_TypeDecl is xxxxxxxxx.Instance Variables	dataType:		<Object>dataType	- xxxxx!!PLC_TypeDecl methodsFor: 'accessing' stamp: 'EricPernia 6/15/2013 14:38'!dataType		^ dataType! !!PLC_TypeDecl methodsFor: 'accessing' stamp: 'EricPernia 6/15/2013 14:38'!dataType: anObject		dataType := anObject! !!PLC_TypeDecl methodsFor: 'Data Types' stamp: 'EricPernia 6/17/2013 00:58'!initialValue	"Devuelve el valor inicial del tipo de dato."	^ self dataType initialValue.! !!PLC_TypeDecl methodsFor: 'Data Types' stamp: 'EricPernia 6/16/2013 17:58'!keyword	"Devuelve el keyword del tipo de dato."	^ self identifier asSymbol.! !!PLC_TypeDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 21:41'!cCompile	"Compila la declaración de tipo de dato estructurado a C	Devuelve:		typedef dataType dataName;	"		^ '		typedef ' , 		dataType cCompile , 		' ' , 		self identifier , ';'.! !!PLC_TypeDecl methodsFor: 'compilation' stamp: 'EricPernia 6/21/2013 19:08'!cCompileDataType	"Compila a C"	^ self identifier.! !!PLC_TypeDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 21:40'!cCompileWithoutInitialValue	"Compila la declaración de tipo de dato estructurado a C	Devuelve:		typedef dataType dataName;	"		^ '		typedef ' , 		dataType cCompileWithoutInitialValue , 		' ' , self identifier , ';'.! !!PLC_TypeDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 21:11'!ilCompile	"Compila la declaración de tipo de dato estructurado a IL	Devuelve:		TYPE		dataName : dataType ;	END_TYPE		"		| type |		type :=  '		TYPE			' , 	self identifier ,	' : '.		( self dataType isStructDataType )		ifTrue: [ 			type := type ,''.			].		type := type ,		self dataType ilCompile , 		' ;' ,		'		END_TYPE'.	^ type. ! !!PLC_TypeDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 21:11'!ilCompileWithoutInitialValue	"Compila la declaración de tipo de dato estructurado a IL	Devuelve:		TYPE		dataName : dataType ;	END_TYPE		"		| type |		type :=  '		TYPE	' , 	self identifier ,	' : '.		( self dataType isStructDataType )		ifTrue: [ 			type := type ,''.			].		type := type ,		self dataType ilCompileWithoutInitialValue , 		' ;' ,		'		END_TYPE'.	^ type. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_TypeDecl class	instanceVariableNames: ''!!PLC_TypeDecl class methodsFor: 'instance creation' stamp: 'EricPernia 11/5/2013 12:43'!newWithDataType: type andIdentifier: ident 	"cNueva isntancia con tipo de datos type e identificador ident."	| typedef |		typedef := self new.		typedef dataType: type.	typedef identifier: ident.		"Añado el nuevo tipo de datos al dicccionario de tipos 	de datos Dervidados o Creados por el usuario"	PLC_DataType addDerivedDataType: typedef.		^ typedef.! !PLC_VariableDecl subclass: #PLC_LocatedSymbolicVariableDecl	instanceVariableNames: 'physicalAddress'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_LocatedSymbolicVariableDecl commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LocatedSymbolicVariableDecl is xxxxxxxxx.Instance Variables	physicalAddress:		<Object>physicalAddress	- xxxxx!!PLC_LocatedSymbolicVariableDecl methodsFor: 'accessing' stamp: 'EricPernia 11/5/2013 05:34'!physicalAddress		^ physicalAddress! !!PLC_LocatedSymbolicVariableDecl methodsFor: 'accessing' stamp: 'EricPernia 11/5/2013 05:34'!physicalAddress: anObject		physicalAddress := anObject! !!PLC_LocatedSymbolicVariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 06:46'!cCompile	"Compila la declaración de variable a C"	"NO SE COMO PONERLE EL VALOR INICIAL A LA MACRO"	self cCompileWithoutInitialValue.! !!PLC_LocatedSymbolicVariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 06:24'!cCompileWithoutInitialValue	"Compila la declaración de variable a C	HACER   COMO  MACRO !!!!!!	Ejemplos de macros en C:		#define PI 3.14	#define AREA_CIRCULO(x) PI * (x) * (x)		Devuelve:		#define NombreVariable %I0.X.x0		"	^ '#define ' , self identifier , ' ' , self physicalAddress cCompile.! !!PLC_LocatedSymbolicVariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 06:12'!ilCompileWithoutInitialValue	"Compila la declaración de variable a IL	Devuelve:		NombreVariable :  tipoDeDatos		Ej: 		MyBit AT %I0.0  :  BOOL		"			^  self identifier , ' AT ' , self physicalAddress ilCompile , ' : ' ,  self dataType ilCompileDataType.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_LocatedSymbolicVariableDecl class	instanceVariableNames: ''!!PLC_LocatedSymbolicVariableDecl class methodsFor: 'instance creation' stamp: 'EricPernia 11/5/2013 06:54'!newWithDataType: aDataType andInitialValue: anInitialValue andIdentifier: anIdentifier andPhysicalAddress: aPhysicalAddress	"Nueva instancia con tipo de datos, valor inicial e identificador seteados"	| var |		var := self newWithDataType: aDataType andInitialValue: anInitialValue andIdentifier: anIdentifier.		aPhysicalAddress		ifNotNil: [			var	physicalAddress: aPhysicalAddress.			]. 		^ var.! !PLC_VariableDecl subclass: #PLC_LocatedVariableDecl	instanceVariableNames: 'physicalAddress'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_LocatedVariableDecl commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LocatedVariableDecl is xxxxxxxxx.Instance Variables	physicalAddress:		<Object>physicalAddress	- xxxxx!!PLC_LocatedVariableDecl methodsFor: 'accessing' stamp: 'EricPernia 11/5/2013 05:34'!physicalAddress		^ physicalAddress! !!PLC_LocatedVariableDecl methodsFor: 'accessing' stamp: 'EricPernia 11/5/2013 05:34'!physicalAddress: anObject		physicalAddress := anObject! !!PLC_LocatedVariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/8/2013 13:36'!cCompileWithoutInitialValue	"Compila la declaración de variable a IL	"		"NO SIRVE PERO SI NO SECUELGA SI ALGUIEN LE DICE C COMPILE"		^ self physicalAddress cCompile.	! !!PLC_LocatedVariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 06:06'!ilCompileWithoutInitialValue	"Compila la declaración de variable a IL	"			^ 'AT ' , self physicalAddress ilCompile , ' : ' ,  self dataType ilCompileDataType.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_LocatedVariableDecl class	instanceVariableNames: ''!!PLC_LocatedVariableDecl class methodsFor: 'instance creation' stamp: 'EricPernia 11/5/2013 06:54'!newWithDataType: aDataType andInitialValue: anInitialValue andPhysicalAddress: aPhysicalAddress	"Nueva instancia con tipo de datos, valor inicial y direcccion seteados"	| var initVal |		var := self new.		var dataType: aDataType.		anInitialValue 		ifNil: [			"Por defecto"			var initialValue: aDataType initialValue.			] 		ifNotNil: [			"Por defecto, si no es ninguno de los sigueintes"			initVal := aDataType initialValue.						"Si es tipo Elemental"			( aDataType isElementaryDataType )				ifTrue: [					initVal := PLC_Literal 						newWithDataType: aDataType 						andDataValue: anInitialValue.					].							"Si es tipo Estructurado"			( aDataType isStructDataType )				ifTrue: [					aDataType initialValue: anInitialValue.					initVal := aDataType initialValue.					].							"Asigno el valor inicial"			var initialValue: initVal.			]. 			aPhysicalAddress		ifNotNil: [			var	physicalAddress: aPhysicalAddress.			]. 			^ var.! !PLC_DerivedDataType subclass: #PLC_StructureDecl	instanceVariableNames: 'declarations'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_StructureDecl commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_StructureDecl is xxxxxxxxx.Instance Variables	declarations:		<Object>declarations	- xxxxx!!PLC_StructureDecl methodsFor: 'initialize-release' stamp: 'EricPernia 6/2/2013 08:10'!initialize	"Inicializaciones		declarations es una coleccion de objetos PLC_SimpleSymbolicVarDecl"	super initialize.	declarations := OrderedCollection new.! !!PLC_StructureDecl methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 08:06'!declarations	^ declarations! !!PLC_StructureDecl methodsFor: 'accessing' stamp: 'EricPernia 6/2/2013 08:07'!declarations: anObject	declarations := anObject! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 6/16/2013 20:47'!cCompile	"Compila la declaración de tipo de dato estructurado a C como declaracion"	^ self cCompileWithoutInitialValue.! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 6/16/2013 19:06'!cCompileDataType	"Compila la declaración de tipo de dato estructurado a C como tipo de datos"		^ self dataType.! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 21:42'!cCompileWithoutInitialValue	"Compila la declaración de tipo de dato estructurado a C como declaracion	Devuelve:		struct nombreEstructura{		varDeclWithoutInitialValue ;		varDeclWithoutInitialValue ;		...		}	"	| structDec |		structDec := '', self dataType , '{'.			self declarations do: [ :each |		structDec := structDec , '			' , each cCompileWithoutInitialValue , ';'.		].			structDec := structDec , '		}'.		^ structDec.! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 6/2/2013 08:07'!identifierAt: aNumber	"Devuelve el identificador de la variable que contiene en el idice aNumber"	^ (self declarations at: aNumber ) identifier.! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 21:10'!ilCompile	"Compila la declaración de tipo de dato estructurado a IL como declaracion	Devuelve:			NombreTipoStructura : 			STRUCT				varDecl ;				varDecl ;				...			END_STRUCT			"	| strucTypeDec |			strucTypeDec := '				STRUCT'.		self declarations do: [ :each |		strucTypeDec := strucTypeDec , '					' , each ilCompile , ';'.		].			strucTypeDec := strucTypeDec , '				END_STRUCT'.		^ strucTypeDec.! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 6/16/2013 19:06'!ilCompileDataType	"Compila la declaración de tipo de dato estructurado a IL como tipo de datos"		^ self dataType.! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 6/20/2013 16:29'!ilCompileWithoutInitialValue	"Compila la declaración de tipo de dato estructurado a IL como declaracion	Devuelve:			NombreTipoStructura : 			STRUCT				varDeclWithoutInitialValue ;				varDeclWithoutInitialValue ;				...			END_STRUCT			"	| strucTypeDec |			strucTypeDec := '		STRUCT'.		self declarations do: [ :each |		strucTypeDec := strucTypeDec , '			' , each ilCompileWithoutInitialValue , ';'.		].			strucTypeDec := strucTypeDec , '		END_STRUCT'.		^ strucTypeDec.! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 6/16/2013 21:14'!initialValue	"Devuelve el identificador de la variable que contiene en el idice aNumber"	^ PLC_StructureInitialization newWithStructDecl: self.! !!PLC_StructureDecl methodsFor: 'compilation' stamp: 'EricPernia 6/17/2013 00:13'!initialValue: aStructInitialization	"Devuelve el identificador de la variable que contiene en el idice aNumber"	( 1 to: self declarations size ) do: [ :index |		( self declarations at: index )			 initialValue: ( aStructInitialization values at: index ).		].! !!PLC_StructureDecl methodsFor: 'collection' stamp: 'EricPernia 6/16/2013 17:19'!add: varDecl	"Añade una declaracion de variable a su colecccion de declaraciones"	self declarations add: varDecl.! !!PLC_StructureDecl methodsFor: 'collection' stamp: 'EricPernia 6/2/2013 08:08'!at: aNumber	"Devuelve una declaracion de variable a su colecccion de declaraciones en la posicion aNumber"	^ self declarations at: aNumber.! !!PLC_StructureDecl methodsFor: 'collection' stamp: 'EricPernia 6/2/2013 08:08'!remove: aSimpleSymbolicVarDecl	"Remueve una declaracion de variable a su colecccion de declaraciones"	self declarations remove: aSimpleSymbolicVarDecl.! !!PLC_StructureDecl methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 19:55'!isDerivedDataType	"Devuelve un booleano respondiendo si es un tipo derivado"	^ true.! !!PLC_StructureDecl methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 19:55'!isElementaryDataType	"Devuelve un booleano respondiendo si es un tipo elemental"	^ false.! !!PLC_StructureDecl methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 19:55'!isGenericDataType	"Devuelve un booleano respondiendo si es un tipo genérico"	^ false.! !!PLC_StructureDecl methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 22:30'!isStructDataType	"Devuelve un booleano respondiendo si es un tipo elemental"	^ true.! !!PLC_StructureDecl methodsFor: 'types' stamp: 'EricPernia 6/16/2013 17:43'!dataType	"Devuelve su tipo de datos"		^ 'struct ' , self identifier.! !!PLC_StructureDecl methodsFor: 'types' stamp: 'EricPernia 6/16/2013 19:29'!keyword	"Devuelve el keyword del tipo de dato."	^ self identifier asSymbol.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_StructureDecl class	instanceVariableNames: ''!!PLC_StructureDecl class methodsFor: 'instance creation' stamp: 'EricPernia 6/16/2013 17:15'!newWithIdentifier: ident 	"Nueva instancia con identificador ident."	| struct |		struct := self new.	struct identifier: ident.		^ struct.! !PLC_VariableCategoryDecl subclass: #PLC_VC_Constant	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Constant commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Constant is xxxxxxxxx.Instance Variables!!PLC_VC_Constant methodsFor: 'argument check' stamp: 'EricPernia 9/21/2013 19:54'!canBeWrite	"Devuelve true si acepta ser escrita. Esto es, si una declaración de variable	en esta categoría acpeta ser asignada como argumento a un parámetro 	formal del tipo VAR_OUTPUT o VAR_IN_OUT los cuales necesitan leer la 	variable asignada."		^ false.! !!PLC_VC_Constant methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:31'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ true.! !!PLC_VC_Constant methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:20'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_Constant methodsFor: 'category name' stamp: 'EricPernia 9/14/2013 01:20'!varType		^ '_CONSTANT'! !PLC_VariableCategoryDecl subclass: #PLC_VC_InOut	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_InOut commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_InOut is xxxxxxxxx.Instance Variables!!PLC_VC_InOut methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:27'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ false.! !!PLC_VC_InOut methodsFor: 'formal parameter check' stamp: 'EricPernia 9/14/2013 01:27'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !!PLC_VC_InOut methodsFor: 'category name' stamp: 'EricPernia 9/14/2013 01:31'!varType		^ '_IN_OUT'! !!PLC_VC_InOut methodsFor: 'compilation' stamp: 'EricPernia 11/6/2013 11:17'!varScopePrefix	"Devuelve el prefijo que tiene que ver con el alcance de la variable.	Las variables que se declaran dentro de la instancia usan pxPOU->	mientras las que se declaran en el cuerpo de la funcion que 	implementa la pou van sin prefijo."	^ 'pxPOU->'.! !PLC_VariableDecl subclass: #PLC_SymbolicVariableDecl	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_SymbolicVariableDecl commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_SymbolicVariableDecl is xxxxxxxxx.Instance Variables!!PLC_SymbolicVariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 06:09'!cCompileWithoutInitialValue	"Compila la declaración de variable a C	Devuelve:		tipoDeDatos NombreVariable		Ej: 		PLC_Bool MyBit		"	^ self dataType cCompileDataType , ' ' , self identifier.! !!PLC_SymbolicVariableDecl methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 05:36'!ilCompileWithoutInitialValue	"Compila la declaración de variable a IL	Devuelve:		NombreVariable :  tipoDeDatos		Ej: 		MyBit  :  BOOL		"	^ self identifier , ' : ' ,  self dataType ilCompileDataType.! !PLC_SymbolicVariableDecl subclass: #PLC_InstanceVariableDecl	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_InstanceVariableDecl commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_InstanceVariableDecl is xxxxxxxxx.Instance Variables!!PLC_InstanceVariableDecl methodsFor: 'compilation' stamp: 'EricPernia 1/22/2014 19:06'!cCompileWithoutInitialValue	"Compila la declaración de variable a C	Devuelve:		static tipoDeDatos NombreVariable		Ej: 		static PLC_Bool MyBit		"	^ 'static ' , super cCompileWithoutInitialValue.! !PLC_VariableCategoryDecl subclass: #PLC_VC_Instance	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Declarations'!!PLC_VC_Instance commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_VC_Instance is xxxxxxxxx.Instance Variables!!PLC_VC_Instance methodsFor: 'formal parameter check' stamp: 'EricPernia 9/21/2013 18:27'!acceptLiteral	"Devuelve true si acepta asignar literales."		^ false.! !!PLC_VC_Instance methodsFor: 'formal parameter check' stamp: 'EricPernia 9/21/2013 18:27'!acceptWire	"Responde true si la categoría de variables puede cablear su variable 	en un lenguaje gráfico si es utilizado como pin de una POU.	Esto se combina con el >>acceptWire de tipo de datos para definir si	un pin permite cable en una declaracion de variable.	No riene sentido en los lenguajes textuales. "	^ false! !