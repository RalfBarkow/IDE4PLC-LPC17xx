"Copyright © 2012-2014 Eric Nicolás Pernia.This file is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>."PPCompositeParser subclass: #PLC_PP_ILGrammar	instanceVariableNames: 'members pair stringToken value elements numberToken object array trueToken falseToken nullToken string char charEscape charOctal charNormal number'	classVariableNames: 'CharacterTable'	poolDictionaries: ''	category: 'IDE4PLC-zPetitParsers'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_PP_ILGrammar class	instanceVariableNames: ''!!PLC_PP_ILGrammar class methodsFor: 'as yet unclassified' stamp: 'EricPernia 1/28/2014 01:53'!initialize	""		CharacterTable := Dictionary new.		CharacterTable		at: $\ put: $\;		at: $/ put: $/;		at: $" put: $";		at: $b put: Character backspace;		at: $f put: Character newPage;		at: $n put: Character lf;		at: $r put: Character cr;		at: $t put: Character tab.! !PPCompositeParser subclass: #PPJsonGrammar	instanceVariableNames: 'members pair stringToken value elements numberToken object array trueToken falseToken nullToken string char charEscape charOctal charNormal number'	classVariableNames: 'CharacterTable'	poolDictionaries: ''	category: 'IDE4PLC-zPetitParsers'!!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 00:52'!array	""		^ $[ asParser token trim ,		elements optional ,		$] 			asParser token trim! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:17'!char	""		^ charEscape / charOctal / charNormal! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:17'!charEscape	""		^ $\ asParser , (PPPredicateObjectParser anyOf: (String withAll: CharacterTable keys)).! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:16'!charNormal	""		^ PPPredicateObjectParser anyExceptAnyOf: '\"'.! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:16'!charOctal	""		^ '\u' asParser , (#hex asParser min: 4 max: 4).! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 00:52'!elements	""		^ value separatedBy: $, asParser token trim! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:32'!falseToken	""		^ 'false' asParser token trim! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 00:48'!members	"the PPParser»separatedBy: convenience method which answers a new parser 	that parses the receiver (a value here) one or more times, separated by its 	parameter parser (a comma here)."		^ pair separatedBy: $, asParser token trim! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:32'!nullToken	""		^ 'null' asParser token trim! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:28'!number	""		^ $- asParser optional ,		($0 asParser / #digit asParser plus) ,		($. asParser , #digit asParser plus) optional ,		(($e asParser / $E asParser) , ($- asParser / $+ asParser) optional , 		#digit asParser plus) optional.! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/9/2013 02:14'!numberToken	""		^ number token trim! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 00:46'!object	""		^ ${ asParser token trim , members optional , $} asParser token trim.! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 00:47'!pair	""		^ stringToken , $: asParser token trim , value! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:33'!start	""		^ value end! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:17'!string	""		^ $" asParser , char star , $" asParser.! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:16'!stringToken	""		^ string token trim! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:32'!trueToken	""		^ 'true' asParser token trim! !!PPJsonGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:10'!value	""		^ stringToken / numberToken / object / array / trueToken / falseToken / nullToken.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PPJsonGrammar class	instanceVariableNames: ''!!PPJsonGrammar class methodsFor: 'as yet unclassified' stamp: 'EricPernia 5/13/2013 01:24'!initialize	""		CharacterTable := Dictionary new.		CharacterTable		at: $\ put: $\;		at: $/ put: $/;		at: $" put: $";		at: $b put: Character backspace;		at: $f put: Character newPage;		at: $n put: Character lf;		at: $r put: Character cr;		at: $t put: Character tab.! !PPCompositeParser subclass: #PLC_PP_OperandGrammar	instanceVariableNames: 'identifier number structItem dot operand'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-zPetitParsers'!!PLC_PP_OperandGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/9/2013 05:00'!dot	"Parseo de Numeros en general"		^ $. asParser flatten.! !!PLC_PP_OperandGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/9/2013 05:00'!identifier	"Parseo de identificadores"		^(	 ( #letter asParser / 		( $_ asParser , 			(#letter asParser / #digit asParser) 		)	) , 	(		( $_ asParser optional , 			(#letter asParser / #digit asParser)  		) star	)	) flatten.! !!PLC_PP_OperandGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/9/2013 04:25'!number	"Parseo de Numeros en general"		^ ( $- asParser optional ,		($0 asParser / #digit asParser plus) ,		( dot , #digit asParser plus) optional ,		(($e asParser / $E asParser) , ($- asParser / $+ asParser) optional , 		#digit asParser plus) optional	) flatten trim ==> [ :str | str asNumber ].! !!PLC_PP_OperandGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/9/2013 04:43'!operand	"Parseo de Operandos"		^ structItem / identifier / number.! !!PLC_PP_OperandGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/9/2013 04:13'!start	""		^ operand end! !!PLC_PP_OperandGrammar methodsFor: 'as yet unclassified' stamp: 'EricPernia 6/9/2013 05:33'!structItem	"Parseo de items de estructura"		^ identifier separatedBy: dot.! !PLC_PP_ILGrammar initialize!PPJsonGrammar initialize!