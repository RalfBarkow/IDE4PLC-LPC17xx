"Copyright © 2012-2014 Eric Nicolás Pernia.This file is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>."PLC_ClassWithIdentifier subclass: #PLC_DataType	instanceVariableNames: ''	classVariableNames: 'DerivedDataTypes ElementaryDataTypes GenericDataTypes TypesCreated'	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_DataType commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_DataType is xxxxxxxxx.Instance Variables!!PLC_DataType methodsFor: 'compilation' stamp: 'EricPernia 6/16/2013 21:32'!cCompile	"Compila a C"	^ self cCompileDataType.! !!PLC_DataType methodsFor: 'compilation' stamp: 'EricPernia 6/16/2013 21:32'!cCompileDataType	"Compila a C"	^ 'PLC_' , self keyword asString.! !!PLC_DataType methodsFor: 'compilation' stamp: 'EricPernia 6/16/2013 21:32'!ilCompile	"Compila a IL"	^ self ilCompileDataType.! !!PLC_DataType methodsFor: 'compilation' stamp: 'EricPernia 6/16/2013 19:03'!ilCompileDataType	"Compila a IL"	^ self keyword asString.! !!PLC_DataType methodsFor: 'wired' stamp: 'EricPernia 1/23/2014 00:35'!acceptWire	"Responde true si el tipo de datos puede cablearse en 	un lenguaje gráfico si es utilizado como pin de una POU.	No tiene sentido en los lenguajes textuales."	^ false.! !!PLC_DataType methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:38'!accept: aSymbol	"Devuelve un booleano que indica si acepta el tipo de datos que le llega como parametro aSymbol"	^ self acceptedDataTypes includes: aSymbol.! !!PLC_DataType methodsFor: 'types' stamp: 'EricPernia 1/25/2014 22:41'!acceptType: aPLC_DataType	"Devuelve un booleano que indica si acepta el tipo de datos que le llega como parametrol"	^ self = aPLC_DataType.		"^ self acceptedDataTypes includes: aPLC_DataType keyword."! !!PLC_DataType methodsFor: 'types' stamp: 'EricPernia 8/11/2012 19:39'!dataType 	"Devuelve el nombre del tipo de dato."	^ self keyword asString , ': ' , self description.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_DataType class	instanceVariableNames: ''!!PLC_DataType class methodsFor: 'instance creation' stamp: 'EricPernia 5/31/2013 14:11'!allDataTypes	"Retorna el diccionario de tipos por defecto junto con el de los tipos definidos por el usuario"		DerivedDataTypes.		^ self. "HACERRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"! !!PLC_DataType class methodsFor: 'instance creation' stamp: 'EricPernia 5/31/2013 14:02'!clearTypes	"Borra los tipos de datos"	ElementaryDataTypes := Dictionary new.	GenericDataTypes := Dictionary new.		DerivedDataTypes := Dictionary new.		TypesCreated := false.		! !!PLC_DataType class methodsFor: 'instance creation' stamp: 'EricPernia 4/30/2012 23:03'!createDataTypes	"Crea los tipos de datos"			ElementaryDataTypes := Dictionary new.	GenericDataTypes := Dictionary new.		self createElementaryDataTypes. 	self createGenericDataTypes. 		TypesCreated := true.! !!PLC_DataType class methodsFor: 'instance creation' stamp: 'EricPernia 6/14/2013 02:30'!createElementaryDataTypes	"Crea los tipos de datos elementales"	| typeTemp |		"Bit strings"		typeTemp := PLC_Void new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_Boolean new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_Byte new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_Word new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_DoubleWord new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_LongWord new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		"Signed Integers"		typeTemp := PLC_ShortInteger new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_Integer new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_DoubleInteger new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_LongInteger new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		"Unsigned Integers"		typeTemp := PLC_UnsignedShortInteger new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_UnsignedInteger new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_UnsignedDoubleInteger new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp :=  PLC_UnsignedLongInteger new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		"Reals"		typeTemp := PLC_Real new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_LongReal new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		"Character Strings"		typeTemp := PLC_SingleByteString new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp :=  PLC_DoubleByteString new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		"Time and date"		typeTemp := PLC_Duration new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp :=  PLC_Date new.	ElementaryDataTypes at: typeTemp keyword put: typeTemp.		typeTemp := PLC_TimeOfDay new.	ElementaryDataTypes at: (typeTemp keywords at: 1) put: typeTemp.	ElementaryDataTypes at: (typeTemp keywords at: 2) put: typeTemp.		typeTemp :=  PLC_DateAndTimeOfDay new.	ElementaryDataTypes at: (typeTemp keywords at: 1) put: typeTemp.	ElementaryDataTypes at: (typeTemp keywords at: 2) put: typeTemp.! !!PLC_DataType class methodsFor: 'instance creation' stamp: 'EricPernia 4/30/2012 23:00'!createGenericDataTypes	"Crea los tipos de datos Genericos. 	Estan tabulados jerarquicamente, no tiene nada que ver con los mensajes entre los objetos."	| typeTemp |		typeTemp := PLC_AnyDataType new.	GenericDataTypes at: typeTemp keyword put: typeTemp.			typeTemp := PLC_AnyDerived new.		GenericDataTypes at: typeTemp keyword put: typeTemp.			typeTemp := PLC_AnyElementary new.		GenericDataTypes at: typeTemp keyword put: typeTemp.				typeTemp := PLC_AnyMagnitude new.			GenericDataTypes at: typeTemp keyword put: typeTemp.					typeTemp := PLC_AnyNumeric new.				GenericDataTypes at: typeTemp keyword put: typeTemp.									typeTemp := PLC_AnyReal new.					GenericDataTypes at: typeTemp keyword put: typeTemp.					typeTemp := PLC_AnyInteger new.					GenericDataTypes at: typeTemp keyword put: typeTemp.									typeTemp := PLC_AnyBit new.			GenericDataTypes at: typeTemp keyword put: typeTemp.						typeTemp := PLC_AnyString new.			GenericDataTypes at: typeTemp keyword put: typeTemp.						typeTemp := PLC_AnyDate new.			GenericDataTypes at: typeTemp keyword put: typeTemp.	! !!PLC_DataType class methodsFor: 'DerivedDataTypes' stamp: 'EricPernia 6/16/2013 18:01'!addDerivedDataType: aUserDefinedDataType	"Añade un tipo de dato definido por el usuario, por ahora solo tengo tipos estructurados.	Tambien lo usa el compilador de Ladder."	| symbolIdentifier |		symbolIdentifier := aUserDefinedDataType keyword.		DerivedDataTypes at: symbolIdentifier put: aUserDefinedDataType.! !!PLC_DataType class methodsFor: 'DerivedDataTypes' stamp: 'EricPernia 5/31/2013 16:10'!derivedDataTypes	"Retorna el diccionario de tipos"		^ DerivedDataTypes.! !!PLC_DataType class methodsFor: 'DerivedDataTypes' stamp: 'EricPernia 5/31/2013 16:09'!removeAllDerivedDataTypes	"Borra todos los tipos derivados."	DerivedDataTypes := Dictionary new.! !!PLC_DataType class methodsFor: 'InformationForLiterals' stamp: 'EricPernia 5/31/2013 21:38'!AllDataTypeNames	"Devuelve una coleccion de todos los nombres de los tipos de datos."	^ self AnyDataType acceptedDataTypes.! !!PLC_DataType class methodsFor: 'InformationForLiterals' stamp: 'EricPernia 5/6/2012 22:37'!BitStringDataTypesNames	"Devuelve una coleccion de los Nombres de tipo de dato Bit String"	^ self AnyBit acceptedDataTypes.! !!PLC_DataType class methodsFor: 'InformationForLiterals' stamp: 'EricPernia 5/6/2012 17:10'!IntegerDataTypesNames	"Devuelve una coleccion de los Nombres de tipo de dato enteros"	^ self AnyInteger acceptedDataTypes.! !!PLC_DataType class methodsFor: 'InformationForLiterals' stamp: 'EricPernia 5/6/2012 17:10'!RealDataTypesNames	"Devuelve una coleccion de los Nombres de tipo de dato reales"	^ self AnyReal acceptedDataTypes.! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:43'!Bool	"Retorna la unica instancia del tipo Bool"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #BOOL.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:43'!Byte	"Retorna la unica instancia del tipo Byte"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #BYTE.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:43'!DInt	"Retorna la unica instancia del tipo DInt"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #DINT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"	! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:43'!DT	"Retorna la unica instancia del tipo DateAndTime"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #DT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:43'!DWord	"Retorna la unica instancia del tipo DWord"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #DWORD.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:43'!Date	"Retorna la unica instancia del tipo Date"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #DATE.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:43'!DateAndTime	"Retorna la unica instancia del tipo DateAndTime"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #DATE_AND_TIME.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!Int	"Retorna la unica instancia del tipo Int"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #INT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"	! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!LInt	"Retorna la unica instancia del tipo LInt"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #LINT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"	! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!LReal	"Retorna la unica instancia del tipo LReal"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #LREAL.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!LWord	"Retorna la unica instancia del tipo LWord"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #LWORD.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!Real	"Retorna la unica instancia del tipo Real"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #REAL.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!SInt	"Retorna la unica instancia del tipo SInt"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #SINT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!String	"Retorna la unica instancia del tipo String"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #STRING.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!TOD	"Retorna la unica instancia del tipo TimeOfDay"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #TOD.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!Time	"Retorna la unica instancia del tipo Time"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #TIME.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:42'!TimeOfDay	"Retorna la unica instancia del tipo TimeOfDay"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #TIME_OF_DAY.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:41'!UDInt	"Retorna la unica instancia del tipo UDInt"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #UDINT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:41'!UInt	"Retorna la unica instancia del tipo UInt"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #UINT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:41'!ULInt	"Retorna la unica instancia del tipo ULInt"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #ULINT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 5/1/2012 00:41'!USInt	"Retorna la unica instancia del tipo USInt"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #USINT.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 6/14/2013 02:29'!Void	"Retorna la unica instancia del tipo Void"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #VOID.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 4/30/2012 23:10'!WString	"Retorna la unica instancia del tipo WString"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #WSTRING.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 4/30/2012 23:10'!Word	"Retorna la unica instancia del tipo Word"	TypesCreated ifFalse: [self createDataTypes].		^ ElementaryDataTypes at: #WORD.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'ElementaryDataTypes' stamp: 'EricPernia 4/30/2012 23:01'!elementaryDataTypes	"Retorna el diccionario de tipos"		^ ElementaryDataTypes.		"Bool Byte Word DWord LWord SInt Int DInt LInt USInt UInt UDInt ULInt Real LReal String WString Time Date TimeOfDay TOD DateAndTime DT"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:47'!AnyBit	"Retorna la unica instancia del tipo genérico PLC_AnyBit"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_BIT.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:47'!AnyDataType	"Retorna la unica instancia del tipo genérico AnyDataType"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:45'!AnyDate	"Retorna la unica instancia del tipo genérico AnyDate"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_DATE.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:44'!AnyDerived	"Retorna la unica instancia del tipo genérico AnyDerived"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_DERIVED.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:44'!AnyElementary	"Retorna la unica instancia del tipo genérico AnyElementary"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_ELEMENTARY.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:44'!AnyInteger	"Retorna la unica instancia del tipo genérico AnyInteger"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_INT.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:44'!AnyMagnitude	"Retorna la unica instancia del tipo genérico AnyMagnitude"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_MAGNITUDE.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:44'!AnyNumeric	"Retorna la unica instancia del tipo genérico AnyNumeric"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_NUM.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:44'!AnyReal	"Retorna la unica instancia del tipo genérico AnyReal"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_REAL.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 5/1/2012 00:43'!AnyString	"Retorna la unica instancia del tipo genérico AnyString"	TypesCreated ifFalse: [self createDataTypes].		^ GenericDataTypes at: #ANY_STRING.		"Jerarquia de tipos genéricos:AnyDataType	AnyDerived	AnyElementary		AnyMagnitude			AnyNumeric				AnyReal				AnyInteger		PLC_AnyBit		AnyString		AnyDate"! !!PLC_DataType class methodsFor: 'GenericDataTypes' stamp: 'EricPernia 10/31/2012 18:14'!genericDataTypes	"Retorna el diccionario de tipos"		^ GenericDataTypes.! !!PLC_DataType class methodsFor: 'GUI information' stamp: 'EricPernia 5/31/2013 21:40'!AllDataTypeNameStrings	"Devuelve una coleccion de todos los nombres de los tipos de datos."	| col | 		col := self AllDataTypeNames.		^ col collect: [ :each|		each asString.		].! !!PLC_DataType class methodsFor: 'class initialization' stamp: 'EricPernia 4/25/2012 16:06'!initialize	super initialize.	TypesCreated := false! !PLC_DataType subclass: #PLC_GenericDataType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_GenericDataType commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_GenericDataType is xxxxxxxxx.Instance Variables!!PLC_GenericDataType methodsFor: 'testing' stamp: 'EricPernia 4/25/2012 13:53'!isDerivedDataType	"Devuelve un booleano respondiendo si es un tipo derivado"	^ false.! !!PLC_GenericDataType methodsFor: 'testing' stamp: 'EricPernia 4/25/2012 13:53'!isElementaryDataType	"Devuelve un booleano respondiendo si es un tipo elemental"	^ false.! !!PLC_GenericDataType methodsFor: 'testing' stamp: 'EricPernia 4/25/2012 13:53'!isGenericDataType	"Devuelve un booleano respondiendo si es un tipo genérico"	^ true.! !!PLC_GenericDataType methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 22:28'!isStructDataType	"Devuelve un booleano respondiendo si es un tipo elemental"	^ false.! !PLC_GenericDataType subclass: #PLC_AnyInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyInteger commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyInteger is xxxxxxxxx.Instance Variables!!PLC_AnyInteger methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType SInt acceptedDataTypes , 				PLC_DataType Int acceptedDataTypes ,			PLC_DataType DInt acceptedDataTypes ,		PLC_DataType LInt acceptedDataTypes ,		PLC_DataType USInt acceptedDataTypes ,				PLC_DataType UInt acceptedDataTypes ,		PLC_DataType UDInt acceptedDataTypes ,		PLC_DataType ULInt acceptedDataTypes.! !!PLC_AnyInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:45'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_INT.! !PLC_GenericDataType subclass: #PLC_AnyMagnitude	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyMagnitude commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyMagnitude is xxxxxxxxx.Instance Variables!!PLC_AnyMagnitude methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType AnyNumeric acceptedDataTypes ,		PLC_DataType Time acceptedDataTypes.		! !!PLC_AnyMagnitude methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:36'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_MAGNITUDE.! !PLC_GenericDataType subclass: #PLC_AnyNumeric	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyNumeric commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyNumeric is xxxxxxxxx.Instance Variables!!PLC_AnyNumeric methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType AnyInteger acceptedDataTypes ,		PLC_DataType AnyReal acceptedDataTypes.! !!PLC_AnyNumeric methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:36'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_NUM.! !PLC_GenericDataType subclass: #PLC_AnyString	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyString commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyString is xxxxxxxxx.Instance Variables!!PLC_AnyString methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType String acceptedDataTypes ,		PLC_DataType WString acceptedDataTypes.! !!PLC_AnyString methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:34'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_STRING.! !PLC_GenericDataType subclass: #PLC_AnyDerived	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyDerived commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyDerived is xxxxxxxxx.Instance Variables!!PLC_AnyDerived methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados.	En este caso devuelve todos los tipos de datos creados por el	uduario."	^ PLC_DataType derivedDataTypes keys.! !!PLC_AnyDerived methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:33'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_DERIVED.! !PLC_GenericDataType subclass: #PLC_AnyBit	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyBit commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyBit is xxxxxxxxx.Instance Variables!!PLC_AnyBit methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType Bool acceptedDataTypes ,		PLC_DataType Byte acceptedDataTypes ,		PLC_DataType Word acceptedDataTypes ,		PLC_DataType DWord acceptedDataTypes , 		PLC_DataType LWord acceptedDataTypes.! !!PLC_AnyBit methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:34'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_BIT.! !PLC_GenericDataType subclass: #PLC_AnyReal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyReal commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyReal is xxxxxxxxx.Instance Variables!!PLC_AnyReal methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType Real acceptedDataTypes ,			PLC_DataType LReal acceptedDataTypes. ! !!PLC_AnyReal methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:39'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_REAL.! !PLC_DataType subclass: #PLC_DerivedDataType	instanceVariableNames: 'description'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_DerivedDataType commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_DerivedDataType is xxxxxxxxx.Instance Variables	description:		<Object>description	- xxxxx!!PLC_DerivedDataType methodsFor: 'types' stamp: 'EricPernia 6/16/2013 22:15'!acceptValue: aValue	"Devuelve un booleano que indica si el tipo de datos acepta la constante que se le queire asignar"	^ aValue structDecl = self.! !!PLC_DerivedDataType methodsFor: 'types' stamp: 'EricPernia 4/25/2012 21:42'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^ {self keyword.}.! !!PLC_DerivedDataType methodsFor: 'types' stamp: 'EricPernia 5/31/2013 18:15'!keyword	"Devuelve el keyword del tipo de dato."	^ #TYPE! !!PLC_DerivedDataType methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 19:55'!isDerivedDataType	"Devuelve un booleano respondiendo si es un tipo derivado"	^ true.! !!PLC_DerivedDataType methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 19:55'!isElementaryDataType	"Devuelve un booleano respondiendo si es un tipo elemental"	^ false.! !!PLC_DerivedDataType methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 19:55'!isGenericDataType	"Devuelve un booleano respondiendo si es un tipo genérico"	^ false.! !!PLC_DerivedDataType methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 22:28'!isStructDataType	"Devuelve un booleano respondiendo si es un tipo elemental"	^ false.! !!PLC_DerivedDataType methodsFor: 'initialize-release' stamp: 'EricPernia 5/31/2013 18:22'!initialize	"Inicializa la declaracion de variable"		description := ''.	! !!PLC_DerivedDataType methodsFor: 'accessing' stamp: 'EricPernia 10/31/2012 18:10'!description	^ description! !!PLC_DerivedDataType methodsFor: 'accessing' stamp: 'EricPernia 10/31/2012 18:10'!description: anObject	description := anObject! !PLC_DataType subclass: #PLC_ElementaryDataType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_ElementaryDataType commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_ElementaryDataType is xxxxxxxxx.Instance Variables!!PLC_ElementaryDataType methodsFor: 'types' stamp: 'EricPernia 1/26/2014 05:09'!acceptValue: aValue	"Devuelve un booleano que indica si el tipo de datos acepta la constante que se le queire asignar"	aValue isInteger 		ifTrue: [ ^ aValue between: self minValue and: self maxValue. ] 		ifFalse: [ ^ false ].! !!PLC_ElementaryDataType methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:24'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^ {self keyword.}.! !!PLC_ElementaryDataType methodsFor: 'types' stamp: 'EricPernia 6/16/2013 20:55'!initialValue	"Devuelve el valor inicial del tipo de dato."		^ PLC_Literal newWithDataType: self andDataValue: 0.! !!PLC_ElementaryDataType methodsFor: 'testing' stamp: 'EricPernia 4/25/2012 14:22'!isDerivedDataType	"Devuelve un booleano respondiendo si es un tipo derivado"	^ false.! !!PLC_ElementaryDataType methodsFor: 'testing' stamp: 'EricPernia 4/25/2012 14:22'!isElementaryDataType	"Devuelve un booleano respondiendo si es un tipo elemental"	^ true.! !!PLC_ElementaryDataType methodsFor: 'testing' stamp: 'EricPernia 4/25/2012 14:22'!isGenericDataType	"Devuelve un booleano respondiendo si es un tipo genérico"	^ false.! !!PLC_ElementaryDataType methodsFor: 'testing' stamp: 'EricPernia 6/16/2013 22:28'!isStructDataType	"Devuelve un booleano respondiendo si es un tipo elemental"	^ false.! !!PLC_ElementaryDataType methodsFor: 'testing' stamp: 'EricPernia 8/12/2012 00:08'!range	"Devuelve el rango de representacion del tipo de dato."	^ self minValue asString , ' a ' , self maxValue asString.! !PLC_ElementaryDataType subclass: #PLC_Void	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Void commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Void is xxxxxxxxx.Instance Variables!!PLC_Void methodsFor: 'types' stamp: 'EricPernia 6/14/2013 02:27'!acceptValue: aValue	"Devuelve un booleano que indica si el tipo de datos acepta la constante que se le queire asignar"	^ false! !!PLC_Void methodsFor: 'types' stamp: 'EricPernia 6/14/2013 02:22'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 0.! !!PLC_Void methodsFor: 'types' stamp: 'EricPernia 6/14/2013 02:22'!description	"Devuelve la descripción del tipo de dato."	^ 'Vacío.'.! !!PLC_Void methodsFor: 'types' stamp: 'EricPernia 6/16/2013 21:36'!initialValue	"Devuelve el valor inicial del tipo de dato."		^ PLC_Literal newWithDataType: self andDataValue: nil.! !!PLC_Void methodsFor: 'types' stamp: 'EricPernia 6/14/2013 02:22'!keyword	"Devuelve el keyword del tipo de dato."	^ #VOID.! !!PLC_Void methodsFor: 'types' stamp: 'EricPernia 6/14/2013 02:28'!maxValue	"Valor mínimo permitido del tipo de dato."	^ 'NULL'! !!PLC_Void methodsFor: 'types' stamp: 'EricPernia 6/14/2013 02:28'!minValue	"Valor mínimo permitido del tipo de dato."	^ 'NULL'! !PLC_ElementaryDataType subclass: #PLC_UnsignedIntegers	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_UnsignedIntegers commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_UnsignedIntegers is xxxxxxxxx.Instance Variables!!PLC_UnsignedIntegers methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:31'!maxValue	"Valor máximo permitido del tipo de dato."	| N |		N := self bitSize.		^ (2 raisedTo: N) - 1.! !!PLC_UnsignedIntegers methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:44'!minValue	"Valor mínimo permitido del tipo de dato."	^ 0.! !PLC_UnsignedIntegers subclass: #PLC_UnsignedShortInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_UnsignedShortInteger commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_UnsignedShortInteger is xxxxxxxxx.Instance Variables!!PLC_UnsignedShortInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:32'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 8.! !!PLC_UnsignedShortInteger methodsFor: 'types' stamp: 'EricPernia 8/11/2012 20:19'!description	"Devuelve la descripción del tipo de dato."	^ 'Entero corto sin signo.'.! !!PLC_UnsignedShortInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:18'!keyword	"Devuelve el keyword del tipo de dato."	^ #USINT.! !PLC_UnsignedIntegers subclass: #PLC_UnsignedLongInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_UnsignedLongInteger commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_UnsignedLongInteger is xxxxxxxxx.Instance Variables!!PLC_UnsignedLongInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:32'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 64.! !!PLC_UnsignedLongInteger methodsFor: 'types' stamp: 'EricPernia 8/11/2012 20:19'!description	"Devuelve la descripción del tipo de dato."	^ 'Entero largo sin signo.'.! !!PLC_UnsignedLongInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:19'!keyword	"Devuelve el keyword del tipo de dato."	^ #ULINT.! !PLC_UnsignedIntegers subclass: #PLC_UnsignedDoubleInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_UnsignedDoubleInteger commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_UnsignedDoubleInteger is xxxxxxxxx.Instance Variables!!PLC_UnsignedDoubleInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:31'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 32.! !!PLC_UnsignedDoubleInteger methodsFor: 'types' stamp: 'EricPernia 8/11/2012 20:18'!description	"Devuelve la descripción del tipo de dato."	^ 'Entero doble sin signo.'.! !!PLC_UnsignedDoubleInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:17'!keyword	"Devuelve el keyword del tipo de dato."	^ #UDINT.! !PLC_ElementaryDataType subclass: #PLC_SignedIntegers	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_SignedIntegers commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_SignedIntegers is xxxxxxxxx.Instance Variables!!PLC_SignedIntegers methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:31'!maxValue	"Valor máximo permitido del tipo de dato."	| N |		N := self bitSize.		^ (2 raisedTo: (N - 1)) - 1! !!PLC_SignedIntegers methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:31'!minValue	"Valor mínimo permitido del tipo de dato."	| N |		N := self bitSize.		^ (2 raisedTo: (N - 1)) negated.! !PLC_SignedIntegers subclass: #PLC_Integer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Integer commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Integer is xxxxxxxxx.Instance Variables!!PLC_Integer methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:27'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 16.! !!PLC_Integer methodsFor: 'types' stamp: 'EricPernia 8/11/2012 23:48'!description	"Devuelve la descripción del tipo de dato."	^ 'Entero.'.! !!PLC_Integer methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:14'!keyword	"Devuelve el keyword del tipo de dato."	^ #INT.! !PLC_SignedIntegers subclass: #PLC_LongInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_LongInteger commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LongInteger is xxxxxxxxx.Instance Variables!!PLC_LongInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:27'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 64.! !!PLC_LongInteger methodsFor: 'types' stamp: 'EricPernia 8/11/2012 23:48'!description	"Devuelve la descripción del tipo de dato."	^ 'Entero largo.'.! !!PLC_LongInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:16'!keyword	"Devuelve el keyword del tipo de dato."	^ #LINT.! !PLC_UnsignedIntegers subclass: #PLC_UnsignedInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_UnsignedInteger commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_UnsignedInteger is xxxxxxxxx.Instance Variables!!PLC_UnsignedInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:31'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 16.! !!PLC_UnsignedInteger methodsFor: 'types' stamp: 'EricPernia 8/11/2012 20:18'!description	"Devuelve la descripción del tipo de dato."	^ 'Entero sin signo.'.! !!PLC_UnsignedInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:49'!keyword	"Devuelve el keyword del tipo de dato."	^ #UINT.! !PLC_SignedIntegers subclass: #PLC_DoubleInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_DoubleInteger commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_DoubleInteger is xxxxxxxxx.Instance Variables!!PLC_DoubleInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:27'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 32.! !!PLC_DoubleInteger methodsFor: 'types' stamp: 'EricPernia 8/11/2012 23:48'!description	"Devuelve la descripción del tipo de dato."	^ 'Entero doble.'.! !!PLC_DoubleInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:15'!keyword	"Devuelve el keyword del tipo de dato."	^ #DINT.! !PLC_DoubleInteger subclass: #PLC_Duration	instanceVariableNames: 'days hours minutes seconds milliseconds'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Duration commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Duration is xxxxxxxxx.Instance Variables	days:		<Object>	hours:		<Object>	milliseconds:		<Object>	minutes:		<Object>	seconds:		<Object>days	- xxxxxhours	- xxxxxmilliseconds	- xxxxxminutes	- xxxxxseconds	- xxxxx!!PLC_Duration methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:20'!keyword	"Devuelve el keyword del tipo de dato."	^ #TIME.! !PLC_SignedIntegers subclass: #PLC_ShortInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_ShortInteger commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_ShortInteger is xxxxxxxxx.Instance Variables!!PLC_ShortInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:28'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 8.! !!PLC_ShortInteger methodsFor: 'types' stamp: 'EricPernia 8/11/2012 23:49'!description	"Devuelve la descripción del tipo de dato."	^ 'Entero corto.'.! !!PLC_ShortInteger methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:15'!keyword	"Devuelve el keyword del tipo de dato."	^ #SINT.! !PLC_ElementaryDataType subclass: #PLC_Strings	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Strings commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Strings is xxxxxxxxx.Instance Variables!PLC_Strings subclass: #PLC_DoubleByteString	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_DoubleByteString commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_DoubleByteString is xxxxxxxxx.Instance Variables!!PLC_DoubleByteString methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:10'!keyword	"Devuelve el keyword del tipo de dato."	^ #WSTRING.! !PLC_Strings subclass: #PLC_SingleByteString	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_SingleByteString commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_SingleByteString is xxxxxxxxx.Instance Variables!!PLC_SingleByteString methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:10'!keyword	"Devuelve el keyword del tipo de dato."	^ #STRING.! !PLC_ElementaryDataType subclass: #PLC_BitStrings	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_BitStrings commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_BitStrings is xxxxxxxxx.Instance Variables!!PLC_BitStrings methodsFor: 'types' stamp: 'EricPernia 8/11/2012 19:47'!description	"Devuelve la descripción del tipo de dato."	^ 'Cadena de bits de longitud ' , self bitSize asString , '.'.! !!PLC_BitStrings methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:31'!maxValue	"Valor máximo permitido del tipo de dato."	| N |		N := self bitSize.		^ (2 raisedTo: N) - 1.! !!PLC_BitStrings methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:30'!minValue	"Valor mínimo permitido del tipo de dato."		^ 0.! !PLC_BitStrings subclass: #PLC_DoubleWord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_DoubleWord commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_DoubleWord is xxxxxxxxx.Instance Variables!!PLC_DoubleWord methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:25'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 32.! !!PLC_DoubleWord methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:56'!keyword	"Devuelve el keyword del tipo de dato."	^ #DWORD.! !PLC_BitStrings subclass: #PLC_Byte	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Byte commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Byte is xxxxxxxxx.Instance Variables!!PLC_Byte methodsFor: 'types' stamp: 'EricPernia 3/3/2012 15:53'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 8.! !!PLC_Byte methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:52'!keyword	"Devuelve el keyword del tipo de dato."	^ #BYTE.! !PLC_BitStrings subclass: #PLC_Word	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Word commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Word is xxxxxxxxx.Instance Variables!!PLC_Word methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:25'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 16.! !!PLC_Word methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:56'!keyword	"Devuelve el keyword del tipo de dato."	^ #WORD.! !PLC_BitStrings subclass: #PLC_Boolean	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Boolean commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Boolean is xxxxxxxxx.Instance Variables!!PLC_Boolean methodsFor: 'types' stamp: 'EricPernia 3/2/2012 19:26'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 1.! !!PLC_Boolean methodsFor: 'types' stamp: 'EricPernia 8/11/2012 20:02'!description	"Devuelve la descripción del tipo de dato."	^ 'Booleano, ' ,  self range asString.! !!PLC_Boolean methodsFor: 'types' stamp: 'EricPernia 6/16/2013 21:35'!initialValue	"Devuelve el valor inicial del tipo de dato."		^ PLC_Literal newWithDataType: self andDataValue: false.! !!PLC_Boolean methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:51'!keyword	"Devuelve el keyword del tipo de dato."	^ #BOOL.! !!PLC_Boolean methodsFor: 'types' stamp: 'EricPernia 4/25/2012 13:36'!range	"Devuelve el rango de representacion del tipo de dato."	^ '0 o 1, o bien, TRUE o FALSE'.! !!PLC_Boolean methodsFor: 'testing' stamp: 'EricPernia 9/2/2012 19:30'!acceptValue: aValue	"Devuelve un booleano que indica si el tipo de datos acepta la constante que se le queire asignar"	^ aValue = true or: [ aValue = false ].! !!PLC_Boolean methodsFor: 'wired' stamp: 'EricPernia 9/13/2013 17:08'!acceptWire	"Responde true si el tipo de datos puede cablearse en un lenguaje gráfico si es utilizado como pin de una POU.	No riene sentido en los lenguajes textuales."	^ true.! !PLC_BitStrings subclass: #PLC_LongWord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_LongWord commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LongWord is xxxxxxxxx.Instance Variables!!PLC_LongWord methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:25'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 64.! !!PLC_LongWord methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:57'!keyword	"Devuelve el keyword del tipo de dato."	^ #LWORD.! !PLC_ElementaryDataType subclass: #PLC_Reals	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Reals commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Reals is xxxxxxxxx.Instance Variables!!PLC_Reals methodsFor: 'types' stamp: 'EricPernia 1/26/2014 05:14'!acceptValue: aValue	"Devuelve un booleano que indica si el tipo de datos acepta la constante que se le queire asignar"	aValue isFloat 		ifTrue: [ ^ aValue abs between: 0.0 and: self maxPositiveValue.] 		ifFalse: [ ^ false ].		"Estrictamente seria:^ aValue abs between: self minPositiveValue and: self maxPositiveValue."! !!PLC_Reals methodsFor: 'types' stamp: 'EricPernia 6/16/2013 20:56'!initialValue	"Devuelve el valor inicial del tipo de dato."		^ PLC_Literal newWithDataType: self andDataValue: 0.0.! !!PLC_Reals methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:49'!maxNegativeValue	"Valor máximo negativo permitido del tipo de dato."		^ self maxPositiveValue negated.! !!PLC_Reals methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:49'!minNegativeValue	"Valor mínimo negativo permitido del tipo de dato."			^ self minPositiveValue negated.! !!PLC_Reals methodsFor: 'types' stamp: 'EricPernia 8/12/2012 01:10'!range	"Devuelve el rango de representacion del tipo de dato."	^ self maxNegativeValue asString , ' a ' , self minNegativeValue asString , ' y de ' , self minPositiveValue asString , ' a ' , self maxPositiveValue asString.! !PLC_Reals subclass: #PLC_LongReal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_LongReal commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_LongReal is xxxxxxxxx.Instance Variables!!PLC_LongReal methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:26'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 64.! !!PLC_LongReal methodsFor: 'types' stamp: 'EricPernia 8/12/2012 00:22'!description	"Devuelve la descripción del tipo de dato."	^ 'Real largo.'.! !!PLC_LongReal methodsFor: 'types' stamp: 'EricPernia 4/25/2012 17:23'!keyword	"Devuelve el keyword del tipo de dato."	^ #LREAL.! !!PLC_LongReal methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:51'!maxPositiveValue	"Valor máximo positivo permitido del tipo de dato."			^ 1.7976931348623157e308.! !!PLC_LongReal methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:51'!minPositiveValue	"Valor mínimo positivo permitido del tipo de dato."			^ 2.2250738585072020e-308.! !PLC_Reals subclass: #PLC_Real	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Real commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Real is xxxxxxxxx.Instance Variables!!PLC_Real methodsFor: 'types' stamp: 'EricPernia 4/25/2012 23:27'!bitSize	"Devuelve el tamaño del tipo de dato en cantidad de bits."	^ 32.! !!PLC_Real methodsFor: 'types' stamp: 'EricPernia 8/12/2012 00:22'!description	"Devuelve la descripción del tipo de dato."	^ 'Real.'.! !!PLC_Real methodsFor: 'types' stamp: 'EricPernia 4/25/2012 17:22'!keyword	"Devuelve el keyword del tipo de dato."	^ #REAL.! !!PLC_Real methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:50'!maxPositiveValue	"Valor máximo positivo permitido del tipo de dato."			^ 3.4028235e38.! !!PLC_Real methodsFor: 'types' stamp: 'EricPernia 4/26/2012 00:50'!minPositiveValue	"Valor mínimo positivo permitido del tipo de dato."			^ 1.175494351e-38.! !PLC_GenericDataType subclass: #PLC_AnyDate	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyDate commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyDate is xxxxxxxxx.Instance Variables!!PLC_AnyDate methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType Date acceptedDataTypes , 		PLC_DataType DateAndTime acceptedDataTypes , 		PLC_DataType TimeOfDay acceptedDataTypes.! !!PLC_AnyDate methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:33'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_DATE.! !PLC_GenericDataType subclass: #PLC_AnyDataType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyDataType commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyDataType is xxxxxxxxx.Instance Variables!!PLC_AnyDataType methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType AnyDerived acceptedDataTypes ,		PLC_DataType AnyElementary acceptedDataTypes.! !!PLC_AnyDataType methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:25'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY.! !PLC_GenericDataType subclass: #PLC_AnyElementary	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_AnyElementary commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_AnyElementary is xxxxxxxxx.Instance Variables!!PLC_AnyElementary methodsFor: 'types' stamp: 'EricPernia 11/5/2013 12:43'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^	PLC_DataType AnyMagnitude acceptedDataTypes ,		PLC_DataType AnyBit acceptedDataTypes ,		PLC_DataType AnyString acceptedDataTypes ,		PLC_DataType AnyDate acceptedDataTypes.		! !!PLC_AnyElementary methodsFor: 'types' stamp: 'EricPernia 4/25/2012 14:33'!keyword	"Devuelve el keyword del tipo de dato."	^ #ANY_ELEMENTARY.! !PLC_ElementaryDataType subclass: #PLC_DateAndTime	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_DateAndTime commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_DateAndTime is xxxxxxxxx.Instance Variables!PLC_DateAndTime subclass: #PLC_TimeOfDay	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_TimeOfDay commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_TimeOfDay is xxxxxxxxx.Instance Variables!!PLC_TimeOfDay methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:32'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^ self keywords.! !!PLC_TimeOfDay methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:32'!keyword	"Devuelve el keyword del tipo de dato."	^ self keywords at:2.! !!PLC_TimeOfDay methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:32'!keywords	"Devuelve los keywords del tipo de dato."	^ {#TOD. #TIME_OF_DAY.}.! !PLC_DateAndTime subclass: #PLC_DateAndTimeOfDay	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_DateAndTimeOfDay commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_DateAndTimeOfDay is xxxxxxxxx.Instance Variables!!PLC_DateAndTimeOfDay methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:31'!acceptedDataTypes	"Devuelve un Array que contiene la lista de los tipos aceptados"	^ self keywords.! !!PLC_DateAndTimeOfDay methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:31'!keyword	"Devuelve el keyword del tipo de dato."	^ self keywords at:2.! !!PLC_DateAndTimeOfDay methodsFor: 'types' stamp: 'EricPernia 4/25/2012 19:31'!keywords	"Devuelve los keywords del tipo de dato."	^ {#DT. #DATE_AND_TIME.}.! !PLC_DateAndTime subclass: #PLC_Date	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-DataTypes'!!PLC_Date commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.------------------------------------------------------------------A PLC_Date is xxxxxxxxx.Instance Variables!!PLC_Date methodsFor: 'types' stamp: 'EricPernia 4/25/2012 15:21'!keyword	"Devuelve el keyword del tipo de dato."	^ #DATE.! !PLC_DataType initialize!