"Copyright © 2012-2014 Eric Nicolás Pernia.This file is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>."Object subclass: #PLC_ConnectableBlock	instanceVariableNames: 'connectableBlocksNetwork element inputs outputs'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-ConnectableBlocks'!!PLC_ConnectableBlock commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.A PLC_ConnectableBlock is xxxxxxxxx.Instance Variables	connectableBlocksNetwork:		<Object>	element:		<Object>	inputs:		<Object>	outputs:		<Object>connectableBlocksNetwork	- xxxxxelement	- xxxxxinputs	- xxxxxoutputs	- xxxxx!!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 9/22/2012 03:00'!blockConnectedToInput: anInputNumber	"Devuelve el bloque conectado a la entrada anInputNumber."		| connection |		self inputs size >= anInputNumber		ifTrue: [			connection := (self inputs at: anInputNumber) connection.			connection				ifNil: [					^ nil.					] 				ifNotNil: [					^ connection outputPin block.					].			]		ifFalse: [			^ nil.			].		! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 9/22/2012 02:59'!blockConnectedToOutput: anOutputNumber	"Devuelve el bloque conectado a la salida anInputNumber."		| connection |		self outputs size >= anOutputNumber		ifTrue: [			connection := (self outputs at: anOutputNumber) connection.			connection				ifNil: [					^ nil.					] 				ifNotNil: [					^ connection inputPin block.					].			]		ifFalse: [			^ nil.			].		! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 9/22/2012 22:19'!connectedAtInput: anInputNumber	"Devuelve la conexion a la entrada anInputNumber."		self inputs size >= anInputNumber		ifTrue: [			^ (self inputs at: anInputNumber) connection.			]		ifFalse: [			^ nil.			].		! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 9/22/2012 22:19'!connectedAtOutput: anOutputNumber	"Devuelve la conexion a la salida anOutputNumber."		self outputs size >= anOutputNumber		ifTrue: [			^ (self outputs at: anOutputNumber) connection.			]		ifFalse: [			^ nil.			].		! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 9/30/2012 19:44'!connectionToAddElement: aPLC_ElemenMorph	"Devuelve la conexion para añadirle un nuevo elemento."	^ self element connectionToAddElement: aPLC_ElemenMorph inBlock: self! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 5/10/2012 04:09'!disconnectInput: anInputNumber	"Desconecta la entrada numero 'anInputNumber' del bloque al que le mando este mensaje."	(self inputs at: anInputNumber) disconnect.! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 10/6/2012 02:10'!disconnectOutput: anOutputNumber	"Desconecta la entrada del bloque al que estaba conectado."	(self outputs at: anOutputNumber) disconnect.! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 9/25/2012 19:40'!input: anInputNumber connectTo: aConnectableBlock output: anOutputNumber	"Conecta la entrada numero anInputNumber del bloque al que le mando este mensaje con la salida numero anOutputNumber de aConnectableBlock."		^ aConnectableBlock output: anOutputNumber connectTo: self input: anInputNumber.! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'CL 11/18/2013 02:50'!inputPinAfter: unPin	"Devuelve el pin de salida posterior a unPin."		^self inputs after: unPin ifAbsent: [ nil ] ! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 11/10/2012 06:59'!inputPinNumberConnectedToOutput: anOutputNumber	"Devuelve el Numero de pin de entrada que esta conectado al pin de salida anOutputNumber."		| connection connectableBlock |		self outputs size >= anOutputNumber		ifTrue: [			connection := (self outputs at: anOutputNumber) connection.			connection				ifNil: [					^ nil.					] 				ifNotNil: [					connectableBlock := connection inputPin block.					^ connectableBlock inputs indexOf: connection inputPin.					].			]		ifFalse: [			^ nil.			].! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 10/12/2012 20:04'!output: anOutputNumber connectTo: aConnectableBlock input: anInputNumber	"Conecta la salida numero anOutputNumber del bloque al que le mando este mensaje con la entrada numero anInputNumber de aConnectableBlock."		| outputPin inputPin |		outputPin := self outputs at: anOutputNumber.	inputPin := aConnectableBlock inputs at: anInputNumber.				^ outputPin connectTo: inputPin.! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'CL 11/17/2013 22:11'!outputPinAfter: unPin	"Devuelve el pin de salida posterior a unPin."		^self outputs after: unPin ifAbsent: [ nil ] ! !!PLC_ConnectableBlock methodsFor: 'connections' stamp: 'EricPernia 11/10/2012 07:00'!outputPinNumberConnectedToInput: anInputNumber	"Devuelve el Numero de pin de salida que esta conectado al pin de entrada anInputNumber."		| connection connectableBlock |		self inputs size >= anInputNumber		ifTrue: [			connection := (self inputs at: anInputNumber) connection.			connection				ifNil: [					^ nil.					] 				ifNotNil: [					connectableBlock := connection outputPin block.					^ connectableBlock outputs indexOf: connection outputPin.					].			]		ifFalse: [			^ nil.			].! !!PLC_ConnectableBlock methodsFor: 'compilation' stamp: 'EricPernia 10/5/2012 23:55'!cCompile	"Compila el bloque pidiendoselo a su elemento."	| ilBlockCode |		self element cCompileFor: self.		! !!PLC_ConnectableBlock methodsFor: 'compilation' stamp: 'EricPernia 11/5/2013 13:05'!generateCodeIn: aProgramAccumulator	"Compila su programa a objetos que lo forman. Estos pueden dar su código C o IL."	"Compila el bloque pidiendoselo a su elemento. Se pasa como parámetro debido a	que algunos elementos son únicos"			self element generateCodeIn: aProgramAccumulator for: self.! !!PLC_ConnectableBlock methodsFor: 'compilation' stamp: 'EricPernia 10/5/2012 23:55'!ilCompile	"Compila el bloque pidiendoselo a su elemento."	| ilBlockCode |		self element ilCompileFor: self.		! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 10/9/2012 21:13'!addInput	"Añade un pin de entrada al Bloque Conectable y le añade una entrada a su elemento."		"VER SI LE TENGO QUE PASAR COSAS POR PARAMETRO AL ELEMENTO COMO SER LA CATEGORIA DE SALIDA DE ENTRADA"	self addInputPin.	self element addInput.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 10/9/2012 21:01'!addInputPin	self inputs add: (PLC_ConnectableBlockPin InputFor: self).! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'CL 11/18/2013 02:52'!addInputPinAfter: aPin	"Añade un nuevo pin de salida al Bloque Conectable despues del pin de salida aPin."	self inputs 		add: (PLC_ConnectableBlockPin InputFor: self)		after: aPin.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 7/16/2013 21:44'!addOutput	"Añade un pin de salida al Bloque Conectable y le añade una salida a su elemento."	self addOutputPin.	self element addOutput.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 7/16/2013 21:56'!addOutputAfter: aPin	"Añade un pin de salida al Bloque Conectable y le añade una salida a su elemento	despues del pin de salida aPin."	self addOutputPinAfter: aPin.	self element addOutput.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 10/9/2012 21:01'!addOutputPin	self outputs add: (PLC_ConnectableBlockPin OutputFor: self).! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 7/17/2013 15:54'!addOutputPin: pinToAdd after: aPin	"Añade el pin de salida pinToAdd al Bloque Conectable despues del pin de salida aPin."	self outputs 		add: pinToAdd		after: aPin.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'CL 11/17/2013 22:04'!addOutputPinAfter: aPin	"Añade un nuevo pin de salida al Bloque Conectable despues del pin de salida aPin."	self outputs 		add: (PLC_ConnectableBlockPin OutputFor: self)		after: aPin.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 10/9/2012 21:01'!buildInputs	"Construye las entradas del bloque conectable. Para lograrlo, añade todas las entradas preguntandole la cantidad a su Elemento."		self inputs: OrderedCollection new.	self element connectableBlockInputs timesRepeat: [self addInputPin].	! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 10/9/2012 21:01'!buildOutputs	"Construye las salidas del bloque conectable. Para lograrlo, añade todas las salidas preguntandole la cantidad a su Elemento."	self outputs: OrderedCollection new.	self element connectableBlockOutputs timesRepeat: [self addOutputPin].! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 5/10/2012 03:12'!removeInputAt: aNumberOfInput	self inputs removeAt: aNumberOfInput.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 10/9/2012 21:02'!removeInputPinAt: aNumberOfInput	self inputs removeAt: aNumberOfInput.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 5/10/2012 03:12'!removeOutputAt: aNumberOfInput	self outputs removeAt: aNumberOfInput.! !!PLC_ConnectableBlock methodsFor: 'building' stamp: 'EricPernia 10/9/2012 21:02'!removeOutputPinAt: aNumberOfInput	self outputs removeAt: aNumberOfInput.! !!PLC_ConnectableBlock methodsFor: 'testing' stamp: 'EricPernia 9/22/2012 21:55'!isConnectableBlock	"Devuelve true si es una instancia de la clase PLC_ConnectableBlock"	^ true.! !!PLC_ConnectableBlock methodsFor: 'testing' stamp: 'EricPernia 10/14/2012 04:53'!isConnection	"Devuelve siempre false. ESTE METODO ES UNA MUGRE PARA QUE FUNCIONE FACIL close branch"	^ false.! !!PLC_ConnectableBlock methodsFor: 'testing' stamp: 'EricPernia 5/29/2012 12:03'!isInputBlock	"Responde true si no tiene ninguna entrada"	^ self inputs size == 0.! !!PLC_ConnectableBlock methodsFor: 'testing' stamp: 'EricPernia 5/29/2012 12:03'!isOutputBlock	"Responde true si no tiene ninguna salida"	^ self outputs size == 0.! !!PLC_ConnectableBlock methodsFor: 'drawing' stamp: 'EricPernia 4/29/2013 16:01'!graphicElement	"Devuelve el elemento grafico (morph) de su elemento."	^ self element graphicElementFor: self.! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 16:23'!conexionesDeEntrada	^ inputConnections! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 16:24'!conexionesDeEntrada: anObject	inputConnections := anObject! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 9/15/2013 17:33'!connectableBlocksNetwork		^ connectableBlocksNetwork! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 9/15/2013 17:33'!connectableBlocksNetwork: anObject		connectableBlocksNetwork := anObject! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 16:26'!element	^ element! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 16:26'!element: anObject	element := anObject! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 16:24'!entradas	^ inputs! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 16:24'!entradas: anObject	inputs := anObject! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 22:34'!inputs	^ inputs! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 22:34'!inputs: anObject	inputs := anObject! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 3/5/2012 06:59'!outputs	^ outputs! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 3/5/2012 06:59'!outputs: anObject	outputs := anObject! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 16:23'!salidas	^ outputs! !!PLC_ConnectableBlock methodsFor: 'accessing' stamp: 'EricPernia 5/9/2012 16:23'!salidas: anObject	outputs := anObject! !!PLC_ConnectableBlock methodsFor: 'simulacion' stamp: 'EricPernia 11/26/2010 12:42'!SosBloqueDeSalida		^false.! !!PLC_ConnectableBlock methodsFor: 'simulacion' stamp: 'EricPernia 11/26/2010 12:42'!SosBloqueDerivador		^false.! !!PLC_ConnectableBlock methodsFor: 'simulacion' stamp: 'EricPernia 11/15/2010 13:02'!condicionInicial: unValor ParaLaSalida: unNumeroDeSalida	"Carga la condicion inicial unValor en la OrderedCollection salidas en la posicion que le paso en unNumeroDeSalida."	self salidas at: unNumeroDeSalida put: unValor.! !!PLC_ConnectableBlock methodsFor: 'simulacion' stamp: 'EricPernia 11/15/2010 13:04'!guardarValorDeEntrada: unValor	"Agrega el valor unValor a la OrderedCollection entradas."	self entradas add: unValor.! !!PLC_ConnectableBlock methodsFor: 'simulacion' stamp: 'EricPernia 2/28/2012 02:56'!leerEntradasEnTiempo: t	"Lee y almacena en la OrederedCollection entradas todas las salidas de otros bloques que tiene conectadas a sus entradas.	(vector at: 1) devuelve un bloque.	(vector at: 2) devuelve un numero que representa un numero de salida de dicho bloque"	self conexionesDeEntrada do: [ :vector | self guardarValorDeEntrada: ((vector at: 1) salida: (vector at: 2) enTiempo: t) ].! !!PLC_ConnectableBlock methodsFor: 'simulacion' stamp: 'EricPernia 12/3/2010 16:44'!resetearEntradas 	"Apunta la variable entradas a una nueva OrderedCollection para perder los valores de entradas y 	tener nuevamente su indice en cero para el proximo calculo de entradas."		self entradas: self entradas removeAll. ! !!PLC_ConnectableBlock methodsFor: 'simulacion' stamp: 'EricPernia 11/14/2010 18:55'!salida: unNumeroDeSalida	^self salidas at: unNumeroDeSalida.! !!PLC_ConnectableBlock methodsFor: 'simulacion' stamp: 'EricPernia 11/15/2010 13:34'!salida: unNumeroDeSalida enTiempo: t	"Calcuala y devuelve la salida del bloque al que el mandan este mensaje para eltiempo t."	self leerEntradasEnTiempo: t. 			"Lee sus entradas en el tiempo t. Este lee las entradas haciendo que 											se ramifique hasta los bloques de entrada el flujo dle programa."												self funcionEnTiempo: t. 				"Ejecuta las tareas del bloque. Este metodo se debe definir en las 											subclases y debe escribir las salidas."												self resetearEntradas.					"Reseteo las entradas."							^ self salidas at: unNumeroDeSalida.	"Devuelve su salida en el tiempo t. Esta linea hace la magia de que 											vuelva todo hacia la salida"			! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_ConnectableBlock class	instanceVariableNames: ''!!PLC_ConnectableBlock class methodsFor: 'instance creation' stamp: 'EricPernia 5/9/2012 19:23'!newWithElement: aPLC_Element	| tempBlock |		tempBlock := self new.	tempBlock element: aPLC_Element.		tempBlock buildInputs;		buildOutputs.		^ tempBlock.! !Object subclass: #PLC_ConnectableBlockConnection	instanceVariableNames: 'outputPin inputPin'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-ConnectableBlocks'!!PLC_ConnectableBlockConnection commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.A PLC_ConnectableBlockConnection is xxxxxxxxx.Instance Variables	inputPin:		<Object>	outputPin:		<Object>inputPin	- xxxxxoutputPin	- xxxxx!!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 10/2/2012 23:51'!blockConnectedToInput: anInputNumber	"Devuelve el bloque conectado a la entrada de la conexion."		^ self connectedAtInput: anInputNumber.! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 10/2/2012 23:51'!blockConnectedToOutput: anOutputNumber	"Devuelve el bloque conectado a la salida de la conexion."		^ self connectedAtOutput: anOutputNumber.! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'CL 11/18/2013 03:15'!checkAutoconnectionWithPin: aPLC_Pin1 andPin: aPLC_Pin2	"Chequea si el Bloque Conectable del OutputPin de la conexion y el 	Bloque Conectable del InputPin de la conexion son iguales."	(aPLC_Pin1 block = aPLC_Pin2 block) 		ifTrue: [			self error: 'No se puede conectar a si mismo.'.			]. ! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'CL 11/18/2013 03:16'!checkOutputPin: anOutputPin andInputPin: anInputPin.	"Chequea si el Bloque Conectable del OutputPin de la conexion y el 	Bloque Conectable del InputPin de la conexion son iguales."	( anOutputPin isOutputPin and: [ anInputPin isInputPin ] ) 		ifFalse: [			self error: 'Error de direccionamiento de conexión. Se debe conectar un Pin de salida con un Pin de entrada.'.			]. ! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 10/14/2012 03:43'!connect: anOutputPin To: anInputPin.	"Agrega los 2 elementos que forman la conexión, es decir un bloque conectable y el número de pin correspondiente."		( anOutputPin isNil or: [ anInputPin isNil ] )		ifFalse: [ 			self checkAutoconnectionWithPin: anOutputPin andPin: anInputPin.			self checkOutputPin: anOutputPin andInputPin: anInputPin.			].			self outputPin: anOutputPin.	self inputPin: anInputPin.! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 9/22/2012 22:25'!connectedAtInput: anInputNumber	"Devuelve el bloque a la entrada."		anInputNumber = 1		ifTrue: [			^ self outputPin block.			]		ifFalse: [			^ nil.			].! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 9/22/2012 22:25'!connectedAtOutput: anOutputNumber	"Devuelve el bloque a la salida."		anOutputNumber = 1		ifTrue: [			^ self inputPin block.			]		ifFalse: [			^ nil.			].! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 9/30/2012 19:39'!connectionToAddElement: aPLC_ElemenMorph	"Devuelve la conexion para añadirle un nuevo elemento."	^ self.		"Hacer que compruebe aquí si puede conectar o no el elemento nuevo pidiendole a los bloques de sus extremos si lo permiten"! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 5/10/2012 18:08'!disconnect	"Borra  los 2 elementos que forman la conexión, es decir, ambos pines."	self inputPin disconnectPin.	self outputPin disconnectPin.		self connect: nil To: nil.! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 10/2/2012 23:58'!disconnectInput: anInputNumber	"Borra  los el pin de entrada de la conexion."	anInputNumber = 1		ifTrue: [			self outputPin disconnectPin.			self connect: nil To: self inputPin.			].! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 10/2/2012 23:57'!disconnectOutput: anOutputNumber	"Borra  los 2 elementos que forman la conexión, es decir, ambos pines."	anOutputNumber = 1		ifTrue: [			self inputPin disconnectPin.			self connect: self outputPin To: nil.			].! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 10/13/2012 21:12'!outputPinNumberConnectedToInput: anInputNumber	"Devuelve el Numero de pin de salida que esta conectado al pin de entrada anInputNumber."		| connectableBlock |		anInputNumber = 1		ifTrue: [			connectableBlock := self outputPin block.			^ connectableBlock outputs indexOf: self outputPin.			]		ifFalse: [			^ nil.			].! !!PLC_ConnectableBlockConnection methodsFor: 'connection' stamp: 'EricPernia 6/5/2013 23:04'!replaceConnectionByConnectingToInputPin: anInputPin andOutputPin: anOutputPin	"Elimina la conexion que recibe el mensaje y conecta el pin de salida de esa conexion al pin anInputPin,	que puede un pin de un bloque conectado a un circuito complejo, y conecta el pin anOutputPin, que puede	ser un pin de salida de un bloque de un circuito complejo, al pin de entrada de la conexion.		self es:			connectionOutputPin -----------> connectionInputPin  		lo reemplazo por:												    -------------------		 connectionOutputPin -----------> anInputPin |    circuito   |  anOutputPin -----------> connectionInputPin  												    -------------------	 "		| connectionOutputPin connectionInputPin |		"Busco los pines de los Bloques Conectables a entrada y salida de la conexion."	connectionOutputPin := self outputPin.	connectionInputPin := self inputPin.		"Desconecto la conexion"	self disconnect.		connectionOutputPin connectTo: anInputPin.	anOutputPin connectTo: connectionInputPin.! !!PLC_ConnectableBlockConnection methodsFor: 'accessing' stamp: 'EricPernia 5/10/2012 16:30'!inputPin	^ inputPin! !!PLC_ConnectableBlockConnection methodsFor: 'accessing' stamp: 'EricPernia 5/10/2012 16:30'!inputPin: anObject	inputPin := anObject! !!PLC_ConnectableBlockConnection methodsFor: 'accessing' stamp: 'CL 11/18/2013 03:16'!isConnectableBlock	"Devuelve true si es una instancia de la clase PLC_ConnectableBlock"	^ false.! !!PLC_ConnectableBlockConnection methodsFor: 'accessing' stamp: 'CL 11/18/2013 03:17'!isConnection	"Devuelve true si es una instancia de la clase PLC_ConnectableBlockConnection"	^ true.! !!PLC_ConnectableBlockConnection methodsFor: 'accessing' stamp: 'EricPernia 5/10/2012 16:30'!outputPin	^ outputPin! !!PLC_ConnectableBlockConnection methodsFor: 'accessing' stamp: 'EricPernia 5/10/2012 16:30'!outputPin: anObject	outputPin := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_ConnectableBlockConnection class	instanceVariableNames: ''!!PLC_ConnectableBlockConnection class methodsFor: 'instance creation' stamp: 'EricPernia 5/10/2012 23:27'!newWithInput: anInputPin andOutput: anOutputPin	| tempConnection |		tempConnection := self new.	tempConnection inputPin: anInputPin;		outputPin: anOutputPin.	^ tempConnection.! !Object subclass: #PLC_ConnectableBlockPin	instanceVariableNames: 'block connection'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-ConnectableBlocks'!!PLC_ConnectableBlockPin commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.A PLC_ConnectableBlockPin is xxxxxxxxx.Instance Variables	block:		<Object>	connection:		<Object>block	- xxxxxconnection	- xxxxx!!PLC_ConnectableBlockPin methodsFor: 'accessing' stamp: 'EricPernia 5/10/2012 15:37'!block	^ block! !!PLC_ConnectableBlockPin methodsFor: 'accessing' stamp: 'EricPernia 5/10/2012 15:37'!block: anObject	block := anObject! !!PLC_ConnectableBlockPin methodsFor: 'accessing' stamp: 'EricPernia 5/10/2012 15:05'!connection	^ connection! !!PLC_ConnectableBlockPin methodsFor: 'accessing' stamp: 'EricPernia 5/10/2012 15:05'!connection: anObject	connection := anObject! !!PLC_ConnectableBlockPin methodsFor: 'test' stamp: 'EricPernia 5/10/2012 15:53'!isInputPin	"Responde true si es un pin de entrada"	^ false.! !!PLC_ConnectableBlockPin methodsFor: 'test' stamp: 'EricPernia 5/10/2012 15:53'!isOutputPin	"Responde true si es un pin de salida"	^ false.! !!PLC_ConnectableBlockPin methodsFor: 'connection' stamp: 'EricPernia 5/10/2012 17:56'!connected	"Responde true si el pin esta conectado."		^ self connection isNil not.! !!PLC_ConnectableBlockPin methodsFor: 'connection' stamp: 'EricPernia 5/10/2012 18:04'!disconnect	"Desconecta al pin que le envio este mensaje."	| connect |		(self connected)		ifTrue: [			self connection disconnect.			]! !!PLC_ConnectableBlockPin methodsFor: 'connection' stamp: 'EricPernia 5/10/2012 18:08'!disconnectPin	"Borra la conexion del pin."	self connection: nil.! !!PLC_ConnectableBlockPin methodsFor: 'connection' stamp: 'EricPernia 5/10/2012 17:56'!disconnected	"Responde true si el pin esta desconectado."		^ self connection isNil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PLC_ConnectableBlockPin class	instanceVariableNames: ''!!PLC_ConnectableBlockPin class methodsFor: 'instance creation' stamp: 'EricPernia 5/10/2012 16:03'!InputFor: aConnectableBlock	"Devuelve un nuevo PLC_ConnectableBlockInputPin con bloque aConnectableBlock."	| inputPin |		inputPin := PLC_ConnectableBlockInputPin new.	inputPin block: aConnectableBlock.	^ inputPin.! !!PLC_ConnectableBlockPin class methodsFor: 'instance creation' stamp: 'EricPernia 5/10/2012 16:03'!OutputFor: aConnectableBlock	"Devuelve un nuevo PLC_ConnectableBlockOutputPin con bloque aConnectableBlock."	| outputPin |		outputPin := PLC_ConnectableBlockOutputPin new.	outputPin block: aConnectableBlock.	^ outputPin.! !PLC_ConnectableBlockPin subclass: #PLC_ConnectableBlockOutputPin	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-ConnectableBlocks'!!PLC_ConnectableBlockOutputPin commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.A PLC_ConnectableBlockOutputPin is xxxxxxxxx.Instance Variables!!PLC_ConnectableBlockOutputPin methodsFor: 'connections' stamp: 'EricPernia 5/9/2013 17:14'!connectTo: anInputPin	"Conecta al pin que le envio este mensaje con anInputPin si ambos estan libres. self es un output pin"	| connec |		(anInputPin isInputPin and:  [self disconnected and: [ anInputPin disconnected ] ] )		ifTrue: [			connec := PLC_ConnectableBlockConnection newWithInput: anInputPin andOutput: self.						connec checkAutoconnectionWithPin: self andPin: anInputPin.						self connection: connec.			anInputPin connection: connec.						^ connec.						]		ifFalse: [			].! !!PLC_ConnectableBlockOutputPin methodsFor: 'test' stamp: 'EricPernia 5/10/2012 15:55'!isOutputPin	"Responde true si es un pin de salida"	^ true.! !PLC_ConnectableBlockPin subclass: #PLC_ConnectableBlockInputPin	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-ConnectableBlocks'!!PLC_ConnectableBlockInputPin commentStamp: '<historical>' prior: 0!Copyright © 2012-2014 Eric Nicolás Pernia.This class is part of IDE4PLC.IDE4PLC is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.IDE4PLC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with IDE4PLC. If not, see <http://www.gnu.org/licenses/>.A PLC_ConnectableBlockInputPin is xxxxxxxxx.Instance Variables!!PLC_ConnectableBlockInputPin methodsFor: 'test' stamp: 'EricPernia 5/10/2012 15:55'!isInputPin	"Responde true si es un pin de entrada"	^ true.! !!PLC_ConnectableBlockInputPin methodsFor: 'connections' stamp: 'CL 11/18/2013 03:05'!connectTo: anOutputPin		"Conecta al pin que le envio este mensaje con anOutputPin si ambos estan libres. self es un input pin"	|  connec |		(anOutputPin isOutputPin and: [ self disconnected and: [ anOutputPin disconnected ] ] )		ifTrue: [			connec := PLC_ConnectableBlockConnection newWithInput: self andOutput: anOutputPin.						connec checkAutoconnectionWithPin: anOutputPin andPin: self.						self connection: connec.			anOutputPin connection: connection.						^ connec.			]				ifFalse: [			]! !